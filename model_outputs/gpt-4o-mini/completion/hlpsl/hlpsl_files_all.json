{"HLPSL-1/20172001_Assign_3.hlpsl": [[true, "% Fill in the blanks based on the context of the protocol.\n% The following are placeholders and need to be replaced with actual HLPSL code.\n\n% Example for MESSAGE_43\n% Assuming MESSAGE_43 is a message containing M2' and M3'\n/\\ MESSAGE_43 := M2' || M3'\n\n% Example for MESSAGE_44\n/\\ send(____(CHANNEL_NAME)____, ____(MESSAGE_44)____)\n\n% Example for EVENT_3\n/\\ EVENT_3 := login_request\n\n% Example for EVENT_4\n/\\ EVENT_4 := login_response\n\n% Example for EVENT_5\n/\\ witness(____(EVENT_5_TYPE)____, ____(EVENT_5_TARGET)____, ____(EVENT_5_EVENT)____, ____(EVENT_5_VALUE)____)\n\n% Example for EVENT_6\n/\\ EVENT_6 := ui_gwn_rui_received\n\n% Example for STATE_1\n/\\ STATE_1 := 1\n\n% Example for CHANNEL_NAME\n/\\ CHANNEL_NAME := public_channel"]], "HLPSL-1/2019202008.hlpsl": [[false, "```\nrole client(\n\tGen,User : channel(dy),\n\tH \t: hash_func\n%\tKu, Kg\t: public_key,\n\t)\n\nplayed_by C def=\n\n\tlocal\n\t\ti : nat,\n\t\tK, Kj, K' : symmetric_key,\n\t\tSId, UID, PWD, TS1, TS2, TS3, TS4, TS5, TS6, TE : text,\n\t\tP, TC, PTC : text,\n\t\tVI, VI1, VI2, VI3 : text,\n\t\tREG, C1, Cgwn, PKS, PKSgwn, PKS1 : text,\n\t\tDID : text,\n\t\tKEYij : text,\n\t\tTdel, Tchck, Ti, Tgwn : nat\n\n\tconst\n\t\tg_u_te, u_g_ts1, s_g_ts2, u_c_ts3, s_c_ts4, u_c_te, s_c_te : nat\n\n\tinit\n\t\tState := 1\n\n\ttrans\n\t\tState = 1 /\\ RCV(SId, UID, PWD, TS1, TS2, TS3, TS4, TS5, TS6, TE) =|>\n\t\t   State' := 2 /\\ SId' := SId /\\ UID' := UID /\\ PWD' := PWD /\\ TS1' := TS1 /\\ TS2' := TS2 /\\ TS3' := TS3 /\\ TS4' := TS4 /\\ TS5' := TS5 /\\ TS6' := TS6 /\\ TE' := TE\n\n\t\tState = 2 /\\ K' := H(xor(K, Kj)) =|>\n\t\t   State' := 3 /\\ KEYij' := K'\n\n\t\tState = 3 /\\ SEND(SId, UID, PWD, TS1, TS2, TS3, TS4, TS5, TS6, TE, K') =|>\n\t\t   State' := 4\n\n\t\tState = 4 /\\ RCV(____(RETURN_VARIABLE_1)____) =|>\n\t\t   State' := 5\n\n\t\tState = 5 /\\ SEND(____(RETURN_VARIABLE_2)____) =|>\n\t\t   State' := 6\n\n\t\tState = 6 /\\ RCV(____(RETURN_VARIABLE_3)____) =|>\n\t\t   State' := 7\n\n\n\t\t____(TRANSITION_1)____\n\nend role\n\n%%Role server node\nrole server(\n\tGen,User,Sensor,____(PARAM_4)____ : channel(dy),\n\tH \t: hash_func\n%\tKs, Ku\t: public_key,\n\t)\n\nplayed_by S def=\n\n\tlocal\n\t\ti : nat,\n\t\tK, Kj, K' : symmetric_key,\n\t\tSId, UID, PWD, TS1, TS2, TS3, TS4, TS5, TS6, TE : text,\n\t\tP, TC, PTC : text,\n\t\tVI, VI1, VI2, VI3 : text,\n\t\tREG, C1, Cgwn, PKS, PKSgwn, PKS1 : text,\n\t\tDID : text,\n\t\tKEYij : text,\n\t\tTdel, Tchck, Ti, Tgwn : nat\n\n\tconst\n\t\tg_u_te, u_g_ts1, s_g_ts2, u_c_ts3, s_c_ts4, u_c_te, s_c_te : nat\n\n\tinit\n\t\tState := 1\n\n\ttrans\n\t\tState = 1 /\\ RCV(SId, UID, PWD, TS1, TS2, TS3, TS4, TS5, TS6, TE) =|>\n\t\t   State' := 2 /\\ SId' := SId /\\ UID' := UID /\\ PWD' := PWD /\\ TS1' := TS1 /\\ TS2' := TS2 /\\ TS3' := TS3 /\\ TS4' := TS4 /\\ TS5' := TS5 /\\ TS6' := TS6 /\\ TE' := TE\n\n\n\t\tState = 2 /\\ ____(VARIABLE_1)____ =|>\n\t\t   State' := 3\n\n\t\tState = 3 /\\ SEND(____(RETURN_VARIABLE_4)____) =|>\n\t\t   State' := 4\n\n\t\tState = 4 /\\ RCV(____(RETURN_VARIABLE_5)____) =|>\n\t\t   State' := 5\n\n\t\t____(TRANSITION_2)____\n\n\t\t____(TRANSITION_3)____\n\t\t\nend role\n\n```\n```hlpsl\n```"]], "HLPSL-1/A_Secure_and_Efficient_Smart_Card-based_UCSSO_Scheme_Using_Extended_Chebyshev_Chaotic_Maps_for_Telemedicine_Systems.hlpsl": [[true, "module registration_protocol\n\n// Define roles\nrole ROLE_1 is user\nrole ROLE_2 is server\n\n\n// Define parameters\nparameter PARAM_0 is integer\nparameter PARAM_1 is integer\nparameter PARAM_2 is integer\nparameter PARAM_3 is integer\nparameter PARAM_4 is integer\n\n// Define channels\nchannel channel(integer)\n\n// Define variables\nvariable VARIABLE_0 is integer\nvariable IDi is text\nvariable SIDj is text\nvariable PWi is text\nvariable X is text\nvariable Yi is text\nvariable Ai is text\nvariable Aii is text\nvariable Bj is text\nvariable Ui is text\nvariable Uj is text\nvariable Bi is text\nvariable Ci is text\nvariable Bii is text\nvariable Bjj is text\nvariable Ki is text\nvariable Kij is text\nvariable Ri is text\nvariable Pi is text\nvariable Mi is text\nvariable Sj is text\nvariable Wj is text\nvariable MacSj is text\nvariable MacUi is text\nvariable Xsj is text\n\n\n// Define functions (example: hash function)\nfunction H(text) returns (text)\n\n// Define initial state\ninit State := 0\n\n\n// Define transitions\ntransition\n  // Registration phase\n  1.  State = 0 /\\ channel(PARAM_2).RCV(start) =|>\n  State' := 1\n  /\\ IDi' := new()\n  /\\ SIDj' := new()\n  /\\ PWi' := new()\n  /\\ Yi' := new()\n  % Suppose T(.) is a Chebyshev polynomial\n  /\\ Ai' := T(Yi'.X)\n  /\\ Aii' := xor(({H(PWi')}_Ai'),({H(Yi')\n  /\\ channel(PARAM_2).SND(reg_req, IDi', SIDj', PWi', Ai', Aii', Yi'))\n\n\n// Define the played_by function. This is crucial for specifying which role plays which action.\nplayed_by ROLE_1 def=\n  // Add the conditions for ROLE_1 to execute each transition\n  // For example:\n  // 1. State = 0 /\\ channel(PARAM_2).RCV(start) =|> ... (from the transition definition)\n  //   /\\ ... (other conditions specific to ROLE_1)"]], "HLPSL-1/BRSKI.hlpsl": [[false, "```\n9. State  = 9 \n     /\\ RCV_P({{Assr'.Np'.Sn.Crdate'.{R.Kr'}_inv(Kca)}_(inv(Kp))}_(KeyGen(P.Pms'.Na.Nb'))) =|>\n     State':= 11 \n\t/\\ Nc' := new() \n\t/\\ Pam' := new()\n\t/\\ Sidm' := new()\n\t/\\ SND_M(R.Nc'.Sidm'.Pam')\n     \n 11. State  = 11\n     /\\ RCV_M(Nd'.Sidm'.Pam'.{M.Km}_inv(Kca)) =|> %Nd'.Sidm'.Pam'.{M.Km}_inv(Kca)\n     State':= 13 \n\t/\\ Pmsm' := new()\n\t/\\ Mm' := PRF(Pmsm'.Nc.Nd')\n\t/\\ Finishedm' := PRF(Mm'.R.M.Nc.Pam.Sidm)\n\t/\\ ClientKm' := KeyGen(R.Nc.Nd'.Mm')\n\t/\\ ServerKm' := KeyGen(M.Nc.Nd'.Mm')\n\n\t/\\ SND_M({Pmsm'}_(Km).{R.Kr}_inv(Kca).{Finishedm'}_ClientKm') \n\t/\\ witness(R,M,auth_nc_nd2,Nc.Nd')%% so that registrar can authenticate pledge on {R.Kr'}_inv(Kca)\n\t/\\ SND_P({Finishedm'}_ServerKm')\n```"]], "HLPSL-1/calp-v3.hlpsl": [[false, "```\nrole badgeuse (IdBadgeuse, IdEmploye: agent,\n\t    Req_AccNormal, Req_AccExceptionnel, Msg_Acc: protocol_id,\n\t    ClefSession, ClefSession_ok: protocol_id,\n\t    IdBageuse_S, IdEmploye_S: protocol_id,\n\t    ok_H : protocol_id,\n\t    Ack_AccNormal, Ack_AccExceptionnel: protocol_id\n      \n\t    ):\n  \n  %% Phase 1 : Demande d'acc\u00e8s\n  \n  init:\n    send(IdBageuse_S, IdEmploye_S, Req_AccNormal);\n  \n  next:\n    receive(ClefSession, ClefSession_ok);\n    \n  \n  %% Phase 2 : Transmission du message\n  \n  next:\n    send(Msg_Acc, ClefSession);\n\n  next:\n    receive(ok_H, ClefSession);\n    \n  \n  %% Phase 3 : R\u00e9ponse du serveur\n  \n  next:\n    if ok_H == 1 then\n      send(Ack_AccNormal);\n    else\n      send(Ack_AccExceptionnel);\n    endif;\n    \n  \n  \n  \n  \n  \n  \nendrole\n```"]], "HLPSL-1/CHAPv2.hlpsl": [[false, "```\n%% PROTOCOL: (MS-)CHAPv2\n%% Challenge/Response Authentication Protocol, version 2\n%% PURPOSE:\n%% Mutual authentication between a server and a client who share a password.\n%% CHAPv2 is the authentication protocol for the Point-to-Point Tunneling Protocol\n%% suite (PPTP).\n%% REFERENCE:\n%% \\cite{RFC2759}\n%% MODELER:\n%%\\begin{itemize}\n%%\\item Haykal Tej, Siemens CT IC 3, 2003\n%%\\item Paul Hankes Drielsma, ETH Z\\\"urich\n%%\\end{itemize}\n%%\n%% ALICE_BOB:\n%% We assume that the server \\verb!B! and client \\verb!A! share \n%% password \\verb!k(A,B)! in advance.  The server and client generate\n%% nonces \\verb!Nb! and \\verb!Na!, respectively.\n%%\\begin{verbatim}\n%%  1. A -> B: Na\n%%  2. B -> A: Nb, HMAC-MD5(k(A,B), Na || Nb)\n%%  3. A -> B: HMAC-MD5(k(A,B), Na || Nb)\n%%\\end{verbatim}\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%"]], "HLPSL-1/chebyshev_final.hlpsl": [[true, "// This is a placeholder for the missing type information.  The actual type should be\n// determined by the protocol's specification and the AVISPA model.\n// Replace with the appropriate type, e.g., integer, boolean, etc.\ntype State = integer;\n\n\n// This is a placeholder for the missing parameter information.\n// Replace with the appropriate types based on the protocol description.\n// This example assumes user roles and parameters.\nrole ROLE_1 = user;\nparam PARAM_0 = integer;\nparam PARAM_1 = string;\nparam PARAM_2 = string;\n\n\n// This is a placeholder for the missing message type.  The actual type should be\n// determined by the protocol's specification and the AVISPA model.\n// Replace with the appropriate type, e.g., string, record, etc.\nmessage = string;\n\nplayed_by Ui def=\n\n\tlocal\n\tState : integer,\n\tPubj : (agent.text.message) set,\t\n\tCi, EHIDi : message,\n\tVi : hash(text.text.hash(text).text),\n\tHIDi : hash(text.hash(text)),\n\tUIDi : hash(hash(text.hash(text)).text),\n\tTsj, Tri : message,\n\tIDi, PWi, Bi, Ri, RNi, RN1: text,\n\tXj, Trisj, TRN1, RN2: text,\n\tRN3: text.text, \t\n\t\n\tBhi : hash(text)"]], "HLPSL-1/CRAM-MD5.hlpsl": [[true, "MODULE CRAM_MD5\n\nIMPORT Crypto\n\n%% CRAM-MD5 Protocol Model\n\n%% State variables\nVAR\n  s_key : Crypto.key;\n  a_key : Crypto.key;\n\n%% Actions\nACTION authenticate(a_username : STRING, a_challenge : STRING)\n  PRE\n    s_key != NULL\n    a_key != NULL\n  THEN\n    VAR\n      a_response : STRING;\n      a_hash : Crypto.hash;\n    \n    a_hash := Crypto.md5(Crypto.concat(a_username, \" \", a_challenge, a_key));\n    a_response := Crypto.to_string(a_hash);\n    RETURN a_response;\n  END;\n\n%% Initialization\nINIT\n  s_key := Crypto.generate_key();\n  a_key := s_key;\nEND;\n\n%% Protocol Specification (Example)\n\n%% This is an example of how to specify the protocol.\n%% You would need to add more actions and states as per the protocol details.\n\n%% Example of a verification rule\nRULE verify_auth\n  PRE\n    authenticate(a_username, a_challenge)\n  THEN\n    ASSERT\n      Crypto.md5(Crypto.concat(a_username, \" \", a_challenge, a_key)) == Crypto.from_string(a_response);\n  END;\nEND MODULE"]], "HLPSL-1/crocus.hlpsl": [[false, "```\nrole alice ( \n\tinit(PARAM_4),B:agent,\n\tinit(PARAM_6),Yb:public_key,\n\tSign,KDF,init(PARAM_1),init(PARAM_2): init(PARAM_5),\n\tinit(PARAM_3),RCV:channel(init(PARAM_0))\n\t)\nplayed_by A def=\nlocal \n\tNa,Nb,Ra,Rb:nat,\n\tKa,Kb:nat, %%% Kex() --->>> Ka Ra\n\tT1,T2,T3,T4,H1,H2,H4,H3,H5,H6,REPLY,REQ:text,\n\tET1,ET2,ET3,S1,S2,S3,S4,S5,S6:message,\n\tState : nat\ninit State := 0\ntransition\n\n1. State = 0 /\\ RCV(start)\n=|> State' := 1 \n/\\ H1' := new() \n/\\ Na' := new()\n/\\ T1' := new()\n/\\ S1' := {Sign(H1'.A.Na'.T1'.B)}_inv(Ya)\n/\\ SND(H1'.Na'.T1'.S1') /\\ SND(A,B,start,H1'.Na'.T1'.S1')\n\n2. State = 1 /\\ RCV(H2'.Nb'.T2'.S2')\n=|> State' := 2\n/\\ H2' := new()\n/\\ Nb' := new()\n/\\ T2' := new()\n/\\ S2' := {Sign(H2'.B.Nb'.T2'.A)}_inv(Yb)\n/\\ SND(A,B,H2'.Nb'.T2'.S2')\n```"]], "HLPSL-1/device6g.hlpsl": [[true, "(ROLE_1) device (PARAM_2):PARAM_5, KM:agent,\t\n\tPARAM_1,PARAM_0:PARAM_4,\n\tD,ND,NWS:PARAM_3,\n\tPARAM_6, RCV:channel (dy))\nplayed_by DEV\ndef=\nlocal VARIABLE_0:nat,  \nNonce, HM, HM1, HNWS, HND:message\n\n\tconst\nsec_1, VARIABLE_2, VARIABLE_1: protocol_id\n\ninit State:=0\n\ntransition\n\n1. State=STATE_0 /\\ RCV(start)=|> \nState':=1 /\\D':=new()\n/\\HNWS':=H(NWS)\n/\\HND':=H4B(ND)\n/\\Nonce':=new()\n/\\HM':=H4B(NWS.ND.Nonce'.D')\n/\\SND(HNWS'.HND'.Nonce'.HM'.D')\n/\\EVENT_1(EVENT_0,sec_1,{DEV,KM})\n/\\EVENT_3(ND,sec_2,{EVENT_2,KM})\n%"]], "HLPSL-1/device_registration.hlpsl": [[false, "```\nrole device(SD,R1:text,PS:symmetric_key,R2:text,SND,R3:text):channel(dy)\nplayed_by SD\ndef=\n    local\n        State:int,\n        R1, R2, R3: text,\n        DS: symmetric_key\n    init\n        State := 0\n    transitions\n        State = 0 ->\n            (SD,R1,HMAC(PS,SD||R1)) -> (SD,R1,En(PS,Hash(SD||R1))), State := 1\n        State = 1 ->\n            (SD,R2,En(PS,DS),HMAC(PS,SD||R2||En(PS,DS))) -> (SD,R2,DS), State := 2\n        State = 2 ->\n            (SD,R3,En(DS,R2)) -> (SD,R3,R2), State := 3\n        State = 3 ->\n            (En(DS,R3)) -> (R3), State := 4\n```"]], "HLPSL-1/DHCP-delayed-auth.hlpsl": [[true, "MODULE DHCP_Delayed_Auth\n\n  TYPE  TIME = INT\n  TYPE  KEYID = INT\n  TYPE  MSG = {\n    c_delayedAuthReq,\n    s_delayedAuthReq\n  }\n  TYPE  C = { C_delayedAuthReq(Time: TIME) }\n  TYPE  S = { S_delayedAuthReq(Time: TIME, KeyID: KEYID, Hash: BOOL) }\n  \n  VAR\n    c_time : TIME\n    s_time : TIME\n    s_keyid : KEYID\n    s_hash : BOOL\n    \n  \n  INIT\n    c_time = 0\n    s_time = 0\n    s_keyid = 0\n    s_hash = false\n  \n  \n  TRANS\n    C_delayedAuthReq(c_time) ->\n      c_time' = c_time + 1\n\n  TRANS\n    S_delayedAuthReq(s_time, s_keyid, s_hash) ->\n      c_time' = c_time + 1\n      s_time' = s_time + 1\n      s_keyid' = s_keyid\n      s_hash' = TRUE\n\n\n  \n  \n  \n  \n  --  INVARIANT\n  --  c_time >= 0\n  --  s_time >= 0\n\n\n  --  ASSUMPTION\n  --  c_time >= 0\n  --  s_time >= 0\n\n\n  --  GOAL\n  --  s_hash = TRUE\n  \n\nENDMODULE"]], "HLPSL-1/AAAMobileIP.hlpsl": [[true, "2. State = State_4\n      /\\ Rcv( FA.{K_MnFa'.K_FaHa'}_K_AAAHAAAL.\n              KeyMnFaKeyMnHa'.SignedKeyMnFaKeyMnHa'.\n              {FA.{K_MnFa'.K_FaHa'}_K_AAAHAAAL.\n               KeyMnFaKeyMnHa'.SignedKeyMnFaKeyMnHa'}_K_AAAHAAAL)\n      =|>\n      State' := 2\n      /\\ Snd( FA.{K_MnFa'.K_FaHa'}_K_FaAAAL.\n                 KeyMnFaKeyMnHa'.SignedKeyMnFaKeyMnHa'.\n             {FA.{K_MnFa'.K_FaHa'}_K_FaAAAL.\n                 KeyMnFaKeyMnHa'.SignedKeyMnFaKeyMnHa'}_K_FaAAAL)\n\nend role\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nrole aaa_MIP_AAAH (AAAH,KeyMnFa,KeyMnHa,SignedKeyMnFaKeyMnHa,SignedKeyMnFaKeyMnHa2 : agent,\n           Snd, Rcv : channel)"]], "HLPSL-1/DPP-I.hlpsl": [[false, "```\nmodule DPP_Enrollment\n\n% Description: This module models the DPP enrollment protocol.\n% It includes authentication, configuration, and optional key exchange phases.\n\n% Types\ntype EnrolleeID = string\ntype ConfiguratorID = string\ntype SessionKey = string\ntype Certificate = string\ntype ConfigurationObject = string\ntype PublicKey = string\ntype PrivateKey = string\n\n\n% States\nstate enrollee_init {\n  enrollee_id : EnrolleeID\n}\n\nstate configurator_init {\n  configurator_id : ConfiguratorID\n}\n\nstate enrollee_authenticated {\n  enrollee_id : EnrolleeID\n  session_key : SessionKey\n}\n\nstate configurator_authenticated {\n  configurator_id : ConfiguratorID\n  session_key : SessionKey\n}\n\n\nstate enrollee_config_request {\n  enrollee_id : EnrolleeID\n  session_key : SessionKey\n}\n\nstate configurator_config_response {\n  configurator_id : ConfiguratorID\n  session_key : SessionKey\n  configuration_object : ConfigurationObject\n}\n\n\n% Actions\naction enrollee_auth(e_id : EnrolleeID, c_id : ConfiguratorID) :\n  enrollee_init(e_id) -> enrollee_authenticated(e_id,____())\npre {\n  % Assume authentication is successful.  Replace with actual authentication logic.\n  true\n}\n\naction configurator_auth(c_id : ConfiguratorID, e_id : EnrolleeID) :\n  configurator_init(c_id) -> configurator_authenticated(c_id, ____())\npre {\n  % Assume authentication is successful.  Replace with actual authentication logic.\n  true\n}\n\n\naction enrollee_config_req(e_id : EnrolleeID, c_id : ConfiguratorID, session_key : SessionKey) :\n  enrollee_authenticated(e_id, session_key) -> enrollee_config_request(e_id, session_key)\npre {\n  % Check if session key is valid.\n  true\n}\n\naction configurator_config_resp(c_id : ConfiguratorID, e_id : EnrolleeID, session_key : SessionKey, config_obj : ConfigurationObject) :\n  configurator_authenticated(c_id, session_key) -> configurator_config_response(c_id, session_key, config_obj)\npre {\n  % Check if session key is valid.\n  true\n}\n\n\n\n\n% Protocol definition\nprotocol DPP_Enrollment_Protocol\n  enrollee_auth(e_id, c_id)\n  configurator_auth(c_id, e_id)\n  enrollee_config_req(e_id, c_id, ____())\n  configurator_config_resp(c_id, e_id, ____(), ____())\n\n```"]], "HLPSL-1/drone_to_gss_protocol.hlpsl": [[true, "%%% Drone registration protocol\n\n%%% Protocol description\n%%% This protocol describes the registration of a drone with a ground station.\n%%% The drone sends its registration information to the ground station, which\n%%% verifies the information and responds with an acknowledgement.\n\n%%% Messages\nmessage Rcv(m, k) : m, k\nmessage Send(m, k) : m, k\n\n%%% Variables\nVARIABLE_1, VARIABLE_2, VARIABLE_3, VARIABLE_4, VARIABLE_5, VARIABLE_6, VARIABLE_7: integer\nSTATE_1, STATE_2, STATE_3: integer\nMESSAGE_1, MESSAGE_2, MESSAGE_3, MESSAGE_4, MESSAGE_5, MESSAGE_6, MESSAGE_7, MESSAGE_8, MESSAGE_9, MESSAGE_10, MESSAGE_11, MESSAGE_12, MESSAGE_13, MESSAGE_14, MESSAGE_15, MESSAGE_16, MESSAGE_17, MESSAGE_18, MESSAGE_19, MESSAGE_20, MESSAGE_21, MESSAGE_22, MESSAGE_23, MESSAGE_24, MESSAGE_25, MESSAGE_26, MESSAGE_27, MESSAGE_28, MESSAGE_29, MESSAGE_30, MESSAGE_31, MESSAGE_32, MESSAGE_33 : text\n\n\n%%% Constants\ndr_gss_reg, dr_gss_auth, dr_gss_ack : protocol_id\n%%% other constants as needed (e.g., for specific message types)\n\n\n\n%%% Types\nsymmetric_key : type\nhash_func : type\ntext : type\n%%% other types as needed (e.g., for specific message types)\n\n\n%%% Variables (with types)\nSKcrdr: symmetric_key,\n%%% F is ECC point mutiplication operation\nF, Add, Poly: hash_func,\nG, MKdrj, Rdrj, Pubdrj : text,\nIDdrj, IDgss, IDcr, RTSdrj, Rcr, Rdr, TSdr, Adr: text,\nAdr1, Rgss, RTSgss, TSgss, Bgss, Rgss1: text,\nTSdr1, ACKdrgss: text\n\n\nconst dr_gss_reg, dr_gss_auth, dr_gss_ack, gss_dr_rgss, gss_dr_tsgss : protocol_id\n\n\ninit State := 0\ntransition\n%%%Drone registration phase\n%%%Receive registration message securely from the CR\n1. State = 0 /\\ Rcv({IDdrj.IDgss.H(G).\n                Add(Rdrj'.H(F(Rdrj'.G).F(Rcr'.G).IDgss).Rcr')}_SKcrdr) =|>\nState' := 1"]], "HLPSL-1/Dynamic_group_key_distribution_scheme_with_three-factor_identification_for_IoT_environments.hlpsl": [[true, "SKij, GkiAT: (PARAM_5), (PARAM_10): (PARAM_3), H, (PARAM_12), H2, H4, H5, (PARAM_0), (PARAM_6), (PARAM_8), (PARAM_4), Sub, Add, (PARAM_1), (PARAM_11): hash_func, SND, (PARAM_9): channel (dy))\nplayed_by U def=\n\nlocal State: (VARIABLE_0),\nIDi, IDinew, IDj, Nj, PWi, Bi, Gki, GkiATNew, E, Ej, Xj, V, M, N, N1, Hi, BBi, W, Yij, Tu, Ts, T1, Ti1, T2, Ti2, A, As, B, Bs, ATia, ATib, SKijNew: text, K, Q, Q1, C1, C2, C3: message\n\ninit State := 0\n\ntransition\n\n% Registration procedure\n\n1.  State = 0 /\\ RCV(start) =|>\nState':= 1\n%/\\ Enter IDi, PWi & Bi\n/\\ E' := new()\n/\\ BBi' := H(PWi.Bi)\n/\\ W' :="]], "HLPSL-1/eap-lorawan.hlpsl": [[true, "role SessionEstablishment\n\n\ttype STATE_0, STATE_1, STATE_2, STATE_3, STATE_4, STATE_5, STATE_6, STATE_7, STATE_8, STATE_9, STATE_10, STATE_11, STATE_12\n\n\tvariable State : STATE_0\n\t\n\tmessage SessionEstablishmentRequest : {ED}\n\tmessage EAPLoRaWANDN : {EAPRQST, EAPRESP, EAPSUCCESS}\n\tmessage EAPLoRaWANDN.EAPRQST : {ED}\n\tmessage EAPLoRaWANDN.EAPRESP : {JoinEUI', DevEUI', DevNonce', JoinNonce', MICAAA'}\n\tmessage EAPLoRaWANDN.EAPSUCCESS : {ED}\n\n\t\n\t\n\tinit\n\t\tState  := STATE_0\n\n\ttransition\n\n\t\t0.\tState\t= STATE_0 /\\ RCV(SessionEstablishmentRequest.ED) =|>\n\t\t\tState' := STATE_8 /\\ SND(SessionEstablishmentRequest.ED)\n\n\t\t1.\tState\t= STATE_8 /\\ RCV(EAPLoRaWANDN.EAPRQST.ED) =|>\n\t\t\tState' := STATE_11 /\\ SND(EAPLoRaWANDN.EAPRQST.ED)\n\n\t\t2.\tState\t= STATE_11 /\\ RCV(EAPLoRaWANDN.EAPRESP.JoinEUI'.DevEUI'.DevNonce'.JoinNonce'.MICAAA') =|>\n\t\t\tState' := STATE_12 /\\ SND(EAPLoRaWANDN.EAPRESP.JoinEUI'.DevEUI'.DevNonce'.JoinNonce'.MICAAA')\n\n\t\t3.\tState\t= STATE_12 /\\ RCV(EAPLoRaWANDN.EAPSUCCESS.ED) =|>\n\t\t\tState' := STATE_12 /\\ SND(EAPLoRaWANDN.EAPSUCCESS.ED)\n\nend role"]], "HLPSL-1/EKE2.hlpsl": [[false, "```\n%% PROTOCOL*: EKE2\n%% VARIANT: EKE2 (with mutual authentication)\n%% PURPOSE: Encrypted key exchange with mutual authentication\n%% REFERENCE:\n%% \\url{http://citeseer.ist.psu.edu/bellare00authenticated.html}\n%% MODELER:\n%% \\begin{itemize}\n%%  \\item Haykal Tej, Siemens CT IC 3, 2003\n%%  \\item Sebastian M{\\\"o}dersheim, ETH Z{\\\"u}rich, December 2003\n%% \\end{itemize}\n%%\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%% 1. A -> B : A.{exp(g,X)}_K(A,B)\n%%\n%%     B computes master key MK\n%%     MK = H(A,B,exp(g,X),exp(g,Y),exp(g,XY))\n%%\n%% 2. B -> A : {exp(g,Y)}_K(A,B), H(MK,1)\n%%\n%%      A computes master key MK\n%%\n%% 3. A -> B : H(MK,2)\n%%\n%%      Session key K = H(MK,0)\n%%\n%% \\end{verbatim}\n%%\n%% HLPSL:\n%% \\begin{verbatim}\n%% role Alice {\n%%   init {\n%%     X : integer;\n%%     K_AB : key;\n%%     g : integer;\n%%   }\n%%   send(Bob, A.{exp(g,X)}_K_AB);\n%%   receive(Bob, {exp(g,Y)}_K_AB, H(MK,1));\n%%   send(Bob, H(MK,2));\n%% }\n%%\n%% role Bob {\n%%   init {\n%%     Y : integer;\n%%     K_AB : key;\n%%     g : integer;\n%%   }\n%%   receive(Alice, A.{exp(g,X)}_K_AB);\n%%   X : integer;\n%%   MK = H(Alice,Bob,exp(g,X),exp(g,Y),exp(g,X*Y));\n%%   send(Alice, {exp(g,Y)}_K_AB, H(MK,1));\n%%   receive(Alice, H(MK,2));\n%% }\n%% \\end{verbatim}\n```"]], "HLPSL-1/EVauthenticate.hlpsl": [[true, "role_EV(\n  EV,PARAM_1,SMF                 : PARAM_2,\n  PARAM_0                         : PARAM_5,\n  H,PUF1,PRNG                : hash_func,\n  SND,PARAM_3                    : channel(PARAM_4))\nplayed_by EV def=\n  \n  local\n    State         :int,\n\tN2,N3         :text,\n\tR1,N2M,N3M    :hash(text),\n\tSK            :hash(hash(text).hash(text).text),\n\tZ             :message\n\n  init\n    State := 0\n\n  transition\n  \n  1. State = 0 /\\ RCV(N2') =|>\n     State' := 2 /\\ N2M' := PRNG(N2') /\\ R1':= PUF1(C1) /\\ N3' := new() /\\ SND({R1'.N3'}_N2M')\n\t\t\t\t /\\ Z' := {R1',N3'}"]], "HLPSL-1/GetServAuth.hlpsl": [[true, "(ROLE_0)  (ROLE_2)((PARAM_5):(PARAM_0),W:agent,(PARAM_3):text,(PARAM_2):(PARAM_4),Y:text,SND,(PARAM_1):channel(dy))\nplayed_by C\ndef=\n\tlocal\n\t\tVARIABLE_2:nat,VARIABLE_0:VARIABLE_1,F:hash_func\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ Y' := new() /\\ secret(Y',sec_2,{EVENT_1,EVENT_0}) /\\ N':=new() /\\ secret(N',EVENT_2,{C,EVENT_3}) /\\ SND({C.QR.N'.Y}_Kc)\n\t\t2. State=0 /\\ RCV({C.F(QR.N).Y}_Kc) =|> State':=2 /\\ Y' := new() /\\ secret(Y',EVENT_5,{EVENT_4,W}) /\\ N' := n\n\t\t3. State=1 /\\ RCV(ack) =|> State' := 0\n\t\t4. State=2 /\\ RCV(ack) =|> State' := 0"]], "HLPSL-1/h.530-fix.hlpsl": [[true, "module alice_bob\n\n-- Alice and Bob communicate with a mutual friend (AuF)\n--  (This is a simplified model)\n\n-- Define the protocol messages\ntype Message =\n  | M1 of string * string * string * string * string\n  | M2 of string * string * string * string\n  | M3 of string * string * string * string * string\n  | M4 of string * string * string * string * string * string * string\n  | M5 of string * string * string * string\n  | M6 of string * string * string * string\n\n-- Define the participants\ntype Participant = MT | VGK | AuF\n\n-- Define the channels\ntype Channel = CH1 | CH2 | CH3 | CH4\n\n-- Define the cryptographic operations (simplified)\ntype Crypto =\n  | exp of string * string\n\n-- Define the functions (simplified)\ntype Function =\n  | F of string * string\n\n-- Define the protocol steps (simplified)\n-- The protocol needs to be more precisely defined here based on the\n-- description.  This is a placeholder.\n-- The provided description is incomplete.\n-- The formalization requires a clear definition of the functions F and ZZ.\n-- The meaning of XOR, exp, and the role of the specific strings needs to be clarified.\n\n\n-- Alice's actions\nproc alice_action(msg : Message) : Message =\n  case msg of\n    M1 (MT, VGK, _, CH1, exp(G,X)) -> \n      M2 (MT, F(ZZ, M1), VGK, exp(G,X) XOR exp(G,Y))\n    _ -> error(\"Invalid message for Alice\")\n\n\n-- Bob's actions\nproc bob_action(msg : Message) : Message =\n  case msg of\n    M2 (MT, F(ZZ, M1), VGK, exp(G,X) XOR exp(G,Y)) ->\n      M3 (VGK, MT, F(ZZ, VGK), F(ZZ, exp(G,X) XOR exp(G,Y)), exp(G,X) XOR exp(G,Y))\n    _ -> error(\"Invalid message for Bob\")\n\n\n-- Authentication Facility (AuF) actions\nproc auf_action(msg : Message) : Message =\n  case msg of\n    M3 (VGK, MT, F(ZZ, VGK), F(ZZ, exp(G,X) XOR exp(G,Y)), exp(G,X) XOR exp(G,Y)) ->\n      M4 (VGK, MT, CH1, CH2, exp(G,Y), F(ZZ, exp(G,X) XOR exp(G,Y)), F(ZZ, VGK))\n    _ -> error(\"Invalid message for AuF\")\n\n-- ... (more protocol steps)\n\n-- Define the initial message sent by Alice to the AuF\ninit_msg = M1(MT, VGK, NIL, CH1, exp(G, X))\n\n\n\n-- Example protocol execution (placeholder)\n-- This needs to be expanded based on the actual protocol steps and\n-- the expected outcome.\n-- This is a very simplified example and needs to be significantly expanded.\n\n-- ... (more protocol steps)\n\n\n-- Verification conditions (placeholder)\n\n-- Add verification conditions to check if the protocol is secure.\n-- ... (Verification conditions)"]], "HLPSL-1/hash_n_single.hlpsl": [[true, "%% Lamport, L. (1981). \"Password authentication with insecure communication.\" Commun. ACM 24(11): 770-772. -> hash^1000\n%% \u90ed\u4e39\u9752 (2014). \"OAuth2. 0 \u534f\u8bae\u5f62\u5f0f\u5316\u9a8c\u8bc1: \u4f7f\u7528 AVISPA.\" \u8ba1\u7b97\u673a\u7cfb\u7edf\u5e94\u7528 23(11): 196-202. -> AVISPA\t\n\nrole ROLE_0 user (\n    U,secret : agent,\n    input,output : channel(dy),\n    F          : hash_func,\n    PW      : text)\nplayed_by U def=\n\n  local\n    State       : nat,\n    Nah4      : message\n    \n  init  State := 0\n\n  transition\n\n 1. State  = 0 /\\ RCV(start) =|>\n    State':= 2 /\\ Nah4' := F(F(F(F(PW))))\n               /\\ SND(Nah4'.U)\n\t       /\\ witness(input,S,output,Nah4')\n\t\t\t   \nend role"]], "HLPSL-1/IIOT.hlpsl": [[true, "%IIoT\nnodeU (PARAM_2,PARAM_0: PARAM_4,\n            PARAM_1: hash_func,\n       Qca,PARAM_6,Qu: public_key,\n       Dg,PARAM_5,Kug: symmetric_key,\n         SND,PARAM_3: channel (PARAM_7))\nplayed_by U def=\nlocal\nState: VARIABLE_0,\nIdu,Idg,Certu,Certg,Su,Sg,Ts0,\nTs1,Lt0,Lt1,N5,Au,Ag,H4:text,\nM5: message\ninit State:= 0\ntransition\n1. State = 0 /\\ RCV(start) =|>\n  State':= 1 /\\ N5' := new()\n             /\\ Ag' := {Idg.Certg.Sg.Ts0.Lt0}_Qca\n             /\\ Au' := {Idu.Certu.Su.Ts1.Lt1}_Qca\n             /\\ H4' := Hmac(Kug.Idg.N5.Au)\n             /\\ M5' := {Idg.N5.Au.H4}\n             /\\ SND(PARAM_3,M5)\n2. State = 1 /\\ RCV(PARAM_3,M5') =|>\n  State':= 2 /\\ \n             Ag' := M5'.Ag\n             /\\ Au' := M5'.Au\n             /\\ H4' := M5'.H4\n             /\\ N5' := M5'.N5\n3. State = 2 /\\ Ag = Ag' /\\ Au = Au' /\\ H4 = H4' /\\ N5 = N5' =|>\n  State':= 3"]], "HLPSL-1/AKS.hlpsl": [[false, "```\nhlpsl\n(ROLE_0) (ROLE_1)(\n  OBU1,PARAM_2,PARAM_3                   : PARAM_5,\n  PARAM_1,PID2,P                      : text,\n  PARAM_6,PUF1                : PARAM_0,\n  SND,RCV                  : channel(PARAM_4))\nplayed_by OBU1 def=\n  \n  local\n    State        :int,\n\tA1,C1        :text,\n\tH12,S,Q1,Q2,Q2en,Key,R1         :message,\n\tMAC        :hash(text.text.message),\n\tH21        :hash(text.message.message.text.text.message)\n%%\tH12        :hash(message.text.text.message.message)\n\n  init\n    State := 0\n\n  transition\n  \n  1. State = 0 /\\ RCV(start) =|>\n     State' := 2\n```"]], "HLPSL-1/IKEv2-MAC.hlpsl": [[false, "```\nmodule ike_protocol\n\nimports\n  int.Int\n  string.String\n  set.Set\n  list.List\n  \n  // ... other necessary imports if any ...\n\ntypes\n  CryptoSuite = string\n  Nonce = int\n  DHKey = int\n  Identity = string\n  PSK = string\n  \n  // Define the message types\n  MsgIKEInit = record {\n    nonce : Nonce,\n    dh_half_key : DHKey,\n    crypto_suites_offered : Set[CryptoSuite],\n  }\n  \n  MsgIKEReply = record {\n    nonce : Nonce,\n    dh_half_key : DHKey,\n    crypto_suite_selected : CryptoSuite,\n    identity : Identity, // Added identity field\n    psk_candidate : PSK, // Added psk candidate field for potential pre-shared key\n  }\n  \n  MsgChildSAInit = record {\n    nonce : Nonce,\n    crypto_suites_offered : Set[CryptoSuite],\n  }\n  \n  MsgChildSAReply = record {\n    nonce : Nonce,\n    crypto_suite_selected : CryptoSuite,\n    identity : Identity,\n  }\n  \n  Msg = MsgIKEInit | MsgIKEReply | MsgChildSAInit | MsgChildSAReply\n  \n  // Define the state\n  State = record {\n    my_identity : Identity,\n    my_psk : PSK,\n    my_dh_half_key : DHKey,\n    my_nonce : Nonce,\n    received_msg : Msg,\n    // Add other state variables as needed\n  }\n  \n  // Define the initial state\n  InitialState = record {\n    my_identity : Identity,\n    my_psk : PSK,\n    my_dh_half_key : DHKey,\n    my_nonce : Nonce,\n    // Add other initial state variables\n  }\n\n  // Define the protocol steps. Note the crucial addition of checks for the pre-shared key.\n  // Example step for IKE\\_SA initialization\n  step_ike_init (state : State, msg : MsgIKEInit) : State =\n    let newState = state in\n    if msg.nonce = newState.my_nonce then\n      error(\"Nonce collision detected\")\n    else \n      newState { received_msg = msg }\n  \n  step_ike_reply (state : State, msg : MsgIKEReply) : State =\n    let newState = state in\n    // Check if crypto_suite_selected is valid\n    if msg.crypto_suite_selected == null then\n      error(\"Crypto suite not selected\")\n    else\n      // Check if the received identity matches the expected one.\n      if msg.identity != state.my_identity then\n        error(\"Identity mismatch\")\n      else\n        newState { received_msg = msg }\n  \n  // ... other protocol steps for IKE_SA_AUTH and CHILD_SA ...\n\n  // Example of a verification rule\n  rule_ike_auth (state : State, msg : MsgIKEReply) : bool =\n      // Verification rule to check if the IKE_Reply message is valid.\n      // Add more specific checks based on the protocol specification.\n      msg.identity == state.my_identity\n```\n```hlpsl\n```"]], "HLPSL-1/InitialAuth.hlpsl": [[true, "role_Newnode(Newnode:int,ClusterAdmin:int,ClusterName:text,Knc:int,ClusterId:int,SND,RCV:channel(dy))\nplayed_by Newnode\ndef=\n\tlocal\n\t\tState:nat,Knc_Auth:text,Solution:text,Success:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ SND({AuthRequest}_Knc)\n\t\t2. State=1 /\\ RCV({Challenge'.T'}_Knc) =|> State':=2 /\\ Solution':=new() /\\ SND({Solution'.inv(Kn)}_Knc)\n\t\t3. State=2 /\\ RCV({Uniqid'.Success'}_inv(Kn)) =|> State':=3 /\\ Success':=\"Success\"\n\t\t4. State=3 /\\ RCV(stop) =|> State':=0"]], "HLPSL-1/IoT-HAN.hlpsl": [[false, "```\n%Formal Verification of RLAS\nrole client(ROLE_1) (U,V: PARAM_0,\n\t   hash_func: PARAM_2,\n\t    Qca: PARAM_5,\n  Key1,Key2,Key3: PARAM_3,\n       SND, RCV: channel (dy))\t\nplayed_by U def= \nlocal \nState\t\t\t\t   :VARIABLE_0,\nIdu,Certu,Lt,Idca,Nv,Certv,Nu,Idv  :text, \nToken1,Token2,Z1,Z2\t           :message\n\ninit State:= 0\ntransition\n1. State = 0  /\\ RCV(start)  =|>\n  State':= 1  /\\ Nu' := new()\n              /\\ Key1' := xor(Nu,xor(Idu,Idca))\n              /\\ Token1' := Hash(Certu.Lt.Nu.Idu.Idca)\n\t      /\\ Z1' := {Certu.Lt.Nu.Idu.Idca}_Ks1\n              /\\ SND(T\n```"]], "HLPSL-1/ISO2.hlpsl": [[false, "```hlpsl\n%% PROTOCOL*: ISO2 Public Key Unilateral Authentication Protocol\n%% VARIANT: two-pass unilateral authentication\n%% PURPOSE: Authentication of a client to a server. This protocol models a situation\n%% in which the server wants to verify the client identity and starts the session.\n%% The client answers by sending his digital signature.\n%% REFERENCE:\n%% \\begin{itemize}\n%% \\item \\cite{clark97survey,ISO-IEC-9798-3}\n%% \\end{itemize}\n%% MODELER:\n%% \\begin{itemize}\n%% \\item Haykal Tej, Siemens CT IC 3, 2003 and\n%% \\item Luca Compagna et al, AI-Lab DIST University of Genova, November 2004\n%% \\end{itemize}\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%% 1. B -> A : Rb, Text1\n%% 2. A -> B : Ra, Sig(Text1, Ka)\n%% \\end{verbatim}\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%"]], "HLPSL-1/ISO4.hlpsl": [[true, "%% PROTOCOL*: ISO4 Public Key Mutual Authentication Protocol\n%% VARIANT: three-pass mutual authentication\n%% PURPOSE: Two parties authenticate each other. Aim of the Mutual authentication\n%% is to make sure to each of the parties of the other's identity. In this protocol\n%% a confirmation of the successful authentication is sent by the initiator.\n%% REFERENCE:\n%% \\begin{itemize}\n%% \\item \\cite{clark97survey, ISO-IEC-9798-3}\n%% \\end{itemize}\n%% MODELER: \n%% \\begin{itemize}\n%% \\item Haykal Tej, Siemens CT IC 3, 2003 and\n%% \\item Luca Compagna et al, AI-Lab DIST University of Genova, November 2004\n%% \\end{itemize}\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%% 1. B -> A  \n%% \t(N_B, P_B, H(N_B, P_B))\n%% 2. A -> B\n%% \t(N_A, P_A, H(N_A, P_A))\n%% 3. A -> B\n%% \t(H(N_B, P_B, N_A, P_A))\n%% \\end{verbatim}\n%%\n%% CONSTANTS:\n%%\n%%\n%% VARIABLES:\n%%\n%%\tN_A, N_B : Nonce\n%%\tP_A, P_B : PublicKey\n%%\n%% MESSAGES:\n%%\n%%\tMsg1 = (N_B, P_B, H(N_B, P_B))\n%%\tMsg2 = (N_A, P_A, H(N_A, P_A))\n%%\tMsg3 = (H(N_B, P_B, N_A, P_A))\n%%\n%% INIT:\n%% \tA_init() -> B_init()\n%%\n%%\tA_init() {\n%%\t  N_A = fresh();\n%%\t  P_A = A_PK();\n%%\t  H_A = H(N_A, P_A);\n%%\t  send(B, Msg2 = (N_A, P_A, H_A));\n%%\t}\n%%\n%%\tB_init() {\n%%\t  N_B = fresh();\n%%\t  P_B = B_PK();\n%%\t  H_B = H(N_B, P_B);\n%%\t  send(A, Msg1 = (N_B, P_B, H_B));\n%%\t}\n%%\n%% TRANSITIONS:\n%%\n%%\trecv(A, Msg1 = (N_B, P_B, H_B)) {\n%%\t  H_B_check = H(N_B, P_B);\n%%\t  if (H_B_check == H_B) {\n%%\t    N_A = fresh();\n%%\t    P_A = A_PK();\n%%\t    H_A = H(N_A, P_A);\n%%\t    send(B, Msg2 = (N_A, P_A, H_A));\n%%\t    H_AB = H(N_B, P_B, N_A, P_A);\n%%\t    send(B, Msg3 = H_AB);\n%%\t  }\n%%\t}\n%%\n%%\trecv(B, Msg2 = (N_A, P_A, H_A)) {\n%%\t  H_A_check = H(N_A, P_A);\n%%\t  if (H_A_check == H_A) {\n%%\t    H_AB = H(N_B, P_B, N_A, P_A);\n%%\t    recv(A, Msg3 = H_AB);\n%%\t  }\n%%\t}\n%%\n%%\n%%\n%%"]], "HLPSL-1/Ju(2024)protocol.hlpsl": [[true, "role_U(U:agent,D:agent,Key_set_CS_U:(symmetric_key) set,SND,RCV:channel(dy))\nplayed_by U\ndef=\n\tlocal\n\t\tn:nat,IDuj:agent,IDcsk:agent,PIDuj:agent,x:agent,y:nat,M3:text,M2:text,M1:text,PWuj:text,V3:text,V1:text,Key_1:symmetric_key,RPWuj,CERTuj,ECujj,PIDdri,TIDuj,TIDdri,SK:text\n\tinit\n\t\tState :=\n\t\t\n\t\tIDuj=U;\n\t\tPIDuj=U;\n\t\tPIDdri=D;\n\t\tTIDuj=0;\n\t\tTIDdri=0;\n\t\t\n\t\tKey_1=random_symmetric_key;\n\t\tSK=random_symmetric_key;\n\t\t\n\t\tPWuj=random_text;\n\t\tV3=random_text;\n\t\tV1=random_text;"]], "HLPSL-1/Kerberos.hlpsl": [[true, "role ROLE_1(G, A, S, C  : participant,\n                 Snd, Rcv    : channel (byte),\n                 K_AG, K_GS  : symmetric_key)\nplayed_by G\ndef=\n\n  local X                                 : nat,\n        K_CG                               : symmetric_key,\n        K_CS                               : symmetric_key,\n        Lifetime_2, Tstart, Texpire, T, N2 : text,\n        Tstart2, Texpire2                  : text\n\n  const ID_1, ID_2 : protocol_id,\n        sec_g_K_CG, sec_g_K_CS : protocol_id\n\n  init  St := 0\n\n  transition\n\n   1. St = 0  /\\ \n       G!S(Tstart, Texpire, N2)  -> St := 1\n   2. St = 1  /\\\n       S!G(Tstart2, Texpire2) -> St := 2\n   3. St = 2  /\\\n       G!C(Tstart, Texpire) -> St := 3"]], "HLPSL-1/KEY_EXCHANGE.hlpsl": [[false, "```\n%% key exchange\n\nrole role_1(SM:agent,DS:agent,Sigmau:agent,PKs:agent,H:hash_func,T1:text,RCV:channel(dy))\nplayed_by SM\ndef=\n\tlocal\n\t\tIDu:nat,\n\t\tCu:text,\n\t\tAa:text,\n\t\tBu:text,\n\t\tT1:text,\n\t\tI1:message,\n\t\tS1:message\n\t\t\n\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ S1' := H(IDu.Aa.Cu) /\\ I1' := xor(IDu,(xor(H(Aa),Aa))) /\\ SND({Bu.Aa.S1'.Cu}_PKs,I1',T1)\nend role\n\nrole role_DS(SM:agent,DS:agent,Sigmau:agent,PKs:agent,H:hash_func,T1:text,SND:channel(dy),RCV:channel(dy))\nplayed_by SM\ndef=\n\n```"]], "HLPSL-1/L-3.hlpsl": [[false, "```\nrole alice ( \n\tsecret(PARAM_6),B:secret(PARAM_11),\n\tYa,Yb:public_key,\n\tPARAM_2:PARAM_0,\n\tPARAM_13,M1,Q1:PARAM_14,\n\tPARAM_7,M2,PARAM_10:nat,\n\tPARAM_3,PARAM_12:text,\n\tPARAM_8,PARAM_1,CERT,MUL,PI,PARAM_9,HIG,MAC: PARAM_4,\n\tSND,RCV:channel(PARAM_5)\n\t)\nplayed_by A def=\nlocal \n\tIb,K_a,K_b:variable, \n\tKa,Kb,CertificateB,Qba,Rba,Tba,TagB,TagA,Kba,Mba,CertificateA,H4:message,\n\tState : nat\ninit State := 0\ntransition\n\n1. State = 0 /\\ RCV(start)\n=|> State' := 1 /\\ \nK_a' := new() /\\\nKa' := MUL(K_a'.P2) /\\\nCertificateA' := CERT(Ya,K_a) /\\\nSND(start,CertificateA') /\\\n```"]], "HLPSL-1/lipkey-spkm-known-initiator.hlpsl": [[true, "MODULE ProtocolExample;\n\nIMPORT Common;\n\nTYPE\n  G = Common.Group;\n  X = Common.Data;\n  Y = Common.Data;\n  Na = Common.Data;\n  Nb = Common.Data;\n  Ka = Common.Key;\n  Ks = Common.Key;\n  login = Common.Data;\n  pwd = Common.Data;\n\nVAR\n  A, S: Common.Principal;\n\n  %% Message 1: A -> S:  A.S.Na.exp(G,X).{A.S.Na.exp(G,X)}_inv(Ka)\n  msg1_A_to_S:\n    (A, S, Na, X, Ka) :\n    (Common.Principal, Common.Principal, Common.Data, Common.Data, Common.Key);\n\n\n  %% Message 2: S -> A:  A.S.Na.Nb.exp(G,Y).{A.S.Na.Nb.exp(G,Y)}_inv(Ks)\n  msg2_S_to_A:\n    (A, S, Na, Nb, Y, Ks) :\n    (Common.Principal, Common.Principal, Common.Data, Common.Data, Common.Data, Common.Key);\n\n\n  %% Message 3: A -> S: {login.pwd}_K where K= exp(exp(G,Y),X) = exp(exp(G,X),Y)\n  msg3_A_to_S:\n    (A, S, login, pwd, X, Y) :\n    (Common.Principal, Common.Principal, Common.Data, Common.Data, Common.Data, Common.Data);\n\n  %%  Initialisation\n  init:\n    (A, S) :\n    (Common.Principal, Common.Principal);\n\n  %%  Rules\n  rule1:\n    init(A, S) ->\n      msg1_A_to_S(A, S, Na, X, Ka);\n\n  rule2:\n    msg1_A_to_S(A, S, Na, X, Ka) ->\n      msg2_S_to_A(A, S, Na, Nb, Y, Ks);\n\n  rule3:\n    msg2_S_to_A(A, S, Na, Nb, Y, Ks) ->\n      msg3_A_to_S(A, S, login, pwd, X, Y);\n\n\n  %%  Assumptions (Example)\n  assumptions:\n    (A,S,X,Y,Na,Nb,Ka,Ks,login,pwd) :\n    (Common.Principal, Common.Principal, Common.Data, Common.Data, Common.Data, Common.Data, Common.Key, Common.Key, Common.Data, Common.Data);\n\n  %%  Security goal (Example -  replace with your actual goal)\n  goal:\n    init(A, S)\n    & msg3_A_to_S(A, S, login, pwd, X, Y);\n\n\n\nEND ProtocolExample."]], "HLPSL-1/Anonymous_E2E_authenticated_key_exchange_scheme.hlpsl": [[true, "module RegistrationPhase\n\n  type user (U, P_ID, F: text, Kus, P_key, Kas: text, Ks: text, H, ID: nat, S_Id, C_Id: channel (dy))\n\n  type nat = 0..100\n\n  played_by U def=\n\n  local  SIDim: nat,\n       SPWim, SAim, Ri,  Umi, Bmi, Tim, Nfp, Nfp1, Qp, Cim1, G, B1mi, Aim, Wmi, Ymi, Dm, Kmi, B2mi, Dmi, Rim, Uim, Ynj, IDsm, Cim2, Kua, Xm, Bpm, A: text\n\n  init State := 0\n\n  transition\n\n% Registration phase\n\n\t1.  State = 0 /\\ RCV(start) =|>\n\t\t   State' := 1\n\t\t   %/\\ Enter SIDim to smart card\n\t\t   /\\ SPWim' := new()\n\t\t   /\\ SAim' := xor(H(SPWim'),H(Ri.SIDim))\n\t\t   /\\ Umi' := U\n\t\t   /\\ Bmi' := B\n\t\t   /\\ Tim' := T\n\t\t   /\\ Nfp' := Nfp\n\t\t   /\\ Nfp1' := Nfp1\n\t\t   /\\ Qp' := Qp\n\t\t   /\\ Cim1' := Cim1\n\t\t   /\\ G' := G\n\t\t   /\\ B1mi' := B1mi\n\t\t   /\\ Aim' := Aim\n\t\t   /\\ Wmi' := Wmi\n\t\t   /\\ Ymi' := Ymi\n\t\t   /\\ Dm' := Dm\n\t\t   /\\ Kmi' := Kmi\n\t\t   /\\ B2mi' := B2mi\n\t\t   /\\ Dmi' := Dmi\n\t\t   /\\ Rim' := Rim\n\t\t   /\\ Uim' := Uim\n\t\t   /\\ Ynj' := Ynj\n\t\t   /\\ IDsm' := IDsm\n\t\t   /\\ Cim2' := Cim2\n\t\t   /\\ Kua' := Kua\n\t\t   /\\ Xm' := Xm\n\t\t   /\\ Bpm' := Bpm\n\t\t   /\\ A' := A"]], "HLPSL-1/liteCrypto.hlpsl": [[true, "%%% 1. A -> B : PID, S\n%%% 2. A -> B : M1, MAC, Sig\n%%% 3. B -> A : A, B, SAC\n\nrole Role_A(A: agent, B: agent, Pubkey: public_key, hash_func: hash_func, hash_func2: hash_func, nonce: nonce, RCV: channel(Msg))\nplayed_by A\ndef=\n\tlocal\n\t\tState:int,\n\t\tChe,Ts,Ts2:text,\n\t\tRes,S,PID,M1,MAC1,SIG1,SAC,Key:message\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|>\n\t\tState':=2 /\\ Che':=new() /\\ Res':=hash_func(Che') /\\ S':=hash_func2(Res') /\\ PID':=hash_func(A.S')\n\t\t/\\ SND({A.B.PID'.S'}_Pubkey)\n\t\t/\\ Ts':=new() /\\ M1':={A.B.PID'.Ts'}_Pubkey /\\ MAC1':=hash_func(M1') /\\ SIG1':={hash_func2(M1').hash_func(S'.PID')}\n\t\t/\\ Ts2':=new()\n\n\nrole Role_B(A: agent, B: agent, Pubkey: public_key, hash_func: hash_func, hash_func2: hash_func, nonce: nonce, RCV: channel(Msg))\nplayed_by B\ndef=\n\tlocal\n\t\tState:int,\n\t\tChe,Ts,Ts2:text,\n\t\tRes,S,PID,M1,MAC1,SIG1,SAC,Key:message\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV({A.B.PID.S}_Pubkey) =|>\n\t\tState':=2 /\\ Che':=new() /\\ Res':=hash_func(Che') /\\ S':=hash_func2(Res') /\\ PID':=hash_func(A.S')\n\t\t/\\ Ts':=new() /\\ M1':={A.B.PID'.Ts'}_Pubkey /\\ MAC1':=hash_func(M1') /\\ SIG1':={hash_func2(M1').hash_func(S'.PID')}\n\t\t/\\ SND({A.B.A.PID.S.SAC}_Pubkey)"]], "HLPSL-1/LPD-IMSR.hlpsl": [[false, "```\n%% PROTOCOL*: LPD IMSR\n%% VARIANT: IMSR: Improved Modulo Square Root\n%% LPD (Low-Powered Devices) Improved MSR (Modulo Square Root) protocol\n%% is a key establishment protocol for secure mobile communications. It\n%% has been designed by Beller, Chang, and Yacobi in 1990s as an\n%% improvement of MSR. Namely IMSR overcomes a major weakness of MSR by\n%% including a certificate of the base station in the first\n%% message. Apart from this feature it is identical to the basic MSR\n%% protocol, and therefore does not address the problem of replay\n%% \n%% PURPOSE: \n%% Key establishment protocol for secure mobile communications.\n%%   \n%% REFERENCE:\n%% \\begin{itemize}\n%% \\item Beller, Chang, and Yacobi.  Improved Modulo Square Root Protocol.\n%% \\end{itemize}\n%%\n%%\n%% MESSAGES:\n%% \\begin{itemize}\n%% \\item m1: (A -> B) {a, Acert_B}\n%% \\item m2: (B -> A) {b}\n%% \\item m3: (A -> B) {a, b}\n%% \\end{itemize}\n%%\n%%\n%% SECURITY GOALS:\n%% \\begin{itemize}\n%% \\item Confidentiality\n%% \\item Authenticity\n%% \\end{itemize}\n%%\n%%\n%%\n%%\n%% ASSUMPTIONS:\n%% \\begin{itemize}\n%% \\item A and B are honest participants.\n%% \\item A and B have valid certificates.\n%% \\item A and B have access to the shared secret key.\n%% \\end{itemize}\n%%\n%%\n%%\n%% VARIABLES:\n%% \\begin{itemize}\n%% \\item a, b: random numbers\n%% \\item Acert_B: certificate of the base station B\n%% \\end{itemize}\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%"]], "HLPSL-1/main.hlpsl": [[true, "init\n    State := 0\n\ntransition\n\n%%% Controller Registration\n1. State = 0 /\\ MESSAGE_30(start) =|> State':= 1 /\\\nPRVRa' := new() /\\ PUBRa' := F(PRVRa'.G) /\\\nPRVCon' := new() /\\ PUBCon' := F(PRVCon'.G) /\\\nCERTCon' := Add(PRVCon'.H(IDCon.IDClus.PUBCon'.PUBRa').PRVRa') /\\\nMESSAGE_31({IDCon.PRVCon'.CERTCon'}_Skcon) /\\\nEVENT_1({PRVRa'}, EVENT_0, RA) /\\\nEVENT_3({PRVCon'}, prvcon, {RA, EVENT_2}) /\\\n\n%%% Switch Registration\n2. State = 1 /\\ MESSAGE_32(start) =|> State':= 2 /\\\n\n%%% Controller Registration Confirmation\n3. State = 2 /\\ MESSAGE_33(start) =|> State':= 3 /\\\n\n%%% Controller Registered\n4. State = 3 /\\ MESSAGE_34(start) =|> State':= 4 /\\"]], "HLPSL-1/migration.hlpsl": [[true, "role_PreviousParent(PreviousParent:agent,Kbp:symmetric_key,Kbc:symmetric_key,Idrequest:text,UniqidI:int,SND,RCV:channel(dy))\nplayed_by PreviousParent\ndef=\n\tlocal\n\t\tState:int,Uniqid:int,Idrequest:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t4. State=0 /\\ RCV({Uniqid'.Idrequest'}_Kbp) =|> State':=1 /\\ SND({UniqidI}_Kbp)\nend \n\nrole_ParentB(ParentB:agent,ReqId:int,Blockchain:agent,Knb:symmetric_key,Uniqid:int,Kbc:symmetric_key,\nSND,RCV:channel(dy))\nplayed_by ParentB\ndef=\n\tlocal\n\t\tState:int,Uniqid:int,Idrequest:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV({Uniqid'.Idrequest'}_Kbp) =|> State':=1 /\\ SND({UniqidI}_Kbp)\nend"]], "HLPSL-1/NSPK-fix.hlpsl": [[true, "role alice (Na: nonce, Nb: nonce, A: identity, B: identity,\n            Ka: public_key, Kb: public_key,      \n            SND, RCV: channel (dy)) \nplayed_by A def=\n\n  local Na, Nb, Ka, Kb, A, B;\n  \n  SND(1, {Na.A}_Kb, B);\n  RCV(2, {Na.Nb.B}_Ka, B);\n  SND(3, {Nb}_Kb, B);"]], "HLPSL-1/optimised_protocol.hlpsl": [[true, "%%% Key exchange protocol, secured for secrecy, mutual authentication of A and B (optimized)\n%%% 1. A -> T : {B,Kab}_Kat\n%%% 2. T -> B : {A,Kab}_Kbt\n%%% 3. B -> A : {B,Nb}_Kab\n%%% 4. A -> B : {Nb}_Kab\n\nrole A(Kat:symmetric_key,B:agent,T:agent,SND,RCV:channel(start))\nplayed_by A\ndef=\n\tlocal\n\t\tState:integer,\n                Na,Nb:text,\n                Kab:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> \n                   State':=1 /\\ Na':=new() /\\ Kab':=new() /\\ SND({B,Kab}_Kat) /\\ secret(Kab)\n\t\t2. State=1 /\\ RCV({A,Kab}_Kbt) =|> \n                   State':=2 /\\ SND({B,new()}_Kab) /\\ secret(Kab)\n\t\t3. State=2 /\\ RCV({B,Nb}_Kab) =|> \n                   State':=3 /\\ SND({Nb}_Kab) /\\ secret(Kab)\n\nrole B(Kbt:symmetric_key,A:agent,T:agent,SND,RCV:channel(start))\nplayed_by B\ndef=\n\tlocal\n\t\tState:integer,\n                Na,Nb:text,\n                Kab:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> \n                   State':=1 /\\ Nb':=new() /\\ Kab':=new()\n\t\t2. State=1 /\\ RCV({A,Kab}_Kbt) =|> \n                   State':=2 /\\ SND({B,Nb}_Kab)\n\t\t3. State=2 /\\ RCV({Nb}_Kab) =|> \n                   State':=3"]], "HLPSL-1/PBK-fix-weak-auth.hlpsl": [[false, "```\n%% PROTOCOL*: PBK: Purpose Built Keys Framework\n%% VARIANT: fixed version with weak authentication\n%% PURPOSE: Sender invariance (authentication assuming that the first message is not tampered with)\n%% REFERENCE: \\url{http://www.ietf.org/internet-drafts/draft-bradner-pbk-frame-06.txt}\n%% MODELER: \n%% \\begin{itemize}\n%% \\item Daniel Plasto for Siemens CT IC 3, 2004\n%% \\item Sebastian M\\\"odersheim, ETH Z\\\"urich\n%% \\end{itemize}\n%%\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%%  A -> B: A, PK_A, hash(PK_A)\n%%  A -> B: {***tag1***,Msg}inv(PK_A), hash(PK_A)\n%%  B -> A: Nonce\n%%  A -> B: {***tag2***,Nonce}inv(PK_A)\n%% \\end{verbatim}\n%%\n%% PROBLEMS: 1\n%% ATTACKS: None\n%% NOT\n\n%% HLPSL code\nmodule PBK;\n\nmessage A_to_B_1 = (A, PK_A, hash(PK_A));\nmessage A_to_B_2 = (tag1, Msg, inv(PK_A), hash(PK_A));\nmessage B_to_A_1 = (Nonce);\nmessage A_to_B_3 = (tag2, Nonce, inv(PK_A));\n\nrole Alice {\n  send(A_to_B_1);\n  send(A_to_B_2);\n  recv(B_to_A_1);\n  send(A_to_B_3);\n}\n\nrole Bob {\n  recv(A_to_B_1);\n  recv(A_to_B_2);\n  send(B_to_A_1);\n  recv(A_to_B_3);\n}\n\n```"]], "HLPSL-1/PMAP_D2D.hlpsl": [[false, "```houzhui\n%%% PMAP_D2D, a privacy-preserving mutual authentication and key agreement protocol for internet of drones \n%%% between drone and drone\n%%% 1. A -> Z : {A,Z,Na}_CRPa, {A,Z,Na,B}_CRPa\n%%% 2. Z -> A : {A,Z,B,Na,Nz}_CRPa\n%%% 3. A -> Z : {A,Z,B,Nz,Na2}_CRPa, {A,Z,B,Nz,Na2,Ra}_CRPa\n%%% 4. Z -> B : {B,Z,Nz2}_CRPb, {B,Z,Nz2,Na2}_CRPb, {B,Z,Nz2,Na2,A}_CRPb\n%%% 5. B -> Z : {B,Z,A,Nz2,Nb}_CRPb, {B,Z,A,Nz2,Nb,Rb}_CRPb\n%%% 6. Z -> A : {A,Z,B,Na2,Nb}_CRPa\n\nrole_A(A:agent,B:agent,Z:agent,k_A:symmetric_key,Na:non_ce,Nz:non_ce,RCV:channel(k_A))\nplayed_by A\ndef=\n\tlocal\n\t\tNa,\n\t\tNz,\n\t\tNa2,\n\t\tRa,\n\t\tNb,\n\t\tRb;\n\t\t\n\treceive(A,Z,{A,Z,Na}_k_A);\n\treceive(A,Z,{A,Z,Na,B}_k_A);\n\tsend(A,Z,{A,Z,B,Nz,Na2}_k_A);\n\tsend(A,Z,{A,Z,B,Nz,Na2,Ra}_k_A);\n\treceive(A,Z,{A,Z,B,Na2,Nb}_k_A);\n\t\n```"]], "HLPSL-1/practice3.hlpsl": [[false, "```\n%%%ESPECIFICATIONS OF THE PROBLEM%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%Agents:A Client,B Service Delivery Server, S Authentication Server%%%%%\n\n%Objectives/Goals:establishing a session key between A and B,mutual authentication between A and B\n\n%Assumptions and Restrictions:A has a symmetric key shared with S,B has a symmetric key shared with S,only S can generate session keys,do not use timestamps,efficiency in the messages structure and their number\n\n\n%role of cliente interpreted by alice%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nrole alice(A,Ksa,Na\t:agent,\n\t   Ka \t\t:key,\n\t   SND_SA, SND_AB, SND_BA, RCV_BA\n\n\t   :output,\n\t   SKAB\t\t:key\n\t   )\n```"]], "HLPSL-1/Project1Protocol.hlpsl": [[false, "```\n% 1. A -> B: A\n% 2. B -> A: {A,Nb'})_Kbs\n% 3. A -> S: A,B,Na,{A,Nb'}_Kbs\n% 4. S -> A: {Na,Kab,B,{Kab,A,Nb'}Kbs}Kas\n% 5. A -> B: {Kab,A,Nb'}_Kbs, {Na',A}_Kab\n% 6. B -> A: {Nb'.B}_Kab\n\n(ROLE_1) A (ROLE_0) B (PARAM_1) A (PARAM_3) B (PARAM_2) Kab (PARAM_0) Nb (VARIABLE_0) state (STATE_0) 0 (MESSAGE_7) {A,Nb'}_Kbs (MESSAGE_8) Send(B,{A,Nb'}_Kbs) (STATE_1) 1 (MESSAGE_9) {Na,Kab,B,{Kab,A,Nb'}Kbs}Kas (MESSAGE_10) Send(A,{Na,Kab,B,{Kab,A,Nb'}Kbs}Kas) (MESSAGE_11) {Kab,A,Nb'}_Kbs (MESSAGE_12) Send(B,{Kab,A,Nb'}_Kbs) (MESSAGE_13) {Na',A}_Kab (MESSAGE_14) Send(B,{Na',A}_Kab) (MESSAGE_15) {Nb'.B}_Kab (MESSAGE_16) Send(A,{Nb'.B}_Kab)\n\n\nplayed_by A def=     \n\n    local State: integer,\n          Na,Nb: text,\n          K_AB, K_BS:symmetric_key\n\n    init State:=0\n\n    transition\n        1. State=0 /\\ Rcv({A,Nb'})_Kbs\n            =|> State':=1 /\\ Send(B,{A,Nb'}_Kbs)\n\n        2. State=1 /\\ Rcv({Na,Kab,B,{Kab,A,Nb'}Kbs}Kas)\n            =|> State':=2 /\\ Send(A,{Na,Kab,B,{Kab,A,Nb'}Kbs}Kas)\n\n        3. State=2 /\\ Rcv({Kab,A,Nb'}_Kbs)\n            =|> State':=3 /\\ Send(B,{Kab,A,Nb'}_Kbs)\n\n        4. State=3 /\\ Rcv({Na',A}_Kab)\n            =|> State':=4 /\\ Send(B,{Na',A}_Kab)\n\n        5. State=4 /\\ Rcv({Nb'.B}_Kab)\n            =|> State':=0 /\\ Send(A,{Nb'.B}_Kab)\n\n```"]], "HLPSL-1/An_Anonymous_Key_Distribution_Scheme_for_Group_Healthcare_Services_in_5G-Enabled_Multi-Server_Environments.hlpsl": [[true, "MODULE example\n\nIMPORTING\n  Common,\n  Hash,\n  Crypto,\n  Channel\n\n\nROLE_0\nROLE_1\n\nPARAM_0 : NAT\nPARAM_1 : NAT\nPARAM_2 : NAT\nPARAM_3 : NAT\nPARAM_4 : NAT\nPARAM_5 : NAT\nPARAM_6 : NAT\nPARAM_7 : NAT\nPARAM_8 : NAT\n\n\nINIT_STATE_0 = 0\nINIT_STATE_1 = 0\n\n\nSTATE_0 = 0\nSTATE_1 = 1\nSTATE_2 = 0\nSTATE_3 = 2\n\n// Define the message types\nMESSAGE_start : message\nMESSAGE_IDi_PWi_Bi : message\nMESSAGE_IDinew_IDj_Nj_PWi_Bi_Ck0 : message\nMESSAGE_E_Ej_Xj_V_N_N1_Hi_BBi_W_Yij_Tu_Ts_T1_T2_A_As_B_Bs_SKijNew : message\nMESSAGE_finish : message\n\n\n\n// Define the variables\nIDi, IDinew, IDj, Nj, PWi, Bi, Ck0, E, Ej, Xj, V, N, N1, Hi, BBi, W, Yij, Tu, Ts, T1, T2, A, As, B, Bs, SKijNew: text\nK, Q, C1, C2, C3: message\n\n\n\n// Define the hash function\nhash_func : (text) -> text\n\n// Define the channel\nchannel : (message) -> BOOL\n\n\n// Define the protocol\nplayed_by U def=\nlocal State: nat,\nIDi, IDinew, IDj, Nj, PWi, Bi, Ck0, E, Ej, Xj, V, N, N1, Hi, BBi, W, Yij, Tu, Ts, T1, T2, A, As, B, Bs, SKijNew: text, K, Q, C1, C2, C3: message\ninit State := 0\ntransition\n% Registration phase\n1.  State = 0 /\\ RCV(start) =|>\nState' := 1\n%/\\ Enter IDi, PWi & Bi\n/\\ E' := new() /\\ BBi' := H(PWi.Bi) /\\ W' := H(H(PWi.E').xor(h(xor(IDi,IDj)),E'))\n/\\ SND({ID"]], "HLPSL-1/Projet.hlpsl": [[true, "module BadgeAuto\n\n// Types\ntype Client = {id : int}\ntype Server = {id : int}\ntype Badge = {id : int}\ntype PublicKey = {id : int}\ntype SymmetricKey = {id : int}\ntype SmartphoneId = {id : int}\ntype Money = int\n\n// Constants\nconst Bonjour = 1\nconst Ns = 2\nconst Nc = 3\nconst ClefSession = 4\nconst IDSmartPhone = 5\nconst Ack = 6\nconst End = 7\n\n// Variables\nvar pkc : PublicKey\nvar pks : PublicKey\nvar soldeClient : Money\nvar clefSession : SymmetricKey\nvar idSmartphone : SmartphoneId\nvar ns : Server\nvar nc : Client\n\n\n// Protocol\ninit {\n  pkc = ____()___; // Assign a value to pkc, e.g., pkc = {id : 1}\n  pks = ____()___; // Assign a value to pks, e.g., pks = {id : 2}\n  soldeClient = 0;\n  clefSession = ____()___; // Assign a value to clefSession, e.g., clefSession = {id : 3}\n  idSmartphone = ____()___; // Assign a value to idSmartphone, e.g., idSmartphone = {id : 4}\n  ns = ____()___; // Assign a value to ns, e.g., ns = {id : 5}\n  nc = ____()___; // Assign a value to nc, e.g., nc = {id : 6}\n}\n\n// 1. Client -> Server : {Bonjour.C}_PKs\nevent BonjourC_PKs {\n  sender = nc;\n  receiver = ns;\n  message = Bonjour;\n  key = pks;\n}\n\n// 2. Server -> Client : {Ns.Server}_PKc\nevent NsServer_PKc {\n  sender = ns;\n  receiver = nc;\n  message = Ns;\n  key = pkc;\n}\n\n// 3. Client -> Server : {Nc.Ns}_PKs\nevent NcNs_PKs {\n  sender = nc;\n  receiver = ns;\n  message = Nc;\n  key = pks;\n}\n\n// 4. Server -> Client : {Nc.ClefSession}_PKc\nevent NcClefSession_PKc {\n  sender = ns;\n  receiver = nc;\n  message = ClefSession;\n  key = pkc;\n}\n\n// 5. Client -> Server : {IDSmartPhone}_ClefSession\nevent IDSmartPhone_ClefSession {\n  sender = nc;\n  receiver = ns;\n  message = IDSmartPhone;\n  key = clefSession;\n}\n\n// (Server <--> BDD : get solde(IDSmpartphone)\n// if soldeClient > 0 ? ack\n// else\n// refuse)\nrule CheckBalance {\n  if (idSmartphone = ____()___) { // Check if idSmartphone is valid (e.g., in DB)\n      soldeClient = ____()___; // Get balance from DB\n      if soldeClient > 0 then\n\t      ____()___; // Send Ack\n      else\n\t      ____()___; // Send Refuse\n  }\n}\n\n// 6. Server -> Client : {Ack}_ClefSession\nevent Ack_ClefSession {\n  sender = ns;\n  receiver = nc;\n  message = Ack;\n  key = clefSession;\n}\n\n// 7. Client -> Server : {End}_ClefSession\nevent End_ClefSession {\n  sender = nc;\n  receiver = ns;\n  message = End;\n  key = clefSession;\n}"]], "HLPSL-1/protocol.hlpsl": [[true, "role drone1(CR, Key1, DR2: agent, EccMul: hash_func, Snd, Key2: channel(CR))\n\n    played_by DR1\n    def=\n    local State: int,\n        Key1: symmetric_key,\n        EccMul, Add, Poly: hash_func,\n        G, MKdrj, Rj1, Rdrj, TSj1, IDdrj1, IDdrj2, IDgss, IDcr, RTSdrj, Rcr, Aj1, AAj1, Rdr, Msgd2d1: text,\n        Rj2, TSj2, TSj3, Bj2, ACKj1j2, Msgd2d3: text\n    const dr1_dr2_rj1, dr1_dr2_tsj1, dr2_dr1_rj2, dr1_dr2_tsj3, dr1_dr2_tsj2 : int\n\n    init State := 0\n    transition\n\n    %%%Request\n    State = 0 -> State = 1 :\n        Snd(CR, \"Request\")\n        \n\n    %%%Receive\n    State = 1 -> State = 2 :\n        Rec(CR, \"Response\")\n        \n    %%%Send\n    State = 2 -> State = 3 :\n        Snd(Key2, \"Response\")\n    \n    \n    %%%Final\n    State = 3 -> State = 4 :"]], "HLPSL-1/RegVBNS.hlpsl": [[true, "role_C(PARAM_0:agent,PARAM_1:agent,PARAM_4:int,PARAM_3:text,Kc:public_key,SND,RCV:channel(dy))\nplayed_by C\ndef=\n\tlocal\n\t\tVARIABLE_3:int,P:agent,F:text,Kp:public_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ SND({C.Na.Pd}_Kc)\n\t\t2. State=0 /\\ RCV({Na.Pd.F(Pd)}_Kc) =|> State':=2 /\\ P':=new() /\\ secret(EVENT_0,EVENT_1,{C}) /\\ SND({Na.F(P'.F(Pd))}_Kc)\n\t\t3. State=1 /\\ RCV({Na.F(P.F(Pd))}_Kc) =|> State':=2 /\\ P':=P /\\ secret(EVENT_0,EVENT_1,{C}) /\\ SND({Na.F(P'.F(Pd))}_Kc)\n\t\t4. State=2 /\\ RCV({C.Kp'.inv(Kp')}_Kc) =|> State':=3 /\\  VARIABLE_3:=check_signature(Kp', {C,M}) (Kp', {C,M})\nend"]], "HLPSL-1/safe_new_syntax.hlpsl": [[false, "```\n% 0. A -> B: A, Na, Sid, Pa\t\tnounceA, sessionID, preferences for encryption\n% 1. B -> A: Nb, Sid, Pb\t\tnounceB, sessionID, preferences for encryption\n% 2. B -> A: {B, Kb}inv(Ks)\t\toptional server certificate\n% 3. A -> B: {A, Ka}inv(Ks)\t\toptional client certificate\n% 4. A -> B: {PMS}Kb\t\t\twhere PMS is a nonce generated by A\n% 5. A -> B: {H(Nb,B,PMS)}inv(Ka)\toptional certificate verify message\n% 6. A -> B: {Finished}Keygen(A, Na, Nb, M) Finished = H(M.A.B.Na.Nb.Pa.Sid)\n% 7. B -> A: {Finished}Keygen(B, Na, Nb, M)\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nrole A(ROLE_0)(\n\tA, B : PARAM_0,  \n        H, % for messsage verification\n\tNa, Nb : NONCE,\n\tPa, Pb : ENCRYPTION_PREF,\n\tSid : SESSION_ID,\n\tKs, Ka, Kb : KEY,\n        PMS : NONCE,\n        M : MESSAGE,\n        Finished : MESSAGE\n)\nrole B(ROLE_0)(\n\tA, B : PARAM_0,  \n        H, % for messsage verification\n\tNa, Nb : NONCE,\n\tPa, Pb : ENCRYPTION_PREF,\n\tSid : SESSION_ID,\n\tKs, Ka, Kb : KEY,\n        PMS : NONCE,\n        M : MESSAGE,\n        Finished : MESSAGE\n)\n\ninit(ROLE_0) = A\n\n% A -> B\n\nmsg_0(ROLE_0)(A, B, A, Na, Sid, Pa)\n\n% B -> A\n\nmsg_1(ROLE_0)(B, A, Nb, Sid, Pb)\n\n% B -> A\n\nmsg_2(ROLE_0)(B, A, {B, Kb}inv(Ks))\n\n% A -> B\n\nmsg_3(ROLE_0)(A, B, {A, Ka}inv(Ks))\n\n% A -> B\n\nmsg_4(ROLE_0)(A, B, {PMS}Kb)\n\n% A -> B\n\nmsg_5(ROLE_0)(A, B, {H(Nb,B,PMS)}inv(Ka))\n\n% A -> B\n\nmsg_6(ROLE_0)(A, B, {Finished}Keygen(A, Na, Nb, M))\n\n% B -> A\n\nmsg_7(ROLE_0)(B, A, {Finished}Keygen(B, Na, Nb, M))\n\n```"]], "HLPSL-1/SmartCard.hlpsl": [[true, "role user (\n\tA, B : integer,\n\t% A is the user and B is the server\n\tS : symmetric_key,\n\t% S is the symmetric key between the user and the server\n\tH : function(text) returns text,\n\t% H is a cryptographic hash function\n\tSND, RECV : channel(dy)\n\t% Dolev Yao model channels \n)\n\nplayed_by A \n\ndef=\n\nlocal\n\tState : nat,\t% Transition state\n\tNu : text,\t\t% Secret nonce\n\tID : text, \t\t% User ID chosen randomly\n\tPs : text,\t\t% Pub\n\tMsg : text\n)"]], "HLPSL-1/SMC-5-Party.hlpsl": [[true, "role Client(C,Ka,Kb,Kc,Kd,Ke,SHA256,RCV)\nplayed_by C\ndef=\n\tlocal\n\t\tXa,Ya,Xb,Yb,Xc,Yc,Xd,Yd,Xe,Ye:text,\n\t\tState:nat\n\tinit\n\t\tState := 0\n\ttransition\n      1. State=0 /\\ RCV({A.C.{Xa'}_Ka.{Ya'}_Ka}_Kc) -> State':=1 /\\ EVENT_1(A,C,Xa,Ya,Kc)\n      2. State=1 /\\ RCV({A.C.{Xb'}_Kb.{Yb'}_Kb}_Kb) -> State':=2 /\\ EVENT_2(A,C,Xb,Yb,Kb)\n      3. State=2 /\\ RCV({A.C.{Xc'}_Kc.{Yc'}_Kc}_Kb) -> State':=3 /\\ EVENT_3(A,C,Xc,Yc,Kb)\n      4. State=3 /\\ RCV({A.C.{Xd'}_Kd.{Yd'}_Kd}_Kb) -> State':=4 /\\ EVENT_4(A,C,Xd,Yd,Kb)\n      5. State=4 /\\ RCV({A.C.{Xe'}}_Kb.{SHA256(Ye')}_Kb}_Kb) -> State':=4 /\\ EVENT_5(A,C,Xe,Ye,Kb)\nend role\n\nrole Server(C,Ka,Kb,Kc,Kd,Ke,SHA256,RCV)\nplayed_by C\ndef=\n\tlocal\n\t\tXa,Ya,Xb,Yb,Xc,Yc,Xd,Yd,Xe,Ye:text,\n\t\tState:nat\n\tinit\n\t\tState := 0\n\ttransition\n      1. State=0 /\\ RCV({A.C.{Xa'}_Ka.{Ya'}_Ka}_Kc) -> State':=1 /\\ EVENT_6(A,C,Xa,Ya,Kc)\n      2. State=1 /\\ RCV({A.C.{Xb'}_Kb.{Yb'}_Kb}_Kb) -> State':=2 /\\ EVENT_7(A,C,Xb,Yb,Kb)\n      3. State=2 /\\ RCV({A.C.{Xc'}_Kc.{Yc'}_Kc}_Kb) -> State':=3 /\\ EVENT_8(A,C,Xc,Yc,Kb)\n      4. State=3 /\\ RCV({A.C.{Xd'}_Kd.{Yd'}_Kd}_Kb) -> State':=4 /\\ EVENT_9(A,C,Xd,Yd,Kb)\n      5. State=4 /\\ RCV({A.C.{Xe'}}_Kb.{SHA256(Ye')}_Kb}_Kb) -> State':=4 /\\ EVENT_10(A,C,Xe,Ye,Kb)\nend role\n\nrole Server(C,Ka,Kb,Kc,Kd,Ke,SHA256,RCV)\nplayed_by C\ndef=\n\tlocal\n\t\tXa,Ya,Xb,Yb,Xc,Yc,Xd,Yd,Xe,Ye:text,\n\t\tState:nat\n\tinit\n\t\tState := 0\n\ttransition\n      1. State=0 /\\ RCV({A.C.{Xa'}_Ka.{Ya'}_Ka}_Kc) -> State':=1 /\\ EVENT_11(A,C,Xa,Ya,Kc)\n      2. State=1 /\\ RCV({A.C.{Xb'}_Kb.{Yb'}_Kb}_Kb) -> State':=2 /\\ EVENT_12(A,C,Xb,Yb,Kb)\n      3. State=2 /\\ RCV({A.C.{Xc'}_Kc.{Yc'}_Kc}_Kb) -> State':=3 /\\ EVENT_13(A,C,Xc,Yc,Kb)\n      4. State=3 /\\ RCV({A.C.{Xd'}_Kd.{Yd'}_Kd}_Kb) -> State':=4 /\\ EVENT_14(A,C,Xd,Yd,Kb)\n      5. State=4 /\\ RCV({A.C.{Xe'}}_Kb.{SHA256(Ye')}_Kb}_Kb) -> State':=4 /\\ EVENT_15(A,C,Xe,Ye,Kb)\nend role"]], "HLPSL-1/SPEKE.hlpsl": [[false, "```hlpsl\n%% PROTOCOL*: SPEKE\n%% VARIANT: SPEKE (with strong password-only authentication)\n%% PURPOSE: Strong Password-Only Authenticated Key Exchange\n%% REFERENCE:\n%% \\url{http://citeseer.ist.psu.edu/jablon96strong.html}\n%% MODELER:\n%% \\begin{itemize}\n%%  \\item Haykal Tej, Siemens CT IC 3, 2003\n%%  \\item Sebastian M{\\\"o}dersheim, ETH Z{\\\"u}rich, December 2003\n%% \\end{itemize}\n%%\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%% A -> B : exp(S(A,B), Na)     |    key exchange part\n%% B -> A : exp(S(A,B), Nb)     |\n%%\n%%               both A and B compute\n%%               K = exp(exp(S(A,B),Na), Nb) = exp(exp(S(A,B),Nb), Na)\n%%\n%% A -> B : {Ca}_K              |\n%% B -> A : {Cb,Ca}_K\n%% \\end{verbatim}\n%%\n%%\n%% ==============================================================================\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%"]], "HLPSL-1/SRP.hlpsl": [[false, "```\n%% PROTOCOL: SRP: Secure remote passwords\n%% PURPOSE: A client and a server authenticate each other based on \n%% a password such that the password remains secret, even if it is guessable.\n%% REFERENCE: \n%% \\begin{itemize}\n%% \\item \\url{http://srp.stanford.edu/}\n%% \\item  RFC 2945~\\cite{RFC2945}\n%% \\end{itemize}\n%% MODELER: \n%% \\begin{itemize}\n%% \\item Haykal Tej, Siemens CT IC 3, 2003\n%% \\item Sebastian M\\\"odersheim, ETH Z\\\"urich\n%% \\end{itemize}\n%% ALICE_BOB:\n%% We have a password $p$ initially shared between the participants\n%% and a random number $s$, the \\emph{salt} (which at least the server knows \n%% initially). Original protocol, according to RFC:\n%% \n%% \\begin{enumerate}\n%% \\item Client sends $I$ (identity) and $s$ (salt) to the server.\n%% \\item Server responds with $B$, a challenge.\n%% \\item Client computes $A = H(s, p) \\cdot g^x \\pmod{N}$,\n%% where $x = H(I, p, s, B) \\pmod{N}$\n%% \\item Client sends $A$ to the server.\n%% \\item Server computes $v = H(I, p, s, A) \\pmod{N}$.\n%% \\item Server computes $B' = B + v \\cdot s \\pmod{N}$.\n%% \\item Server verifies that $A = H(s, p) \\cdot g^{x'} \\pmod{N}$,\n%% where $x' = H(I, p, s, B') \\pmod{N}$.\n%% \\end{enumerate}\n%% \n%% \n%% \n%% \n```"]], "HLPSL-1/strongAuthentication_assym.hlpsl": [[false, "```houzhui\n%%%% B -> A: B,s\n\n____(ROLE_0)____ role_A(A:____(PARAM_2)____,____(PARAM_1)____:agent,____(PARAM_0)____,RCV:channel(dy),Ka:public_key,Kb:public_key)\nplayed_by A\ndef=\n\tlocal\n\t\tNa:nat,S:text,Nb:text\n\tinit\n\t\tState := 0\n\ttransition\n                                1. State=0 /\\ RCV(start)  =|> State':=1 /\\ Na:=new() /\\ SND({Na}_Kb)\n\t\t2. State=0 /\\ RCV({Na}_Ka) =|> State':=2 /\\ S:=receive_message\n               %% A checks that B is the emmiter of nonce\n                /\\ check_nonce(A,B,S,Na) \nend role\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nrole role_B(B:____(PARAM_3)____,____(PARAM_4)____:agent,____(PARAM_5)____,RCV:channel(dy),Ka:public_key,Kb:public_key)\nplayed_by B\ndef=\n\tlocal\n\t\tNb:nat\n\tinit\n\t\tState := 0\n\ttransition\n                1. State=0 /\\ RCV(start)  =|> State':=1 /\\ Nb:=new() /\\ SND({Nb}_Ka)\n\t\t2. State=0 /\\ RCV({Nb}_Ka) =|> State':=2 /\\ S:=receive_message\n                /\\ check_nonce(B,A,S,Nb)\nend role\n```"]], "HLPSL-1/strongAuthentication_symm.hlpsl": [[true, "%%%% B -> A: B,s\n\nrole role_A(A:int,B:int,s:int,RCV:channel(dy),Sk:symmetric_key)\nplayed_by A\ndef=\n\tlocal\n\t\tk:nat,x:int,Na:text\n\tinit\n\t\tState := 0\n\ttransition\n                                1. State=0 /\\ RCV(start)  =|> State':=1 /\\ Na':=new() /\\ SND({Na'}_Sk)\n\t\t2. State=0 /\\ RCV({Na.S'}_Sk) =|> State':=2\n\n               %% A checks that B is the emmiter of nonce\n                /\\ request(A,B,auth_1,s) \nend role\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nrole role_B(A:int,B:int,s:int,SND:channel(dy),Sk:symmetric_key)\nplayed_by B\ndef=\n\tlocal\n\t\tk:nat,x:int,Nb:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ SND(start) =|> State':=1 /\\ Nb':=new() /\\ RCV({Nb'}_Sk)\n\t\t2. State=____(STATE_1)____ /\\ request(B,A,auth_2,s) =|> State':=2\nend role"]], "HLPSL-1/An_Autonomous_Log_Storage_Management_Protocol_with_Blockchain_Mechanism_and_Access_Control_for_the_Internet_of_Things.hlpsl": [[true, "role U {\n  ROLE_0 = U;\n  ROLE_2 = Server;\n\n  PARAM_0 = IDi;\n  PARAM_1 = Alpha;\n  PARAM_2 = SK;\n  PARAM_3 = G;\n  PARAM_4 = C;\n  PARAM_5 = Kau;\n  PARAM_6 = text;\n  PARAM_7 = TIDi;\n\n  VARIABLE_0 = State;\n\n  STATE_0 = 0;\n  STATE_1 = 1;\n\n  EVENT_0 = IDi;\n  EVENT_1 = SK;\n\n}\n\nrole Server {\n  ROLE_0 = Server;\n  ROLE_2 = U;\n\n  PARAM_0 = IDi;\n  PARAM_1 = Alpha;\n  PARAM_2 = SK;\n  PARAM_3 = G;\n  PARAM_4 = C;\n  PARAM_5 = Kau;\n  PARAM_6 = text;\n  PARAM_7 = TIDi;\n\n  VARIABLE_0 = State;\n\n  STATE_0 = 0;\n  STATE_1 = 1;\n}\n\nchan Kau: symmetric_key;\nchan ECDSA: public_key;\nchan H, Add, Mul, Pair: text;\n\nplayed_by U def=\nlocal State: integer,\nIDi, TIDi, Ys, Alpha, SK, Ss, Ce, C, Hs, Sig, G, M, Y, X, IP, T: text\ninit State := 0\ntransition\n% User registration phase\n1.  State = 0 /\\ RCV(start) =|>\nState' := 1\n/\\ IDi' := new() /\\ SND({IDi'}_Kau) /\\ secret(IDi,SK,{A,U})\n2.  State = 1 /\\ RCV({exp(G,Add(Alpha'.TIDi'))}_Kau) =|>\nState' := 2\n%/\\"]], "HLPSL-1/Three-factor_fast_authentication_scheme_for_e-health_systems_in_5G_wireless_sensor_network.hlpsl": [[false, "```hlpsl\nMODULE RegistrationProtocol\n\nIMPORT\n\n  agent: TYPE\n  symmetric_key: TYPE\n  hash_func: TYPE\n  text: TYPE\n  channel: TYPE\n\n  // Define roles\n  ROLE_0: TYPE\n  ROLE_1: TYPE\n\n  // Define parameters\n  PARAM_0: TYPE\n  PARAM_1: TYPE\n  PARAM_2: TYPE\n  PARAM_3: TYPE\n  PARAM_4: TYPE\n  PARAM_5: TYPE\n  PARAM_6: TYPE\n  PARAM_7: TYPE\n  PARAM_8: TYPE\n\n\n  // Define variables\n  VARIABLE_0: TYPE\n\n  // Define states\n  STATE_0: TYPE\n  STATE_1: TYPE\n\n\n  // Define messages\n  PARAM_0  = agent\n  PARAM_1  = symmetric_key\n  PARAM_2  = text\n  PARAM_3  = text\n  PARAM_4  = text\n  PARAM_5  = channel\n  PARAM_6  = text\n  PARAM_7  = text\n  PARAM_8  = text\n\n\n  // Define the protocol.\n  PROTOCOL RegistrationProtocol(ROLE_0) ROLE_1 (PARAM_0, S: agent, PARAM_3, SKij: symmetric_key, PARAM_7: PARAM_4, H, PARAM_6, PARAM_1, H6, PARAM_2, H14, PARAM_8: hash_func, PARAM_5, RCV: channel"]], "HLPSL-1/Three-Factor_UCSSO_Scheme_With_Fast_Authentication_and_Privacy_Protection_for_Telecare_Medicine_Information_Systems.hlpsl": [[true, "role ROLE_0 {\n  input PARAM_0: natural, PARAM_1: agent, PARAM_2: SecureChannel, PARAM_3: public_key, PARAM_4: secret_key, PARAM_5: agent;\n  output PARAM_6: natural;\n}\n\nrole ROLE_1 {\n  input PARAM_0: natural, PARAM_1: agent, PARAM_2: SecureChannel, PARAM_3: public_key, PARAM_4: secret_key, PARAM_5: agent;\n  output PARAM_6: natural;\n}\n\n% Placeholder for SecureChannel type (replace with actual definition)\ntype SecureChannel = ...\n\n% Placeholder for public_key type (replace with actual definition)\ntype public_key = ...\n\n% Placeholder for secret_key type (replace with actual definition)\ntype secret_key = ...\n\n% Placeholder for agent type (replace with actual definition)\ntype agent = ...\n\n% Placeholder for H function (replace with actual definition)\nfunction H(x: text): text = ...\n\n% Placeholder for xor function (replace with actual definition)\nfunction xor(x: text, y: text): text = ...\n\n% Placeholder for new() function (replace with actual definition)\nfunction new(): text = ...\n\n\nplayed_by U def=\n\n  local State: nat,\n        R, Xi, Y, IDi, PWi, Bi, IDsj, M, E, Tu, A1, C1, Nij, Ts, A2, M1, Pa, Qa, Kij, KijNew, Wj, SKj: text\n\n% System Initialization\n  init State := 0\n\n  transition\n\n% Registration\n\n\t1.  State = 0 /\\ RCV(start) =|>\n\t\t   State' := 1\n\t\t   /\\ IDi' := new() /\\ PWi' := new() /\\ Bi' := new() %/\\ Input IDi', PWi', and imprint Bi'\n\t\t   /\\ R' := new()\n\t\t   /\\ Xi' := H(PWi'.Bi')\n\t\t   /\\ Y' := H(H(PWi'.R').xor(\n\t\t\t   H(PARAM_3.IDi')\n\t\t   ))\n\t\t   /\\ SND(register, IDi', PWi', Bi', R', Xi', Y') =|> State' := 2"]], "HLPSL-1/TLS.hlpsl": [[false, "```\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% YAZAR: MEHMET EM\u0130N KONUK\n%% PROTOKOL: TLS: Transport Layer Security (Ta\u015f\u0131ma Katman\u0131 G\u00fcvenli\u011fi)\n%% **Bu spesifikasyon TLS protokol\u00fcn\u00fcn AVISPA i\u00e7in k\u0131salt\u0131lm\u0131\u015f bir versiyonudur**\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nrole Client(A, B : principal,  \n\t   H, PRF, KeyGen: function,\n\t   Ka, Ks: public_key,  %% Ks a\u00e7\u0131k anahtar\n\t   SND, RCV: channel (A, B))\nplayed_by A\ndef=\n\n   local Na, Sid, Nonce, Message: text,\n         Nb: text,\n         State: nat,\n         Finished: has\n\n   init:\n       State = 0\n       Finished = false\n       Na = fresh_text()\n\n   step(State = 0):\n       SND(A, B, Na)\n       State = 1\n\n   step(State = 1, RCV(A, B, Nb)):\n       State = 2\n       \n   step(State = 2):\n       Message = something\n       SND(A, B, Message)\n       State = 3\n       \n   step(State = 3, RCV(A, B, Nb)):\n       State = 4\n\n   step(State = 4):\n       Finished = true\n\nrole Server(A, B : principal,  \n\t   H, PRF, KeyGen: function,\n\t   Ka, Ks: public_key,  %% Ks a\u00e7\u0131k anahtar\n\t   SND, RCV: channel (A, B))\nplayed_by B\ndef=\n\n   local Nb, Sid, Nonce, Message: text,\n         Na: text,\n         State: nat,\n         Finished: has\n\n   init:\n       State = 0\n       Finished = false\n\n   step(State = 0, RCV(B, A, Na)):\n       Nb = fresh_text()\n       SND(B, A, Nb)\n       State = 1\n\n   step(State = 1, RCV(B, A, Message)):\n       State = 2\n       \n   step(State = 2):\n       Finished = true\n\n```"]], "HLPSL-1/total.hlpsl": [[true, "// ... (The rest of the code would be inserted here, filled in with the correct values)"]], "HLPSL-1/UMTS_AKA.hlpsl": [[true, "%% PROTOCOL: UMTS-AKA\n%% PURPOSE: \n%% Authentication and Key Agreement\n%% REFERENCE:\n%% \\url{http://www.3gpp.org/ftp/tsg_sa/WG3_Security/_Specs/33902-310.pdf}\n%% MODELER:\n%% \\begin{itemize}\n%%  \\item Haykal Tej, Siemens CT IC 3, 2003\n%%  \\item Sebastian M{\\\"o}dersheim, ETH Z{\\\"u}rich, December 2003\n%% \\end{itemize}\n%%\n%% ALICE_BOB:\n%% S is the server, M is the mobile set, they share a secret key k(M).\n%% \n%% Both S and M have an own version of a sequence number,\n%% that they try to maintain synchonized.\n%% \n%% Using k(M), a random number (nonce) r, his sequence number seq,\n%% when S receives a request from M (or whenever he wishes\n%% this part is not modelle\nmodule umts_aka\n\n  type nonce = {int}\n  type seq_num = {int}\n  type key = {int}\n  \n  var s_seq : seq_num = 0\n  var m_seq : seq_num = 0\n  var k_m : key = 0\n  \n  \n  process Alice\n    input r : nonce\n    input seq : seq_num\n    output resp : {int, int}\n  {\n    resp = compute_resp(r, seq, k_m)\n  }\n  \n  process Bob\n    input resp : {int, int}\n    output r : nonce\n    output seq : seq_num\n  {\n    r = resp[0]\n    seq = resp[1]\n  }\n  \n  function compute_resp(r : nonce, seq : seq_num, k : key) returns ({int, int})\n  {\n    //Example computation:\n    //r = r + seq\n    //seq = seq + 1\n    //return {r, seq}\n    \n    //More realistic calculation needed for actual analysis.  \n    //This example is just a placeholder.\n    return {r, seq}\n  }\n  \n  init {\n    s_seq = 0\n    m_seq = 0\n    k_m = 123456789\n  }\nendmodule"]], "HLPSL-1/update_simple(final).hlpsl": [[true, "role_OBU(\n  OBU,PARAM_1                   : agent,\n  Kseaf                    : PARAM_4,\n  PARAM_5                      : text,\n  H1,H2,PARAM_3                : PARAM_2,\n  PARAM_0,PARAM_6                  : channel(dy))\nplayed_by OBU def=\n  \n  local\n    VARIABLE_0        :nat,\n\tC1,C2,T        :text,\n\tH12,PID2,R1,R2,R1en,S1,R2en         :message,\n\tH11          :hash(text.text.message.text.message),\n%%\tH12          :hash(message.text.message.text.message),\n\tRes          :hash(message.message)\t\n  init\n    State := 0\n\n  transition\n  \n  1. State = STATE_0 /\\"]], "HLPSL-1/usglight.hlpsl": [[true, "role ROLE_1 (Ui, Sj, PARAM_6 : agent,\n           Kdi,PARAM_0: symmetric_key,\n\t\t   PARAM_1: nat,\n\t\t   PARAM_4:hash_func,\n\t\t   P: nat,\t   \n           SND_UG,PARAM_5 : channel (PARAM_3))\n\t\t   \nplayed_by Ui\n\ndef=\n\n  local VARIABLE_0:nat,\n        T1,K1,A,M1,M2,Ki,B,K3,K2,IDi,SIDj,M4,M6,M7,SK,Keinew  : text\n\n  const shared_key,VARIABLE_2,sc_sensor_id:VARIABLE_1\n\n  init  State := 0\n\n  transition\n\n   1. State   = 0  \t/\\ RCV_UG(start)=|> \n      State' := 1   /\\ T1' := new()\n\t\t\t\t\t/\\ K1' := new()\n\t\t\t\t\t/\\ A'  := Expp(P,K1')\n\t\t\t\t\t/\\ M2' := H(A'."]], "HLPSL-1/woolamProtocolFixed.hlpsl": [[false, "```\n% woo-lam protocol\n\nrole alice (PARAM_3, B, PARAM_2: agent,\n                Kas: symmetric_key,\n         PARAM_1, PARAM_0: channel(dy))\n\n  played_by A def=\n  \n  local State : integer,\n       Nb, Na : text,\n      Session : text,\n          Kab : symmetric_key\n\n  init State := 0\n  \n  transition\n\t1. State  = 0 /\\ RCVA(start) =|>\n\t   State':= 1 /\\ Na':= new()\n\t              /\\ SNDA(A.Na')\n\n\t2. State  = 1 /\\ RCVA(B.Nb') =|>\n\t   State':= 2 /\\ Session' := new() /\\ SNDA({Session'.A.B.Na.Nb'}_Kas)\n\n\t3. State  = 2 /\\ RCVA({Session.B.Na.Nb.Kab'}_Kas.{Na.Nb}_Kab') =|>\n\t   State':= 3 /\\ SNDA(accept)\n\n```"]], "HLPSL-1/XorNSPK_1.hlpsl": [[false, "```\n%NSPKxor Protocol\n\n%\n%   1. A -> B: {Na.A}_Kb\n%   2. B -> A: {Nb, Na xor B}_Ka\n%   3. A -> B: {Nb}_Kb\n\n \nROLE_0 alice (A,     : agent, \n            Ka,   : public_key,  \n            Snd,  : channel ()) played_by A def=\n\n  local \n     i  : nat, \n     Na    : message, \n     Nb     : text\n\t\n  init \n     State:=0\n\n  transition \n    1. State=0 /\\ Rcv(start) =|>\n          State':=1\n       /\\ Na:=new()\n       /\\ Snd({Na.A}_Kb)\n       /\\ Event(Na, {A,B})\n\n\n    2. State=1 /\\ Rcv({Nb, Na xor B}_Ka) =|>\n          State':=2\n       /\\ Nb:=Nb\n       /\\ Event(Nb, {A,B})\n\n\n    3. State=2 /\\ Snd({Nb}_Kb) =|>\n          State':=0\n       /\\ Event(Nb, {A,B})\n\nROLE_1 bob (B,     : agent, \n            Kb,   : public_key,  \n            Rcv,  : channel ()) played_by B def=\n\n  local \n     i  : nat, \n     Na    : message, \n     Nb     : text\n\t\n  init \n     State:=0\n\n  transition \n    1. State=0 /\\ Rcv({Na.A}_Kb) =|>\n          State':=1\n       /\\ Na:=Na\n       /\\ Event(Na, {A,B})\n\n\n    2. State=1 /\\ Snd({Nb, Na xor B}_Ka) =|>\n          State':=2\n       /\\ Nb:=new()\n       /\\ Event(Nb, {A,B})\n\n\n    3. State=2 /\\ Rcv({Nb}_Kb) =|>\n          State':=0\n       /\\ Event(Nb, {A,B})\n\n\n```"]], "HLPSL-1/xvrabe07.hlpsl": [[false, "```\nrole role_A(A:agent,B:agent,Na:agent,Kas:symmetric_key,Kabs:symmetric_key,Role:agent,RCV:channel(agent))\nplayed_by A\ndef=\n\tlocal\n\t\tN_A:nat,Msg:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ N_A:=new() /\\ SND(H(A.B.N_A.Kas).A.B.N_A)\n\t\t2. State=1 /\\ RCV(A.B.N_A.Kas.B.H(N_A.Kas).A.B.N_A) =|> State':=2 /\\ Msg:=new()\n\t\t3. State=2 /\\ RCV(A.B.xor(Kab,H(N_A.Kas)).{A.B.N_A}_Kab) =|> State':=3\n\t\t4. State=3 /\\ SND(A.B.xor(Kab,H(N_A.Kas)).{A.B.N_A}_Kab) =|> State':=4\nend\nrole role_B(A:agent,B:agent,Na:agent,Kas:symmetric_key,Kabs:symmetric_key,Role:agent,RCV:channel(agent))\nplayed_by B\ndef=\n\tlocal\n\t\tN_B:nat,Msg:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t5. State=0 /\\ RCV(start) =|> State':=1 /\\ N_B:=new() /\\ SND(H(A.B.N_B.Kas).A.B.N_B)\n\t\t6. State=1 /\\ RCV(A.B.N_B.Kas.A.H(N_B.Kas).A.B.N_B) =|> State':=2 /\\ Msg:=new()\n\t\t7. State=2 /\\ RCV(A.B.xor(Kab,H(N_B.Kas)).{A.B.N_B}_Kab) =|> State':=3\n\t\t8. State=3 /\\ SND(A.B.xor(Kab,H(N_B.Kas)).{A.B.N_B}_Kab) =|> State':=4\nend\n\n```"]], "HLPSL-1/Auth-protocol.hlpsl": [[false, "```\nrole init_role_1(ROLE_1) (PARAM_2, PARAM_1: agent, PARAM_3: symmetric_key, PARAM_0,RCV: channel(dy))\nplayed_by ED\ndef=\n\tlocal\n\t\tVARIABLE_0:nat,\n\t\tIDu, PWu, Bu, Aa, Cu, M,AB, TW: text,\n\t\tLu, Xu, Yu, Fu, Zu, PIDr, Bbprime, Du: text,\n\t\tBuj, IDj, Quj, PIDrprime, Qujprime, Dj, Tu, SKuj,Ss, DIDu: text,\n\t\tH: hash_func\n\tconst\n\t\tsp1,VARIABLE_1, sp3, a, VARIABLE_2, bprime, VARIABLE_3, VARIABLE_4\t: protocol_id\n\tinit\n\t\tState := 0\n\ttransition\n\t1. State = 0  /\\  RCV(start) =|> \n        State' := 1  /\\  M' := H(IDu.Bu) \n\t/\\ Aa' := new()\n\t/\\ TW' := new()\n\t/\\ State' := 1\n```"]], "HLPSL-1/addNewSession.hlpsl": [[true, "%Fixed NSPK Protocol implemented with the xor operator\n\n%ROLE_1: Alice\nrole ROLE_1 alice (A,\n            Ka,\n            Snd,\n            channel (dy))\n\nplayed_by A def=\n\n  local State : integer,\n        Na : message, \n        Nb : text\n\t\n  init State:=0\n\n  transition \n    1. State=0 /\\ Rcv(Nb)\n\t=|> State':=1 /\\ Na':=new() /\\ Snd({Na'.A}_Kb)\n                    /\\ Event(Na',{A,B})\n\n\n    2. State=1 /\\ Rcv({Nb'.xor(Na,B)}_Ka) \n\t  =|> State':=2 /\\ Snd({Nb'}_Kb)"]], "HLPSL-1/Basic1.hlpsl": [[false, "```\nrole client(SA,SN,HN:agent,SK:key,IDN:text,H:hash_func)\nplayed_by SA\ndef=\n        local State:nat,AN:key,BN:key\n        const secIDN,secKN,secH:protocol_id\n        init State:=0\n        transition\n        1.State=0 /\\ RCV(start) =|> State':=1\n          /\\AN:=xor(IDN,H(secKN))\n          /\\BN:=xor(xor(secKN,secIDN),AN)\n          /\\SND({IDN.AN.BN}_SK)\nend client\n\nrole server(SA,SN,HN:agent,SK:key,IDN:text,H:hash_func)\nplayed_by SA\ndef=\n        local State:nat,AN:key,BN:key\n        const secIDN,secKN,secH:protocol_id\n        init State:=0\n        transition\n        1.State=0 /\\ RCV({IDN.AN.BN}_SK) =|> State':=1\n          /\\AN':=xor(IDN,H(secKN))\n          /\\BN':=xor(xor(secKN,secIDN),AN')\n          /\\SND(accept)\nend server\n\n```"]], "HLPSL-1/calp-v1.hlpsl": [[false, "```\n%% PROTOCOL: CALP:Control Access Loria Protocol\n%% PURPOSE: Un serveur(S), une badgeuse (B)\n%% Deux cas de figures :  - une demande d'acces normale (1)\n%%\t\t\t  - une demande d'acces exceptionnelle (2)\n%%B -> S : {IdBageuse, IdEmploye}_PKs\n%%S -> B : { Ok }_PKb\n%%B -> S : { Ok }_PKs\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% definition du role badgeuse, initiant le protocole\nrole badgeuse (IdBageuse, S: agent,\n\t    IdEmploye,  Req_Type : int,             \n            PKs, Pkb: public_key,      \n            B_PK, S_PK: public_key, RCV: channel(dy)) \n\nplayed_by B def=\n\n  local \n    Msg_1, Msg_2, Msg_3 : message;\n    \n    Msg_1.IdBageuse := IdBageuse;\n    Msg_1.IdEmploye := IdEmploye;\n    Msg_1.Req_Type := Req_Type;\n    \n    Msg_2.Ok := true;\n    Msg_3.Ok := true;\n    \n    \n    \n    \n    \n  begin\n    \n    \n    \n    \n    send (Msg_1, S, S_PK);\n    \n    receive (Msg_2, S, S_PK);\n    \n    send (Msg_3, S, S_PK);\n    \n  end\n```"]], "HLPSL-1/DH.hlpsl": [[false, "```\nrole role_A(ROLE_0:int,B:int,G:text,RCV:channel(dy))\nplayed_by A\ndef=\n\tlocal\n\t\tX:int,Y:int,N:text,State:int\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ X':=new() /\\ SND(exp(G,X'))\n\t\t2. State=1 /\\ RCV(exp(G,Y')) =|> State':=2 /\\ N':=new() /\\ secret(exp(G,Y'),exp(G,X),{A}) /\\ SND({N'}_exp(exp(G,X),Y'))\nend role_B(ROLE_1:int,B:int,H:text,SND,RCV:channel(dy))\nplayed_by B\ndef=\n\tlocal\n\t\tX:int,Y:int,N:text,State:int\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(exp(H,Y')) =|> State':=1 /\\ X':=new() /\\ SND(exp(H,X'))\n\t\t2. State=1 /\\ RCV({N'}_exp(exp(H,X),Y')) =|> State':=2 /\\ secret(exp(H,Y'),exp(H,X),{B})\nend\n```"]], "HLPSL-1/DH_with_Forward_Secrecy_(Vulnerable).hlpsl": [[true, "% Protocollo\n% 1. A -> S: A, B\n% 2. A -> B: A, exp(g, Na)\n% 3. S -> B: {A, B, Kab}_Kbs\n% 4. S -> A: {A, B, Kab}_Kas\n% 5. B -> A: B, exp(g, Nb)\n\nrole_A(A:agent,\n\tB:agent,\n\tS:agent,\n\tNa:nat,\n\tNb:nat,\n\tKab: symmetric_key,\n\tKas: symmetric_key,\n\tch_AB:channel(dy),\n\tch_AS:channel(dy))\nplayed_by A\ndef=\n\tlocal\n\t\tState:int,\n\t\tK:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State = 0\n\t\t   /\\ ch_AS(start)\n\t\t   =|>\n\t\t   State' := 1\n\t\t   /\\ K' := exp(exp(g,Na),Nb)\n\t\t2. State = 1\n\t\t   /\\ ch_AB(A, K)\n\t\t   =|>\n\t\t   State' := 2\n\t\t3. State = 2\n\t\t   /\\ ch_AB(B, {A,B,Kab}_Kbs)\n\t\t   =|>\n\t\t   State' := 3\n\nrole_S(A:agent,\n\tB:agent,\n\tS:agent,\n\tNa:nat,\n\tNb:nat,\n\tKab: symmetric_key,\n\tKas: symmetric_key,\n\tch_AB:channel(dy),\n\tch_AS:channel(dy))\nplayed_by S\ndef=\n\tlocal\n\t\tState:int,\n\t\tK:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State = 0\n\t\t   /\\ ch_AS(start)\n\t\t   =|>\n\t\t   State' := 1\n\t\t2. State = 1\n\t\t   /\\ ch_AB(A, {A,B,Kab}_Kas)\n\t\t   =|>\n\t\t   State' := 2\n\t\t3. State = 2\n\t\t   /\\ ch_AB(B, {A,B,Kab}_Kbs)\n\t\t   =|>\n\t\t   State' := 3\n\nrole_B(A:agent,\n\tB:agent,\n\tS:agent,\n\tNa:nat,\n\tNb:nat,\n\tKab: symmetric_key,\n\tKas: symmetric_key,\n\tch_AB:channel(dy),\n\tch_AS:channel(dy))\nplayed_by B\ndef=\n\tlocal\n\t\tState:int,\n\t\tK:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State = 0\n\t\t   /\\ ch_AB(B, {A,B,Kab}_Kbs)\n\t\t   =|>\n\t\t   State' := 1\n\t\t2. State = 1\n\t\t   /\\ ch_AB(A, B, exp(g,Nb))\n\t\t   =|>\n\t\t   State' := 2"]], "HLPSL-1/EKE.hlpsl": [[true, "MODULE EKE_basic\n\n  IMPORT BOOL, INT, STRING\n\n  TYPE\n    A = 0\n    B = 1\n    Kab = STRING\n    Ea = STRING\n    K = STRING\n    Ca = STRING\n    Cb = STRING\n\n  VAR\n    role : INT\n\n  --  Key exchange part\n  INIT\n    role == A | role == B\n\n  EVENT\n    A_to_B_1 :\n      role == A ->\n        role == B\n\n  EVENT\n    B_to_A_1 :\n      role == B ->\n        role == A\n\n  --  Challenge/Response\n  EVENT\n    A_to_B_2 :\n      role == A ->\n        role == B\n\n  EVENT\n    B_to_A_2 :\n      role == B ->\n        role == A\n\n  --  Authentication part\n  EVENT\n    A_to_B_3 :\n      role == A ->\n        role == B\n\n  EVENT\n    B_to_A_3 :\n      role == B ->\n        role == A\n\n  --  Init\n  INIT_A :\n    role == A\n\n  INIT_B :\n    role == B\n\n\n  --  Key exchange part\n  A_to_B_1_SPEC:\n    role == A ->\n      role == B\n\n  B_to_A_1_SPEC:\n    role == B ->\n      role == A\n\n  --  Challenge/Response\n  A_to_B_2_SPEC:\n    role == A ->\n      role == B\n\n  B_to_A_2_SPEC:\n    role == B ->\n      role == A\n\n  --  Authentication part\n  A_to_B_3_SPEC:\n    role == A ->\n      role == B\n\n  B_to_A_3_SPEC:\n    role == B ->\n      role == A\n\nENDMODULE"]], "HLPSL-1/Ex3_A.hlpsl": [[true, "%\n%   1. A -> B: A,{Na}_Kb\n%   2. B -> A: B,{Na.Nb}_Ka\n%   3. A -> B: {zero,Msg}_(Na,Nb)\n%   4. B -> A: {one,Msg}_(Na,Nb)\n \n\n%Haykal Tej, Siemens CT IC 3, 2003 and\n%Luca Compagna et al, AI-Lab DIST University of Genova, November 2004\n\n \n\n\n\n\n\n(ROLE_0) agent_A ( ROLE_1) agent_B ( PARAM_2)  nat ( PARAM_1)  nat ( PARAM_3)  message ( PARAM_0)  nat\n \n(MESSAGE_4) Rcv(A,{Na}_Kb) -> State := 1\n  \n  transition\n\n   1. State  = 0 /\\ Rcv(A,{Na}_Kb) -> State := 1\n   2. State  = 1 /\\ Snd(B,{Na.Nb}_Ka) -> State := 2\n   3. State  = 2 /\\ Rcv({zero,Msg}_(Na,Nb)) -> State := 3\n   4. State  = 3 /\\ ____(MESSAGE_5)____ -> State := 0"]], "HLPSL-1/full-sample.hlpsl": [[false, "```\n%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol\n%% VARIANT: original version (of 1978) with key server\n%% PURPOSE: Two-party mutual autentication\n%% ALICE_BOB:\n%% 1a. A ------------------- {A.B} ------------------> S\n%% 1b. A <-------------------{B.PKb}_inv(PKs) -------- S\n%% 1c. A --- {Na.A}_PKb ---> B\n%% 2a.                       B --- {B.A} ------------> S\n%% 2b.                       B <-- {A.PKa}_inv(PKs) -- S\n%% 2c. A <-- {Na.Nb}_PKa --- B\n%% 3 . A --- {Nb}_PKb -----> B\n%% PROBLEMS: 3\n%% ATTACKS: Man-in-the-middle attack\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% HLPSL:\n% Role of the initiator:\nrole Alice(ROLE_1\n  init {\n    A,B : Party;\n    Na,Nb : Nonce;\n    PKs : PublicKey;\n    PKa,PKb : PublicKey;\n  }\n\n  % Phase 1\n  1a:\n    send(S, {A,B});\n  1b:\n    receive(S, {B,PKb}_inv(PKs));\n  1c:\n    send(B, {Na,A}_PKb);\n  % Phase 2\n  2c:\n    receive(B, {Na,Nb}_PKa);\n  % Phase 3\n  3:\n    send(B, {Nb}_PKb);\n  )\n\n% Role of the responder:\nrole Bob(ROLE_1\n  init {\n    A,B : Party;\n    Na,Nb : Nonce;\n    PKs : PublicKey;\n    PKa,PKb : PublicKey;\n  }\n\n  % Phase 1\n  2a:\n    send(S, {B,A});\n  2b:\n    receive(S, {A,PKa}_inv(PKs));\n  % Phase 2\n  2c:\n    send(A, {Na,Nb}_PKa);\n  % Phase 3\n  3:\n    receive(A, {Nb}_PKb);\n  )\n\n% Role of the key server:\nrole KeyServer(ROLE_1\n  init {\n    A,B : Party;\n    Na,Nb : Nonce;\n    PKs : PublicKey;\n    PKa,PKb : PublicKey;\n  }\n\n    1a:\n      receive(A, {A,B});\n    1b:\n      send(A, {B,PKb}_inv(PKs));\n  2a:\n    receive(B, {B,A});\n  2b:\n    send(B, {A,PKa}_inv(PKs));\n)\n\n\n% Verification Condition:\nvc MutualAuthentication {\n  Alice(ROLE_1), Bob(ROLE_1), KeyServer(ROLE_1);\n}\n```"]], "HLPSL-1/h.530.hlpsl": [[true, "role mobileTerminal (\n    key,VGK,AuF : agent,\n    msg,RCV    : ch\n)\n{\n  init {\n    ____(INIT_1)____;\n  }\n  \n  step {\n    ____(STEP_1)____;\n    ____(STEP_2)____;\n  }\n}"]], "HLPSL-1/hash_n_multi.hlpsl": [[false, "```\nhouzhui\nrole user (\n    U,PW : agent,\n    SND,RCV  : channel(message),\n    F          : hash_func)\nplayed_by U def=\n\n  local\n    State       : nat,\n    Na,Nb   : message,\n    Nah4,Nah3      : message\n    \n  init  State := 0\n\n  transition\n\n 1. State  = 0 /\\ RCV(start) =|>\n    State':= 2 /\\ Nah4' := F(F(F(F(PW))))\n               /\\ SND(Nah4'.U)\n\n 2. State  = 1 /\\ RCV(Nb'.S) =|>\n    State':= 3 /\\ Nah3' := F(F(F(PW)))\n               /\\ SND(Nah3'.U)\n\t       /\\ witness(U,S,Nb',Na)\n\t\t\t   \n 3. State = 2 /\\ RCV(Na'.S) =|>\n    State':= 4 /\\ SND(Na'.U)\n    \n 4. State = 3 /\\ RCV(Na'.S) =|>\n    State':= 4 /\\ SND(Na'.U)\nend user\n\n\nrole server (\n    U,S : agent,\n    SND,RCV  : channel(message),\n    F          : hash_func)\nplayed_by S def=\n\n  local\n    State       : nat,\n    Na,Nb   : message,\n    Nah4,Nah3      : message\n    \n  init  State := 0\n\n  transition\n\n 1. State  = 0 /\\ RCV(Nah4'.U) =|>\n    State':= 1 /\\ RCV(Na)\n    \n 2. State  = 1 /\\ RCV(Nah3'.U) =|>\n    State':= 2 /\\ RCV(Nb)\n\t       /\\ witness(U,S,Nah3',Nah4')\nend server\n\n\n```"]], "HLPSL-1/authenticationWPA.hlpsl": [[true, "%% PROTOCOL: WPA2 Wifi security protocol authentication request response and 4 way handshake.\n%% PURPOSE:\n%% We want to model the security capabilities of the WPA2 model for which \n%% we need to use a relevant analysis software. Here, the protocol is \n%% modelled on AVISPA Tool. On performing the analysis, we see that\n%% there is no attack possible and the protocol is safe.\n%% However, we know now that there is a KRACK Attack possible against the protocol.\n%% THe purpose of this project is to come up with a patch to the protocol and hence\n%% the AVISPA tool is not sufficient to model such behaviour according to our findings.\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nMODULE WPA2_handshake\n\n  TYPES\n    opaque  =  0..100000\n    // Define types for messages (e.g., AuthenticationRequest, AuthenticationResponse, etc.)\n    AuthenticationRequest = 1\n    AuthenticationResponse = 2\n    KeyHandshake1 = 3\n    KeyHandshake2 = 4\n    KeyHandshake3 = 5\n    KeyHandshake4 = 6\n\n  VARIABLES\n    // State variables for the protocol participants\n    STA_state : 0..2 // 0:idle, 1:authentication, 2:keyExchange\n    AP_state : 0..2 // 0:idle, 1:authentication, 2:keyExchange\n    // Variables to store exchanged messages\n    STA_sent_msg : AuthenticationRequest | AuthenticationResponse | KeyHandshake1 | KeyHandshake2 | KeyHandshake3 | KeyHandshake4\n    AP_sent_msg : AuthenticationRequest | AuthenticationResponse | KeyHandshake1 | KeyHandshake2 | KeyHandshake3 | KeyHandshake4\n    // ... other variables if needed\n\n  INIT\n    STA_state = 0\n    AP_state = 0\n    STA_sent_msg = 0\n    AP_sent_msg = 0\n    // ... initialize other variables\n\n\n  TRANS\n    // Transition rules for the protocol\n    // Example:\n    // STA_state = 0 & AP_state = 0 ->\n    // STA_state' = 1\n    // AP_state' = 1\n    // STA_sent_msg' = AuthenticationRequest\n    // AP_sent_msg' = AuthenticationResponse\n\tSTA_state = 0 & AP_state = 0 ->\n\tSTA_state' = 1\n\tAP_state' = 1\n\tSTA_sent_msg' = AuthenticationRequest\n\tAP_sent_msg' = AuthenticationResponse\n\t\n\tSTA_state = 1 & AP_state = 1 & STA_sent_msg = AuthenticationRequest & AP_sent_msg = AuthenticationResponse ->\n\tSTA_state' = 2\n\tAP_state' = 2\n\tSTA_sent_msg' = KeyHandshake1\n\tAP_sent_msg' = KeyHandshake2\n\t\n\tSTA_state = 2 & AP_state = 2 & STA_sent_msg = KeyHandshake1 & AP_sent_msg = KeyHandshake2 ->\n\tSTA_state' = 2\n\tAP_state' = 2\n\tSTA_sent_msg' = KeyHandshake3\n\tAP_sent_msg' = KeyHandshake4\n\t\n\t// ... more transitions for the handshake and other states\n\n  \n  // Important:  Add assertions to specify protocol properties.\n  // For example, checking for correct message sequence, etc.\n  //  These are crucial for analysis.  Example:\n  ASSERTIONS\n    // Example assertion:  Ensure that the STA and AP are in the same state\n    // when exchanging messages.\n    STA_state = 1 & AP_state = 1 -> STA_sent_msg = AuthenticationRequest & AP_sent_msg = AuthenticationResponse\n    // ... add more assertions\n\nENDMODULE"]], "HLPSL-1/IKEv2-DS.hlpsl": [[false, "```\nmodule ikev2_simplified\n\nimports\n  Integers,\n  Sets,\n  Lists,\n  Strings,\n\n  // Add any necessary imports from your AVISPA installation\n  // (e.g., for specific protocol components)\n\n\n// Protocol definitions in hlpsl\n// ... (Protocol definition, e.g., IKEv2 message structures)\n\n\n// Define the protocol messages\ntype IKEv2_Msg =\n    Init\n  | Response\n  | Ack\n  | Rekey\n  | ... // Add other message types for IKEv2\n\n// Define the protocol state variables\ntype State =\n    State_Initial\n  | State_Exchange_1\n  | State_Exchange_2\n  | State_Established\n  | State_Rekeying\n  | State_Closing\n  ... // Add other state variables\n\n// Define the possible actions\ntype Action =\n    Send(IKEv2_Msg)\n  | Receive(IKEv2_Msg)\n  | ... // Add other actions\n\n// Define the protocol environment\ntype Env =\n    Agent_A\n  | Agent_B\n  | Intruder\n  // ...\n\n\n// Protocol variables (e.g., agent IDs, session IDs, etc.)\nvar\n  agent_a : Agent\n  agent_b : Agent\n  intruder : Agent\n  session_id : Id\n\n\n// Initialize the protocol state\ninit\n  State_Initial(agent_a, agent_b, intruder, session_id)\n\n\n// Define the protocol rules\nrule\n  State_Initial(a, b, i, s) -> State_Exchange_1(a, b, i, s)\n  where\n    Send(Init) from a to b\n\n\nrule\n  State_Exchange_1(a, b, i, s) -> State_Exchange_2(a, b, i, s)\n  where\n    Receive(Response) from b to a\n\n// ... (Add more rules for other protocol states and message exchanges)\n\n\n// Define attacker actions (e.g., man-in-the-middle)\nrule\n  State_Exchange_1(a, b, i, s) -> State_Exchange_2(a, b, i, s)\n  where\n    Receive(Response) from b to i\n    Send(Response) from i to a\n\n\n\n// Define the attacker strategy (e.g., modifying messages)\n// ... (Add attacker strategy rules)\n\n\n// Define the attacker's goal (e.g., successful MITM)\ngoal\n  State_Established(agent_a, agent_b, intruder, session_id)\n\n\n\n// ... (Add other definitions as needed for the protocol)\n\n\n// Example of a property (add more as needed)\nproperty\n  // In the established state, the session ID is unique\n  unique(session_id)\n  where\n    State_Established(agent_a, agent_b, intruder, session_id)\n\n```\n```hlpsl\n```"]], "HLPSL-1/ISO1.hlpsl": [[false, "```\n%% PROTOCOL: ISO1 Public Key Unilateral Authentication Protocol\n%% VARIANT: one-pass unilateral authentication\n%% PURPOSE: A client authenticates himself to a server by sending a digital signature.\n%% REFERENCE:\n%% \\begin{itemize}\n%% \\item \\cite{clark97survey,ISO-IEC-9798-3}\n%% \\end{itemize}\n%% MODELER:\n%% \\begin{itemize}\n%% \\item Haykal Tej, Siemens CT IC 3, 2003 and\n%% \\item Luca Compagna et al, AI-Lab DIST University of Genova, November 2004\n%% \\end{itemize}\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%%   1. A -> B : {PKa,A}inv(PKs), Na, B, Text,{Na,B,Text}inv(PKa)\n%% \\end{verbatim}\n%% PROBLEMS: 1\n%% CLASSIFICATION: G1, G2\n%% ATTACKS: \n%% The intruder can attack the protocol by replaying the message.\n\nhlpsl\n(module iso1_unilateral_authentication)\n\n(role Alice)\n(role Bob)\n(role Intruder)\n\n(message PKa)\n(message PKs)\n(message Na)\n(message Text)\n(message A)\n(message B)\n\n(init)\n(Alice -> Bob : {PKa,A}inv(PKs), Na, B, Text,{Na,B,Text}inv(PKa))\n\n(next)\n(Bob -> Alice :  {PKb,B}inv(PKa), Nb, A, Text,{Nb,A,Text}inv(PKb))\n(Bob -> Intruder : {PKb,B}inv(PKa), Nb, A, Text,{Nb,A,Text}inv(PKb))\n\n\n(action)\n(Alice -> Bob)\n(Bob -> Alice)\n(Intruder -> Bob)\n\n\n(assumption)\n(Intruder -> Bob : {PKa,A}inv(PKs), Na, B, Text,{Na,B,Text}inv(PKa))\n(Intruder -> Bob : {PKa,A}inv(PKs), Na, B, Text,{Na,B,Text}inv(PKa), {PKb,B}inv(PKa), Nb, A, Text,{Nb,A,Text}inv(PKb))\n\n(goal)\n(Bob -> Alice)\n\n\n(end)\n```"]], "HLPSL-1/ISO3.hlpsl": [[false, "```\n%% Alice -> Bob:  A(Na)\n%% Bob -> Alice:  B(Nb, A(Na))\n%% Alice -> Bob:  A(Na, B(Nb, A(Na)))\n%% \\end{verbatim}\n%% SECURITY_GOAL: mutual authentication\n%% ASSUMPTIONS:\n%% \\begin{itemize}\n%% \\item  The parties have public/private key pairs.\n%% \\item  The parties have access to a secure channel.\n%% \\end{itemize}\n%% ATTACK_MODEL:\n%% \\begin{itemize}\n%% \\item  The attacker can eavesdrop on the communication channel.\n%% \\item  The attacker can modify messages.\n%% \\item  The attacker can inject messages.\n%% \\end{itemize}\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%\n%%"]], "HLPSL-1/LPD-MSR.hlpsl": [[false, "```\n%% PROTOCOL: LPD: Low-Powered Devices\n%% VARIANT: MSR: Modulo Square Root\n%% LPD (Low-Powered Devices) MSR (Modulo Square Root) protocol is a key\n%% establishment protocol for secure mobile communications. It has been\n%% designed by Beller, Chang, and Yacobi in 1990s.\n%% Such a protocol relies on a public key cryptosystem for which\n%% encryption is particularly efficient, at least in comparison to other\n%% public key cryptosystems. The specific public key cryptosystem\n%% employed is due to Rabin, in which encryption and decryption\n%% tantamount, respectively, to modulo squaring and extracting a modulo\n%% square root (MSR).  MSR technique allows public key en\n%%cryption and decryption to be performed efficiently.\n\n%% VARIABLES:\n%%   a, b, c, d, e, f : integer\n%%   p, q : prime\n%%   n : integer\n\n%% CONSTANTS:\n%%   p, q : prime, such that n = p*q\n%%   a : integer\n\n%% ASSUMPTIONS:\n%%   p, q > 1\n%%   a, b, c, d, e, f are integers\n\n%% DEFINITIONS:\n%%   n = p*q\n\n%% PROTOCOL DESCRIPTION:\n%% 1.  A sends (a, b)\n%% 2.  B receives (a, b) and calculates c = a^2 mod n\n%% 3.  B sends c to A\n%% 4.  A receives c and calculates d = sqrt(c) mod n  (assuming d exists)\n%% 5.  A sends d to B\n\n%% SECURITY GOAL:\n%%   A and B agree on a common secret key d (with an assumption that d is unique).\n\n%% HLPSL CODE:\nhlpsl\nmodule lpd_msr;\n\n% Declaration of variables\nint a, b, c, d, e, f;\nint p, q, n;\n\n% Assumption: p and q are prime numbers greater than 1\nassume (p > 1) && (q > 1) && is_prime(p) && is_prime(q);\n\n% Calculate n\nn = p * q;\n\n% Step 1: A sends (a, b)\n% (No need to model this as an action in HLPSL for now, as it does not involve any analysis)\n\n% Step 2: B receives (a, b) and calculates c = a^2 mod n\nc = (a * a) % n;\n\n% Step 3: B sends c to A\n% (No need to model this as an action in HLPSL for now)\n\n% Step 4: A receives c and calculates d = sqrt(c) mod n\n% Check if a square root exists (crucial for security)\nassume (exists_sqrt(c, n));\nd = sqrt(c) % n;\n\n% Step 5: A sends d to B\n% (No need to model this as an action in HLPSL for now)\n\n% Security goal: A and B agree on a common secret key d\n% (No direct HLPSL statement to express this.  Verification of\n%  the security goal would involve analyzing the protocol for\n%  potential vulnerabilities, such as the existence of multiple\n%  square roots.)\nendmodule\n```"]], "HLPSL-1/NSPK_2.hlpsl": [[false, "```houzhui\n%Alice - Bob\n%\n%   1. A -> B: {Na,A}_Kb\n%   2. B -> A: {Na,Nb}_Ka\n%   3. A -> B: {Nb}_Kb\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%HLPSL:\nrole alice (key_kb: key, B: role,\n            A: role, Kb: key,      \n            SND, RCV: channel (dy)) \nplayed_by A def=\n\n  local nonce_a : nat, \n        Na, Nb: text\n\n  init State := 0\n\n  transition  \n   \n    0.  State  = 0 /\\ RCV(start) =|> \n\tState':= 2 /\\ Na' := new() /\\ SND({Na'.A}_Kb)\n\t\t   /\\ nonce_a'(Na',  secret_na,{A,B}) \n\n    2.  State  = 1 /\\ RCV({Na.Nb'}_Ka) =|> \n\tState':= 3 /\\ Nb' := Nb'\n```"]], "HLPSL-1/PBK.hlpsl": [[false, "```\n%% PROTOCOL: PBK: Purpose Built Keys Framework\n%% VARIANT: original version\n%% PURPOSE: Sender invariance (authentication assuming first message is not tampered with)\n%% REFERENCE: \\url{http://www.ietf.org/internet-drafts/draft-bradner-pbk-frame-06.txt}\n%% MODELER:\n%% \\begin{itemize}\n%% \\item Daniel Plasto for Siemens CT IC 3, 2004\n%% \\item Sebastian M\\\"odersheim, ETH Z\\\"urich\n%% \\end{itemize}\n%%\n%% ALICE_BOB:\n%% \\begin{verbatim}\n%%  A -> B: A, PK_A, hash(PK_A)\n%%  A -> B: {Msg}_inv(PK_A), hash(PK_A)\n%%  B -> A: Nonce\n%%  A -> B: {Nonce}_inv(PK_A)\n%% \\end{verbatim}\n%%\n%% PROBLEMS: 1\n%% ATTACKS: \n%%   The initiator shall sign a random challenge received from \n%%\n%% \\begin{hlpsl}\n%%\n%%  type A, B;\n%%  type PK_A, Msg, Nonce;\n%%  type Hash;\n%%  \n%%  chan A2B, B2A;\n%%\n%%  init {\n%%    A2B! (A, PK_A, hash(PK_A));\n%%    A2B! (enc(Msg, inv(PK_A)), hash(PK_A));\n%%    B2A! (Nonce);\n%%    A2B! (enc(Nonce, inv(PK_A)));\n%%  }\n%%\n%%  \n%%  \n%%  \n%%  \n%%  \n%%  \n%%\n%%  \n%%  \n%%\n%%  \n%%  \n%%  \n%%\n%%  \n%%\n%%\n%%\n%%\n%%  \n%%\n%%  \n%% \\end{hlpsl}\n```"]], "HLPSL-1/protocol_v2.hlpsl": [[true, "% PURPOSE: Syncronisation between two servers before sending a common request to another one\n% DESCRIPTION:\n% Two servers: Shell (S) and Code (C)\n% Third server: Master (M)\n\n% S ------- {Mess1.Ns.S}_PKc ------------> C\n% S <------ {Mess1.Mess2.Ns.Nc}_PKs ------ C\n% S ------- {OK.Mess1.Mess2.Nc}_PKc -----> C\n% S -------------- {Mess1.Mess2}_PKm ------------> M\n% S <------------- {OK.rep}_PKs ------------------ M\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Protocal: \n\n% Role of Shell (S):\n\nrole S(ROLE_0) (\n    S, C: agent,\n    PKc, PKs, PKm: public_key,\n    Mess1, Mess2, Ns, Nc, OK, rep: message,\n    \n    init:\n        send(Mess1.Ns.S, C, PKc);\n    \n    recv(Mess1.Mess2.Ns.Nc, C, PKs);\n    \n    send(OK.Mess1.Mess2.Nc, C, PKc);\n    \n    send(Mess1.Mess2, M, PKm);\n    \n    recv(OK.rep, M, PKs);\n    \n);\n\n% Role of Code (C):\n\nrole C(ROLE_1) (\n    S, C: agent,\n    PKc, PKs: public_key,\n    Mess1, Mess2, Ns, Nc, OK: message,\n    \n    init:\n        recv(Mess1.Ns.S, S, PKc);\n    \n    send(Mess1.Mess2.Ns.Nc, S, PKs);\n    \n    recv(OK.Mess1.Mess2.Nc, S, PKc);\n    \n);\n\n\n% Role of Master (M):\n\nrole M(ROLE_2) (\n    S, M: agent,\n    PKm, PKs: public_key,\n    Mess1, Mess2, OK, rep: message,\n    \n    init:\n        recv(Mess1.Mess2, S, PKm);\n    \n    send(OK.rep, S, PKs);\n    \n);"]], "HLPSL-1/simple-sample.hlpsl": [[true, "%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol\n%% VARIANT: original version (of 1978) without key server\n%% PURPOSE: Two-party mutual autentication\n%% ALICE_BOB:\n%% 1. A  - {Na.A}_PKb ----> B\n%% 2. A <- {Na.Nb}_PKa ---  B\n%% 3. A  - {Nb}_PKb ------> B\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% d\u00e9finition du r\u00f4le alice, initiant le protocole\nrole alice (A, B: participant,             \n            PK_A, PK_B, PK_C: public_key,      \n            Na, Nb: nonces, RCV: channel(dy)) \nplayed_by A def=\n\n  local  N_A: nat, \n        Na, Nb: nonces\n\n  init State:=0\n\n  transition  \n   State=0 -> (send(RCV, {N_A.A}_PK_B) ,  N_A:= N_A+1, State:=1)  \n   State=1 -> (rcv(RCV, {N_A.Nb}_PK_A), State:=2)\n   State=2 -> (send(RCV, {Nb}_PK_B), State:=3)"]], "HLPSL-1/simple_protocol.hlpsl": [[false, "```\n%%% Key exchange protocol (with 3 bugs in the spec (see below))\n%%% 1. A -> T: {Kab}_Kat\n%%% 2. T -> B: {Kab}_Kbt\n\nrole_A(A:agent,B:agent,T:agent,Kat:symmetric_key,SND,RCV:channel(dy))\nplayed_by A\ndef=\n\tlocal\n\t\ti:nat,\n                Kab:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 \n\t\t/\\ Kab':=new() /\\ SND({Kab'}_Kat) \n\t\t/\\ i':=i+1\n\t\t%/\\ SND(Kab')   %% Unsafe protocol but claimed SAFE!,\n                               %% Because of \n\nrole_T(A:agent,B:agent,T:agent,Kat:symmetric_key,Kbt:symmetric_key,SND,RCV:channel(dy))\nplayed_by T\ndef=\n\tlocal\n\t\ti:nat\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV({Kab}_Kat) =|> State':=1 /\\ SND({Kab}_Kbt)\n\t\t/\\ i':=i+1\n```"]], "HLPSL-1/strengthen_protocol.hlpsl": [[true, "%%% Key exchange protocol, secured for secrecy, mutual authentication of A and B (but unoptimized)\n%%% 1. A -> T : {A,B,Kab,Na}_Kat\n%%% 2. T -> B : {B,A,Kab,Na}_Kbt\n%%% 3. B -> A : {A,B,Na,Nb}_Kab\n%%% 4. A -> B : {A,B,Nb}_Kab\n\nROLE_0(A:agent,T:agent,B:agent,Kat:symmetric_key,Kbt:symmetric_key,RCV:channel(A))\nplayed_by A\ndef=\n\tlocal\n\t\tState:nat,\n\t\tNa:text,\n\t\tNb:text,\n\t\tKab:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> \n                   State':=1 /\\ Na':=new() /\\ Kab':=new() /\\ SND({A,B,Kab',Na'},Kat)\n\t\t2. State=1 /\\ RCV({B,A,Kab',Na'},Kbt) =|> \n                   State':=2 /\\ SND({A,B,Na',Nb'},Kab')\n\t\t3. State=2 /\\ RCV({A,B,Na',Nb'},Kab') =|> \n                   State':=3 /\\ SND({A,B,Nb'},Kab')\n\nROLE_1(A:agent,T:agent,B:agent,Kat:symmetric_key,Kbt:symmetric_key,RCV:channel(B))\nplayed_by B\ndef=\n\tlocal\n\t\tState:nat,\n\t\tNa:text,\n\t\tNb:text,\n\t\tKab:symmetric_key\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> \n                   State':=1 /\\ Nb':=new()\n\t\t2. State=1 /\\ RCV({B,A,Kab,Na},Kbt) =|> \n                   State':=2 /\\ SND({A,B,Na,Nb'},Kab)\n\t\t3. State=2 /\\ RCV({A,B,Na,Nb'},Kab) =|> \n                   State':=3"]], "HLPSL-1/AVISPAProject.hlpsl": [[true, "MODULE SessionKeyExchange;\n\nIMPORT Crypto;\n\nCONST\n  Na = 1;\n  Nb = 2;\n\nTYPE\n  Key = INT;\n  SessionID = INT;\n\nVAR\n  A_key : Key;\n  S_key : Key;\n  B_key : Key;\n  session_id : SessionID;\n  \n% A -> S: ({A.B.Na}_Ka)\nPROC A_to_S(A_B_Na_Ka : Crypto.Ciphertext);\nBEGIN\n  ASSERT(Crypto.decrypt(A_B_Na_Ka, A_key) = {A.B.Na});\nENDPROC;\n\n% A <- S: ({K.Na}_Ka.  {K.Na.A}_Kb)\nPROC S_to_A(K_Na_Ka : Crypto.Ciphertext; K_Na_A_Kb : Crypto.Ciphertext);\nBEGIN\n  ASSERT(Crypto.decrypt(K_Na_Ka, A_key) = {K.Na});\n  ASSERT(Crypto.decrypt(K_Na_A_Kb, B_key) = {K.Na.A});\nENDPROC;\n\n% A -> B: ({K.Na.A}_Kb)\nPROC A_to_B(K_Na_A_Kb : Crypto.Ciphertext);\nBEGIN\n  ASSERT(Crypto.decrypt(K_Na_A_Kb, B_key) = {K.Na.A});\nENDPROC;\n\n% A <- B: ({Na.Nb}_K)\nPROC B_to_A(Na_Nb_K : Crypto.Ciphertext);\nBEGIN\n  ASSERT(Crypto.decrypt(Na_Nb_K, A_key) = {Na.Nb});\nENDPROC;\n\n% A -> B: ({Nb.Na}_K)\nPROC A_to_B_2(Nb_Na_K : Crypto.Ciphertext);\nBEGIN\n  ASSERT(Crypto.decrypt(Nb_Na_K, B_key) = {Nb.Na});\nENDPROC;\n\n\n%  Initialization\nPROC Init();\nBEGIN\n  session_id := 0;\n  A_key := Crypto.generateKey();\n  S_key := Crypto.generateKey();\n  B_key := Crypto.generateKey();\nENDPROC;\n\n%  Example usage\nPROC Example();\nVAR\n  A_B_Na_Ka : Crypto.Ciphertext;\n  K_Na_Ka : Crypto.Ciphertext;\n  K_Na_A_Kb : Crypto.Ciphertext;\n  Na_Nb_K : Crypto.Ciphertext;\n  Nb_Na_K : Crypto.Ciphertext;\nBEGIN\n  A_B_Na_Ka := Crypto.encrypt({A.B.Na}, S_key);\n  K_Na_Ka := Crypto.encrypt({K.Na}, S_key);\n  K_Na_A_Kb := Crypto.encrypt({K.Na.A}, B_key);\n  Na_Nb_K := Crypto.encrypt({Na.Nb}, A_key);\n  Nb_Na_K := Crypto.encrypt({Nb.Na}, A_key);\n  \n  A_to_S(A_B_Na_Ka);\n  S_to_A(K_Na_Ka, K_Na_A_Kb);\n  A_to_B(K_Na_A_Kb);\n  B_to_A(Na_Nb_K);\n  A_to_B_2(Nb_Na_K);\nENDPROC;"]], "HLPSL-1/StrongAuthenticationPropertyofAlicetoBob.hlpsl": [[true, "%Fixed NSPK Protocol implemented with the xor operator\n\n%ROLE_0\nalice (A,B : agent, Kb : key,  Snd,Rcv : channel (msg))\n\nplayed_by A def=\n\n  local  count : nat,\n        Na : message, \n        Nb : text\n\t\n  init State:=0\n\n  transition \n    1. State=0 /\\ Rcv(Nb)\n\t=|> State':=1 /\\ Na:=new() /\\ Snd({Na.A}_Kb)\n                    /\\ Rcv(Na,sna,{A,B})\n\n\n    2. State=1 /\\ Snd({Nb.xor(Na,B)}_Ka) \n\t  =|> State':=2 /\\ Rcv(Nb')"]], "HLPSL-1/strongAuthentication_xor.hlpsl": [[false, "```\n%%%% B -> A: B,s\n\nrole role_A(agent:agent,B:agent,nonce:nat,RCV:channel(B))\nplayed_by A\ndef=\n\tlocal\n\t\tS:nat,S_1:nat,Na:nat\n\tinit\n\t\tState := 0\n\ttransition\n                                1. State=0 /\\ RCV(start)  =|> State':=1 /\\ Na:=new() /\\ SND(B,Na)\n\t\t2. State=1 /\\ RCV(xor(Na,S)) =|> State':=2\n\n               %% A checks that B is the emmiter of nonce\n                /\\ is_emmiter(B,Na,auth_1) \nend role\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nrole role_B(agent:agent,A:agent,nonce:nat,RCV:channel(A))\nplayed_by B\ndef=\n\tlocal\n\t\tS:nat,S_1:nat,Na:nat\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start)  =|> State':=1 /\\ Na:=new() /\\ SND(A,Na)\n\t\t2. State=1 /\\ RCV(xor(Na,S_1)) =|> State':=2\n\nend role\n```"]], "HLPSL-1/typedvariableNA.hlpsl": [[false, "```\n%Fixed NSPK Protocol implemented with the xor operator\n\ninit(ROLE_0) init(ROLE_1) (A,M : int, \n            P : public_key,  \n            Snd,Rcv : channel (dy))\n\nplayed_by A def=\n\n  local State : int, Na : int, Nb : text\n\t\n  init State:=0\n\n  transition \n    1. State=0 /\\ Rcv(M)\n\t=|> State':=1 /\\ Na:=new() /\\ Snd({M}_Kb)\n                    /\\ secret(Na,sna,{A,B})\n\n\n    2. State=1 /\\ Rcv({Nb'.xor(Na,M)}_Ka) \n\t  =|> State':=2\n```"]], "HLPSL-1/unsafe_one_sym_key.hlpsl": [[false, "```\nrole A(ROLE_1)\n\tA, B : agent,  \n        H, % for messsage verfication\n\tPRF : function,\n\tNa, Nb : nonce,\n\tSid : sessionID,\n\tPa, Pb : preferences_for_encryption,\n\tKa, Kb : key,\n\tKs : key,\n\tPMS : nonce,\n\tM : message,\n\tFinished : message\n{\n\t% 0. A -> B: A, Na, Sid, Pa\t\tnounceA, sessionID, preferences for encryption\n\tsend(A,B, [A, Na, Sid, Pa]);\n\n\t% 1. B -> A: Nb, Sid, Pb\t\tnounceB, sessionID, preferences for encryption\n\treceive(B,A, [Nb, Sid, Pb]);\n\n\t% 2. B -> A: {B, Kb}inv(Ks)\t\toptional server certificate\n\treceive(B,A, [enc(Ks, [B, Kb])]);\n\n\t% 3. A -> B: {A, Ka}inv(Ks)\t\toptional client certificate\n\tsend(A,B, [enc(Ks, [A, Ka])]);\n\n\t% 4. A -> B: {PMS}Kb\t\t\twhere PMS is a nonce generated by A\n\tsend(A,B, [enc(Kb, PMS)]);\n\n\t% 5. A -> B: {H(Nb,B,PMS)}inv(Ka)\toptional certificate verify message\n\tsend(A,B, [dec(Ka, [H(Nb, B, PMS)])]);\n\n\t% 6. A -> B: {Finished}Keygen(Na, Nb, M) Finished = H(M.A.B.Na.Nb.Pa.Sid)\n\tM = H(M, A, B, Na, Nb, Pa, Sid);\n\tsend(A,B, [enc(Keygen(Na, Nb, M), Finished)]);\n}\n\nrole B(ROLE_1)\n\tA, B : agent,  \n        H, % for messsage verfication\n\tPRF : function,\n\tNa, Nb : nonce,\n\tSid : sessionID,\n\tPa, Pb : preferences_for_encryption,\n\tKa, Kb : key,\n\tKs : key,\n\tPMS : nonce,\n\tM : message,\n\tFinished : message\n{\n\t% 0. A -> B: A, Na, Sid, Pa\t\tnounceA, sessionID, preferences for encryption\n\treceive(A,B, [A, Na, Sid, Pa]);\n\n\t% 1. B -> A: Nb, Sid, Pb\t\tnounceB, sessionID, preferences for encryption\n\tsend(B,A, [Nb, Sid, Pb]);\n\n\t% 2. B -> A: {B, Kb}inv(Ks)\t\toptional server certificate\n\tsend(B,A, [enc(Ks, [B, Kb])]);\n\n\t% 3. A -> B: {A, Ka}inv(Ks)\t\toptional client certificate\n\treceive(A,B, [enc(Ks, [A, Ka])]);\n\n\t% 4. A -> B: {PMS}Kb\t\t\twhere PMS is a nonce generated by A\n\treceive(A,B, [enc(Kb, PMS)]);\n\n\t% 5. A -> B: {H(Nb,B,PMS)}inv(Ka)\toptional certificate verify message\n\treceive(A,B, [dec(Ka, [H(Nb, B, PMS)])]);\n\n\t% 6. A -> B: {Finished}Keygen(Na, Nb, M) Finished = H(M.A.B.Na.Nb.Pa.Sid)\n\tM = H(M, A, B, Na, Nb, Pa, Sid);\n\tsend(B,A, [enc(Keygen(Na, Nb, M), Finished)]);\n}\n``````hlpsl\n```"]], "HLPSL-1/unsafe_wo_cert_check.hlpsl": [[false, "```\nrole alice(\n\tNa : nonce, Sid : sessionID, Pa : preferences,\n\tB : role,\n        H, % for messs\n\tKs : key, Ka : key,\n\tM : message\n)\nrole bob(\n\tNb : nonce, Pb : preferences,\n\tA : role,\n        H, % for messs\n\tKs : key, Kb : key,\n\tM : message\n)\n\ninit\n\talice(Na, Sid, Pa, bob)\n\tbob(Nb, Pb, alice)\n\nmsg(0) alice -> bob(A, Na, Sid, Pa)\nmsg(1) bob -> alice(Nb, Sid, Pb)\nmsg(2) bob -> alice({B, Kb}inv(Ks))\nmsg(3) alice -> bob({A, Ka}inv(Ks))\nmsg(4) alice -> bob({PMS}Kb)\nmsg(5) alice -> bob({H(Nb,B,PMS)}inv(Ka))\nmsg(6) alice -> bob({Finished}Keygen(A, Na, Nb, M))\nmsg(7) bob -> alice({Finished}Keygen(B, Na, Nb, M))\n\n% Define the message types\ntype message =\n  A_to_B_0 |\n  B_to_A_1 |\n  B_to_A_2 |\n  A_to_B_3 |\n  A_to_B_4 |\n  A_to_B_5 |\n  A_to_B_6 |\n  B_to_A_7\n\n% Define the encryption/decryption functions\nenc(X, K) = {X}K\ndec({X}K, K) = X\n\n% Define the verification function\nverify(sig, msg, key) = ...\n\n% Define the hash function\nH(X) = ...\n\n\n% Define the key generation function\nKeygen(A, Na, Nb, M) = H(M.A.B.Na.Nb.Pa.Sid)\n```"]], "HLPSL-1/untypedvariableNa.hlpsl": [[false, "```\n%Fixed NSPK Protocol implemented with the xor operator\n\n%ROLE_1\nalice (A,B : public_key,  \n            Ka,Kb : public_key,  \n            Nonce,Rcv : channel)\n\nplayed_by A def=\n\n  local Na : nat, S : text set, M : text\n\t\n  init State:=0\n\n  transition \n    1. State=0 /\\ Rcv(Nb)\n\t=|> State':=1 /\\ Na:=new() /\\ Snd({Na}_Kb)\n                    /\\ event(Na,Nb,{A,B})\n\n\n    2. State=1 /\\ Rcv({Nb'.xor(Na,B)}_Ka) \n\t  =|> State':=2 /\\ \n```"]], "HLPSL-1/weakAuthenticationfromAlicetoBob.hlpsl": [[true, "%Fixed NSPK Protocol implemented with the xor operator\n\n%ROLE_0: Alice\nROLE_0) alice (A,k : agent, N, Na : message,  Snd,Rcv : channel (dy))\n\nplayed_by A def=\n\n  local X : nat,\n        Na : message, \n        Nb : message\n\t\n  init State:=0\n\n  transition \n    1. State=0 /\\ start()\n\t=|> State':=1 /\\ Na':=new() /\\ Snd({Na}_Kb)\n                    /\\ event(Na',{A,B})\n\n\n    2. State=1 /\\ Rcv({Nb'.xor(Na)}_Ka) \n\t  =|> State':=2 /\\ Snd({Nb'}_Kb)"]], "HLPSL-1/woolamProtocol.hlpsl": [[false, "```\n% woo-lam protocol\n\nrole alice (A, int, S: agent,\n                Kas: symmetric_key,\n                Nb, Na: text: channel(symmetric_key))\n\n  played_by A def=\n  \n  local State : int,\n       Nb, Na : text,\n          Kab : symmetric_key\n\n  init State := 0\n  \n  transition\n\t1. State  = 0 /\\ RCVA(start) =|>\n\t   State':= 1 /\\ Na':= new()\n\t              /\\ SNDA(A.Na')\n\n\t2. State  = 1 /\\ RCVA(B.Nb') =|>\n\t   State':= 2 /\\ SNDA({A.B.Na.Nb'}_Kas)\n\n\t3. State  = 2 /\\ RCVA({B.Na.Nb.Kab'}_Kas.{Na.Nb}_Kab') =|>\n\t   State':= 3 /\\ SNDA({Nb}_Kab')\n\t              /\\ witness(true)\n\n```"]], "HLPSL-1/XorNSPK_2.hlpsl": [[true, "%NSPKxor Protocol\n\n%\n%   1. A -> B: {Na.A}_Kb\n%   2. B -> A: {Nb, Na xor B}_Ka\n%   3. A -> B: {Nb}_Kb\n\n \nrole A (A,B     : agent, \n            Na,Nb   : message,  \n            Ka,Kb : key,\n            Rcv : channel (dy)) played_by A def=\n\n  local \n     State  : nat, \n     Na    : message, \n     Nb     : text\n\t\n  init \n     State:=0\n\n  transition \n    1. State=0 /\\ Rcv({Na'.A}_Kb) =|>\n          State':=1\n       /\\ Na':=new()\n       /\\ Snd({Na}_Kb)\n       /\\ secret(Na', secret_na,{A,B})\n\n\n    2. State=1 /\\ Rcv({Nb', Na' xor B}_Ka) =|>\n          State':=2\n       /\\ Nb':=new()\n       /\\ secret(Nb', secret_nb,{A,B})\n\n\n    3. State=2 /\\ Rcv({Nb}_Kb) =|>\n          State':=3\n       \n  \nrole B (A,B     : agent, \n            Na,Nb   : message,  \n            Ka,Kb : key,\n            Rcv : channel (dy)) played_by B def=\n\n  local \n     State  : nat, \n     Na    : message, \n     Nb     : text\n\t\n  init \n     State:=0\n\n  transition \n    1. State=0 /\\ Rcv({Na.A}_Kb) =|>\n          State':=1\n       /\\ Na':=new()\n       /\\ Snd({Nb', Na' xor B}_Ka)\n       /\\ secret(Nb', secret_nb,{A,B})\n\n    2. State=1 /\\ Rcv({Nb}_Kb) =|>\n          State':=2"]], "HLPSL-1/xsulak04.hlpsl": [[true, "(ROLE_1) role_A(A:agent,B:agent,S:agent,Dec:hash_func,SND,REQ:channel(0))\nplayed_by A\ndef=\n\tlocal\n\t\tX:text,Kas:symmetric_key,Kbs:symmetric_key,Nb:text,Kab:symmetric_key,T:text\n\tinit\n\t\tState := 0\n\ttransition\n\t\t1. State=0 /\\ RCV(start) =|> State':=1 /\\ SND(A.B)\n\t\t2. State=1 /\\ RCV({B.Kab'.T'.{Kab'.A.T'}_Kbs'}_Kas') =|> State':=2 /\\ SND({Kab'.A.T'}_Kbs') /\\ KAB(Kab',A,B)\n\t\t3. State=2 /\\ RCV({Nb'}_Kab') =|> State':=3 /\\ SND({Nb'}_Kab')\n\t\t4. State=3 /\\ RCV(ack) =|> State':=4 /\\ SND(ack)"]]}