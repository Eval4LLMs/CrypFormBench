[
    {
        "file": "PV-1/signedDH.pv",
        "falsecode": "(* Signed Diffie-Hellman Protocol Model *)\n\n(* Types *)\ntype G.\ntype skey.\ntype pkey.\ntype nonce.\ntype signature.\n\n(* Channels *)\nfree c: channel.\n\n(* Constants *)\nconst g: G. (* Generator for the Diffie-Hellman group *)\n\n(* Functions *)\nfun pk(skey): pkey.\nfun sign(G, skey): signature.\nfun exp(G, nonce): G.\nfun enc(bitstring, G): bitstring.\nreduc forall x: bitstring, y: G; dec(enc(x, y), y) = x.\nreduc forall m: G, k: skey; checksign(sign(m, k), m, pk(k)) = true.\n\n(* Equations for Diffie-Hellman property *)\nequation forall x: nonce, y: nonce; exp(exp(g, x), y) = exp(exp(g, y), x).\n\n(* Secret message *)\nfree s: bitstring [private].\n\n(* Queries *)\nquery attacker(s).\n\n(* Events for authentication *)\nevent beginA(pkey, G).\nevent endB(pkey, G).\nevent beginB(pkey, G).\nevent endA(pkey, G).\n\n(* Authentication queries *)\nquery x: pkey, y: G; event(endB(x, y)) ==> event(beginA(x, y)).\nquery x: pkey, y: G; event(endA(x, y)) ==> event(beginB(x, y)).\n\n(* Process for participant A *)\nlet processA(skA: skey) =\n    let pkA = pk(skA) in\n    out(c, pkA);\n    new n0: nonce;\n    let gn0 = exp(g, n0) in\n    let signA = sign(gn0, skA) in\n    out(c, (gn0, signA, pkA));\n    event beginA(pkA, gn0);\n    in(c, (gn1: G, signB: signature));\n    in(c, pkB: pkey);\n    if checksign(signB, gn1, pkB) = true then\n    event endA(pkB, gn1);\n    let k = exp(gn1, n0) in\n    out(c, enc(s, k)).\n\n(* Process for participant B *)\nlet processB(skB: skey) =\n    let pkB = pk(skB) in\n    out(c, pkB);\n    in(c, (gn0: G, signA: signature, pkA: pkey));\n    if checksign(signA, gn0, pkA) = true then\n    event endB(pkA, gn0);\n    new n1: nonce;\n    let gn1 = exp(g, n1) in\n    let signB = sign(gn1, skB) in\n    event beginB(pkB, gn1);\n    out(c, (gn1, signB));\n    let k = exp(gn0, n1) in\n    in(c, m: bitstring);\n    let plaintext = dec(m, k) in\n    0.\n\n(* Main process *)\nprocess\n    new skA: skey;\n    new skB: skey;\n    ( (!processA(skA)) | (!processB(skB)) )",
        "falseinfo": "However, the verification results of this file code illustrate that there was a security issue in the targeted protocol. This was a false positive, and there should be no problem with the protocol.",
        "code": "(* From Proverif git examples directory *)\n\n(* Signed Diffie-Hellman\n\tA -> B : { e^n0 }skA, pkA    (n0 fresh)\n        B -> A : { e^n1 }skB         (n1 fresh)\n          A and B compute the key as k = (e^n0)^n1 = (e^n1)^n0\n        A -> B : { s }k\n\n *)\n\nfree c: channel.\n\ntype pkey.\ntype skey.\ntype G.\ntype exponent.\n\n(* Signatures *)\n\nfun sign(G, skey): bitstring.\nfun pk(skey):pkey.\nreduc forall m: G, k: skey; getmess(sign(m,k)) = m.\nreduc forall m: G, k: skey; checksign(sign(m,k), pk(k)) = m.\n\n(* Shared key encryption *)\n\nfun enc(bitstring, G): bitstring.\nreduc forall x: bitstring, y: G; dec(enc(x,y),y) = x.\n\n(* Diffie-Hellman *)\n\nconst g: G.\nfun exp(G, exponent): G.\nequation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).\n\n(* Test whether s is secret *)\n\nfree s: bitstring [private].\nquery attacker(s).\n\n(* The process *)\n\nlet p0(skA: skey, pkA: pkey, pkB: pkey) = \n         in(c, pkX: pkey);\n\t new n0: exponent; \n         out(c,(sign(exp(g, n0), skA), pkA));\n\t in(c,m1: bitstring); \n\t let x1 = checksign(m1, pkX) in\n\t let k = exp(x1, n0) in \n  \t if pkX = pkB then\n\t out(c, enc(s,k)).\n\nlet p1(skB: skey, pkB: pkey, pkA: pkey) = \n         in(c, (m0: bitstring, pkY: pkey));\n\t let x0 = checksign(m0, pkY) in\n\t new n1: exponent; \n         let k = exp(x0, n1) in \n         out(c,sign(exp(g, n1), skB));\n         in (c,m: bitstring); \n         let s2 = dec(m,k) in 0.\n\nprocess \n\tnew skA: skey;\n\tlet pkA = pk(skA) in\n\tout(c, pkA);\n\tnew skB: skey;\n\tlet pkB = pk(skB) in\n\tout(c, pkB);\n\t((!p0(skA, pkA, pkB)) | (!p1(skB, pkB, pkA)))\n\n(* EXPECTPV\nRESULT not attacker(s[]) is true.\n0.009s (user 0.006s + system 0.003s), max rss 10060K\nEND *)",
        "logic": "---\n\n### Description of the Signed Diffie-Hellman Protocol\n\n**Overview:**\nThe Signed Diffie-Hellman protocol is a cryptographic method that allows two parties, A and B, to establish a shared secret key over an insecure channel. The protocol utilizes public key cryptography to ensure the authenticity of the messages exchanged between the two parties. Each participant has a private key (skey) and a corresponding public key (pkey).\n\n**Participants:**\n- **A (Alice)**: One party in the communication, holds a secret key `skA` and its public key `pkA`.\n- **B (Bob)**: The other party in the communication, holds a secret key `skB` and its public key `pkB`.\n\n**Protocol Steps:**\n1. **Key Generation**:\n   - A generates a secret key `skA` and computes its public key `pkA` using the function `pk(skey)`.\n\n2. **Public Key Exchange**:\n   - A sends its public key `pkA` to B over a channel `c`.\n\n3. **Nonce Generation**:\n   - A generates a fresh nonce `n0` (an exponent in the Diffie-Hellman context) and computes a signature on the value `exp(g, n0)` using its secret key `skA`. The message sent to B includes the signed value and A's public key: `{ exp(g, n0) }skA, pkA`.\n\n4. **Response from B**:\n   - B receives the message containing A's signed value and public key. B uses the public key `pkX` (which is `pkA`) to verify the signature. \n   - Upon successful verification, B generates a fresh nonce `n1` and computes the shared key `k` using the received value: `k = exp(exp(g, n0), n1)` (which can also be written as `k = exp(exp(g, n1), n0)` due to the properties of exponentiation).\n   - B then sends back a signed message `{ exp(g, n1) }skB` to A.\n\n5. **Final Message**:\n   - A receives the signed message from B and verifies it using `pkB`. \n   - A then computes the shared key `k` again (the same as B), and sends a secret message `s`, encrypted with the shared key `k`, to B using the encryption function `enc(bitstring, G)`.\n\n**Security Goal**:\n- The protocol aims to ensure that the secret message `s` remains confidential and not accessible by an attacker. The attacker is queried to determine if they can successfully learn the value of `s`.\n\n**Key Functions**:\n- `sign(G, skey)`: Generates a signature for a message `G` using the secret key `skey`.\n- `pk(skey)`: Computes the public key from the secret key.\n- `enc(bitstring, G)`: Encrypts a bitstring using a shared key `G`.\n- `dec(enc(x,y),y)`: Decrypts the encrypted message using the key `y`.\n\n**Conclusion**:\nThis protocol successfully establishes a shared secret key between two parties while ensuring the authenticity of the exchanged messages through digital signatures. The use of nonces helps prevent replay attacks, and the secure exchange of public keys ensures that the parties can derive the same shared key independently.\n\n---",
        "results": [
            true,
            [
                true,
                "RESULT not attacker(s[]) is true.\n",
                0.010365009307861328
            ]
        ]
    },
    {
        "file": "PV-1/sissy_multiparty_agreement_dh.pv",
        "falsecode": "(* Protocol model for Verifiable Credentials and DIDs *)\n\n(* Types *)\ntype host.\ntype nonce.\ntype key.\ntype did.\ntype attribute.\ntype credential.\ntype token.\ntype challenge.\ntype signature.\ntype acr.      (* Access Control Rule *)\n\n(* Channels *)\nfree c: channel.   (* Public channel *)\n\n(* Cryptographic primitives *)\nfun pk(key): key.     (* Public key from secret key *)\nfun aenc(bitstring, key): bitstring.   (* Asymmetric encryption *)\nreduc forall m: bitstring, k: key; adec(aenc(m, pk(k)), k) = m.   (* Asymmetric decryption *)\n\nfun senc(bitstring, key): bitstring.   (* Symmetric encryption *)\nreduc forall m: bitstring, k: key; sdec(senc(m, k), k) = m.   (* Symmetric decryption *)\n\nfun sign(bitstring, key): signature.   (* Digital signature *)\nreduc forall m: bitstring, k: key; verify(sign(m, k), m, pk(k)) = true.   (* Signature verification *)\n\nfun make_credential(host, host, attribute, key): credential.   (* Issuer, Subject, Attribute, IssuerKey *)\nfun make_did(host, key): did.   (* Subject, SubjectKey *)\nfun make_token(host, host): token.   (* Verifier, Subject *)\n\n(* Events for authentication and queries *)\nevent IssuerSendsChallenge(host, host, challenge).\nevent HolderReceivesChallenge(host, host, challenge).\nevent IssuerIssuesCredential(host, host, credential).\nevent HolderReceivesCredential(host, host, credential).\nevent VerifierSendsChallenge(host, host, challenge).\nevent ProverReceivesChallenge(host, host, challenge).\nevent VerifierValidatesCred(host, host, credential, acr).\nevent VerifierIssuesToken(host, host, token).\nevent ProverReceivesToken(host, host, token).\n\n(* Queries *)\n(* Authentication queries *)\nquery h:host, i:host, chal:challenge; \n    event(HolderReceivesChallenge(h, i, chal)) ==> event(IssuerSendsChallenge(i, h, chal)).\n\nquery h:host, i:host, cred:credential; \n    event(HolderReceivesCredential(h, i, cred)) ==> event(IssuerIssuesCredential(i, h, cred)).\n\nquery p:host, v:host, chal:challenge; \n    event(ProverReceivesChallenge(p, v, chal)) ==> event(VerifierSendsChallenge(v, p, chal)).\n\nquery p:host, v:host, tok:token; \n    event(ProverReceivesToken(p, v, tok)) ==> event(VerifierIssuesToken(v, p, tok)).\n\n(* Secrecy queries *)\nfree secretAttribute: attribute [private].\nquery attacker(secretAttribute).\n\n(* Processes *)\n\n(* Issuer Process *)\nlet issuer(issuerID: host, issuerSK: key, issuerPK: key) =\n    (* Receive handshake request from holder *)\n    in(c, (=issuerID, holderID: host));\n    \n    (* Generate challenge *)\n    new challengeI: challenge;\n    \n    (* Send handshake response with challenge and signature *)\n    let sigI = sign((issuerID, holderID, challengeI), issuerSK) in\n    event IssuerSendsChallenge(issuerID, holderID, challengeI);\n    out(c, (challengeI, sigI));\n    \n    (* Receive response with holder's DID *)\n    in(c, (holderDID: did, responseSig: signature, attr: attribute));\n    \n    (* Verify the signature and DID *)\n    let holderDID_valid = make_did(holderID, pk(issuerSK)) in\n    if holderDID = holderDID_valid then\n    \n    (* Issue credential *)\n    let cred = make_credential(issuerID, holderID, attr, issuerSK) in\n    event IssuerIssuesCredential(issuerID, holderID, cred);\n    out(c, cred).\n\n(* Holder/Prover Process *)\nlet holder(holderID: host, holderSK: key, holderPK: key, issuerID: host, issuerPK: key, verifierID: host, verifierPK: key, attr: attribute) =\n    (* Initiate handshake with issuer *)\n    out(c, (issuerID, holderID));\n    \n    (* Receive challenge from issuer *)\n    in(c, (challengeI: challenge, sigI: signature));\n    \n    (* Verify issuer's signature *)\n    if verify(sigI, (issuerID, holderID, challengeI), issuerPK) = true then\n    event HolderReceivesChallenge(holderID, issuerID, challengeI);\n    \n    (* Create DID and send response *)\n    let holderDID = make_did(holderID, holderPK) in\n    let responseSig = sign((holderID, issuerID, challengeI, holderDID), holderSK) in\n    out(c, (holderDID, responseSig, attr));\n    \n    (* Receive credential from issuer *)\n    in(c, cred: credential);\n    event HolderReceivesCredential(holderID, issuerID, cred);\n    \n    (* Initiate handshake with verifier *)\n    out(c, (verifierID, holderID));\n    \n    (* Receive challenge from verifier *)\n    in(c, (challengeV: challenge, sigV: signature));\n    \n    (* Verify verifier's signature *)\n    if verify(sigV, (verifierID, holderID, challengeV), verifierPK) = true then\n    event ProverReceivesChallenge(holderID, verifierID, challengeV);\n    \n    (* Send signed credential and DID to verifier *)\n    let vpSig = sign((holderID, verifierID, challengeV, holderDID, cred), holderSK) in\n    out(c, (holderDID, cred, vpSig));\n    \n    (* Receive access token from verifier *)\n    in(c, tok: token);\n    event ProverReceivesToken(holderID, verifierID, tok).\n\n(* Verifier Process *)\nlet verifier(verifierID: host, verifierSK: key, verifierPK: key, issuerPK: key, acrRule: acr) =\n    (* Receive handshake request from prover *)\n    in(c, (=verifierID, proverID: host));\n    \n    (* Generate challenge *)\n    new challengeV: challenge;\n    \n    (* Send handshake response with challenge and signature *)\n    let sigV = sign((verifierID, proverID, challengeV), verifierSK) in\n    event VerifierSendsChallenge(verifierID, proverID, challengeV);\n    out(c, (challengeV, sigV));\n    \n    (* Receive prover's verifiable presentation *)\n    in(c, (proverDID: did, cred: credential, vpSig: signature));\n    \n    (* Verify the signature and credential *)\n    let expectedDID = make_did(proverID, pk(verifierSK)) in\n    if verify(vpSig, (proverID, verifierID, challengeV, proverDID, cred), pk(verifierSK)) = true then\n    \n    (* Validate credential against access control rule *)\n    (* For simplicity, we'll assume a basic validation *)\n    event VerifierValidatesCred(verifierID, proverID, cred, acrRule);\n    \n    (* Issue access token *)\n    let tok = make_token(verifierID, proverID) in\n    event VerifierIssuesToken(verifierID, proverID, tok);\n    out(c, tok).\n\n(* Main process *)\nprocess\n    (* Generate keys *)\n    new issuerSK: key; let issuerPK = pk(issuerSK) in out(c, issuerPK);\n    new holderSK: key; let holderPK = pk(holderSK) in out(c, holderPK);\n    new verifierSK: key; let verifierPK = pk(verifierSK) in out(c, verifierPK);\n    \n    (* Generate identities *)\n    new issuerID: host; out(c, issuerID);\n    new holderID: host; out(c, holderID);\n    new verifierID: host; out(c, verifierID);\n    \n    (* Generate access control rule *)\n    new acrRule: acr; out(c, acrRule);\n    \n    (* Start processes *)\n    (\n        !issuer(issuerID, issuerSK, issuerPK) |\n        !holder(holderID, holderSK, holderPK, issuerID, issuerPK, verifierID, verifierPK, secretAttribute) |\n        !verifier(verifierID, verifierSK, verifierPK, issuerPK, acrRule)\n    )",
        "falseinfo": "However, the verification results of this file code illustrate that there was a security issue in the targeted protocol. This was a false positive, and there should be no problem with the protocol.",
        "code": "(* This is a ProVerif description of the Protocol Flow from the SISSI architecture. *)\n\n(* --------------------------------------------------------------------------------------------------------- *)\n(* Start Definitions *)\n(* --------------------------------------------------------------------------------------------------------- *)\n\n(* START keys *)\ntype SymmetricKey.\ntype SecretKey.\ntype PublicKey.\nfun pk(SecretKey):PublicKey.\n\nfun pk_b(PublicKey):bitstring.\nfun b_pk(bitstring):PublicKey.\n(* END keys *)\n\n(* START group *)\ntype G.\ntype exponent.\n\nfun exp(G, exponent): G.\nfun g(exponent): G.\nequation forall x: exponent, y: exponent; exp(g(x),y) = exp(g(y),x).\n\nfun GtoSymK(G): SymmetricKey.\n(* END group *)\n\n(* START symmetric encryption *)\nfun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).\nreduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).\n(* END symmetric encryption *)\n\n(* START asymmetric encryption *)\nfun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).\nreduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).\n(* END Asymmetric encryption *)\n\n(* START digital signature *)\nfun sign(bitstring(*the message*), SecretKey):bitstring (*sign the input msg*).\nreduc forall msg:bitstring,sk:SecretKey; auth(sign(msg,sk),pk(sk))=msg (*check signature, and get msg*).\nreduc forall msg:bitstring,sk:SecretKey; getMsg(sign(msg,sk))=msg (*just get msg*).\n(* END digital signature *)\n\n(* ALTERNATIVE model authcrypt directly as a set of corresponding funcs and reducs...*)\nletfun authcrypt(msg:bitstring,sk:SecretKey,pk:PublicKey) = aenc(sign(msg,sk),pk).\nletfun authdecrypt(cipher:bitstring,sk:SecretKey,pk:PublicKey) = auth(adec(cipher,sk),pk).\n(* ALTERNATIVE model authcrypt directly as a set of corresponding funcs and reducs...*)\n\n(* START DID *)\ntype DID.\nfun genDID(PublicKey,SecretKey(*such that DID can not be inferred by others*)):DID.\nreduc forall sk:SecretKey; getPubKey(genDID(pk(sk),sk)) = pk(sk). (* as of page 129 of manual *)\n(* this implies that a DID may only be associated to only one pubKey, which is not true => model as table*)\n(* but tables do not seem to be publically available? as of page 41 of manual *)\nfun b_DID(bitstring):DID.\nfun DID_b(DID):bitstring.\n(* END DID *)\n\n(* START credential *)\ntype VC.\nfun issueVC(DID(*the subject*),bitstring(*the attribute*),SecretKey(*for issuer DID and signing*)):VC.\nreduc forall subject:DID,attr:bitstring,issuerSk:SecretKey; verify(issueVC(subject,attr,issuerSk),pk(issuerSk))=(subject,attr,genDID(pk(issuerSk),issuerSk)).\nreduc forall subject:DID,attr:bitstring,issuerSk:SecretKey; getIssuerFromVC(issueVC(subject,attr,issuerSk))=genDID(pk(issuerSk),issuerSk).\nreduc forall subject:DID,attr:bitstring,issuerSk:SecretKey; getAttrFromVC(issueVC(subject,attr,issuerSk))=attr.\nreduc forall subject:DID,attr:bitstring,issuerSk:SecretKey; getSubjectFromVC(issueVC(subject,attr,issuerSk))=subject.\nreduc forall subject:DID,attr:bitstring,issuerSk:SecretKey; getVcAsTuple(issueVC(subject,attr,issuerSk))= (subject,attr,genDID(pk(issuerSk),issuerSk)).\n(* do table for (attr,issuerDID) lookup*)\n(* for now use if then *)\n(* END credential *)\n\n(* START access control rule (ACR) *)\ntype ACR. (*access control rule*)\nfun makeRule(DID(*the subject*),bitstring(*the attribute*),DID(*the issuer*)):ACR. (* technically, the subject is dynamically injected or when unknown an implicit placeholder in the rule; but for the sake of simplicity we omit that technical detail.*)\nreduc forall subject:DID,attr:bitstring,issuer:DID; getIssuerFromRule(makeRule(subject,attr,issuer))=issuer.\nreduc forall subject:DID,attr:bitstring,issuer:DID; getAttrFromRule(makeRule(subject,attr,issuer))=attr.\nreduc forall subject:DID,attr:bitstring,issuer:DID; getSubjectFromRule(makeRule(subject,attr,issuer))=subject.\nreduc forall subject:DID,attr:bitstring,issuer:DID; getRuleAsTuple(makeRule(subject,attr,issuer))=(subject,attr,issuer).\n(* END access control rule *)\n\n(*DEFS*)\nfree h:channel.\nconst attr:bitstring.\nconst uri:bitstring.\n\nfun ch(bitstring): channel.\nfun chC(VC): channel.\nfun chR(ACR): channel.\nfun chS(SymmetricKey):channel.\n\nfree n_p_fromHolder: bitstring [private].\nfree n_i_fromHolder: bitstring [private].\nfree providingDID_fromHolder: bitstring [private]. \nfree cred_fromHolder: bitstring [private].\n\nfree n_p_fromIssuer: bitstring [private].\nfree credIssuing_fromIssuer_notMeaningful: bitstring [private]. \nfree cred_fromIssuer: bitstring [private].\n\nfree n_p_fromProver: bitstring [private].\nfree rule_fromProver: bitstring [private].\nfree unsigned_vp_fromProver: bitstring [private].\nfree vp_fromProver: bitstring [private].\nfree cred_fromProver: bitstring [private].\nfree access_token_fromProver: bitstring [private].\nfree K_private_fromProver:bitstring [private].\n\nfree n_p_fromVerifier: bitstring [private].\nfree rule_fromVerifier: bitstring [private].\nfree credRequest_fromVerifier: bitstring [private].\nfree unauth_vp_fromVerifier: bitstring [private].\nfree vp_fromVerifier: bitstring [private].\nfree cred_fromVerifier: bitstring [private].\nfree access_token_fromVerifier: bitstring [private].\nfree K_private_fromVerifier:bitstring [private].\n\n\n(* Authentication *)\nevent auth_VerifierSendsLastMessageToProver(G,bitstring,bitstring,bitstring,bitstring, bitstring).\nevent auth_ProverCompletesProtocol(G,bitstring,bitstring,bitstring,bitstring, bitstring).\nevent auth_ProverSendsLastMessageToVerifier(G,bitstring,bitstring,bitstring, bitstring).\nevent auth_VerifierCompletesProtocol(G,bitstring,bitstring,bitstring, bitstring).\n\nevent auth_IssuerSendsLastMessageToHolder(G,bitstring,bitstring,bitstring).\nevent auth_HolderCompletesProtocol(G,bitstring,bitstring,bitstring).\nevent auth_HolderSendsLastMessageToIssuer(G,bitstring,bitstring).\nevent auth_IssuerCompletesProtocol(G,bitstring,bitstring).\n\nevent auth_ProverSendsLastMessageToVerifierInProtocolFull(G,bitstring,bitstring,bitstring,G, bitstring, bitstring,bitstring,bitstring).\n\n(* --------------------------------------------------------------------------------------------------------- *)\n(* End Definitions *)\n(* Start Agents *)\n(* --------------------------------------------------------------------------------------------------------- *)\n\n\n\n  (**)\n  (**)\n  (**)\n  (**)\n  (* Part 2 - Prover - Verifier *)\n  (**)\n  (**)\n  (**)\n  (**)\n\n\n\n(** START Prover **)\nlet prover(sk:SecretKey, cred:VC, verifierDID:DID, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =\n    \n    (* Treatment *)\n    new x:exponent;\n    let gx = g(x) in\n    let msg_handshakeReq = gx in\n\n    (* === Message 1 [->] *)\n    out(h,msg_handshakeReq);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 2 [<-] *)\n    in(h,(gy:G,m:bitstring));\n\n    (* Treatment *)\n    let msg_handshakeResp = (gy,m) in\n    let K = GtoSymK(exp(gy,x)) in\n    let pk_v = getPubKey(verifierDID) in\n    if (dec(auth(m,pk_v),K)) = (gy,gx) then\n    let msg_uri = (enc(sign((gx,gy),sk),K),enc(pk_b(pk(sk)),K)) in\n\n    (* === Message 3 [->] *)\n    out(h,msg_uri);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 4 [<-] *)\n    in(h,x:bitstring); (* receive msg *)\n\n    (* Treatment *)\n    let msg_rule = x in\n    let msg = dec(x,K) in (* authdecrypt msg *)\n    let (n_c:bitstring,rule:ACR) = msg in (* deconstruct msg=(n_c,r) *)\n    if getVcAsTuple(cred) = getRuleAsTuple(rule) then (* TODO lookup *) (* lookup credential *)\n    let vp = sign((n_c,verifierDID,cred),sk) in (* create Verifiable Presentation *)\n    let msg_vp = enc(vp,K) in (* send authcrypt msg /w VP *)\n    event auth_ProverSendsLastMessageToVerifier(msg_handshakeReq,msg_handshakeResp,msg_uri,msg_rule,msg_vp); (* event_just_before_the_last_send_message_of_S  *)\n\n    (* === Message 5 [->] *) \n    out(h, msg_vp);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 6 [<-] *)\n    in(h,x:bitstring);\n\n    (* Treatment *)\n    let msg_accessToken = x in\n    let (access_token:bitstring, recipientDID:DID) = dec(x,K) in \n    if recipientDID = genDID(pk(sk),sk) then\n    \n    (* event received_access_token; and I am the recipient, Prover about to complete protocol! *)\n\n    (* --------------------------------------------------------------------------------------- *)\n    (* Dishonest Agent *)\n\n    if talksOnlyToHonest then\n    (* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks *)\n    event auth_ProverCompletesProtocol(msg_handshakeReq,msg_handshakeResp,msg_uri,msg_rule,msg_vp, msg_accessToken) |\n    (* checks if m is secret where the second argument is the dummy the query looks for*)\n    out(chR(rule),rule_fromProver) |\n    out(ch((n_c,verifierDID,cred)), unsigned_vp_fromProver) |\n    out(ch(vp), vp_fromProver) |\n    out(chC(cred),cred_fromProver) |\n    out(ch(access_token),access_token_fromProver);\n    out(chS(K),K_private_fromProver);\n    0.\n(** END Prover **)\n\n\n(** START Verifier **)\nlet verifier(sk:SecretKey, rule:ACR, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =\n\n    (**)\n    (**)\n    (**)\n    (* === Message 1 [<-] *)\n    in(h,gx:G);\n\n    (* Treatment *)\n    let msg_handshakeReq = gx in\n    new y:exponent;\n    let gy = g(y) in\n    let K = GtoSymK(exp(gx,y)) in\n    let msg_handshakeResp = (gy,enc(sign((gy,gx),sk),K)) in\n\n    (* === Message 2 [->] *)\n    out(h,msg_handshakeResp);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 3 [<-] *)\n    in(h,(m:bitstring,e_pk:bitstring));\n\n    (* Treatment *)\n    let msg_uri = (m,e_pk) in\n    let pk_p = b_pk(dec(e_pk,K)) in\n    if (dec(auth(m,pk_p),K)) = (gx,gy) then\n    new n_c:bitstring;\n    let msg = (n_c,rule) in\n    let msg_rule = enc(msg,K) in\n\n    (* === Message 4 [->] *)\n    out(h, msg_rule);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 5 [<-] *)\n    in(h,x:bitstring);\n\n    (* Treatment *)\n    let msg_vp = x in\n    let unauth_vp = dec(x,K) in \n    let (unauth_n'_c:bitstring,unauth_recipient:DID,unauth_cred:VC) = getMsg(unauth_vp) in (* deconstruct vp=(n_c,cred) *)\n    let cred_subject = getSubjectFromVC(unauth_cred) in (*get subject *)\n    if cred_subject = getSubjectFromRule(rule) then (* check if subject match from cred and rule *) (* delete if you do not want the specificy*) (* where prover p is the expected type of agent, i.e. honest*)\n    let pk_subject = getPubKey(cred_subject) in (* get subject pubkey *)\n    let (n'_c:bitstring,recipientDID:DID,cred:VC) = auth(unauth_vp,pk_subject) in (* authenticate VP *)\n    if recipientDID = genDID(pk(sk),sk) then (* check if verifier is actual recipient*)\n    if n'_c = n_c then (* check nonce *)\n    if getIssuerFromVC(cred) = getIssuerFromRule(rule) then (* check if issuers match from cred and rule *)\n    let (subjectDID:DID,asserted_attr:bitstring,issuerDID:DID) = verify(cred,getPubKey(getIssuerFromVC(cred))) in (* check cred integrity *)\n    if asserted_attr = getAttrFromRule(rule) then (* check if attribute match from cred and rule *)\n    new access_token:bitstring; (* mint new access token *)\n    let msg = (access_token,subjectDID) in\n    let msg_accessToken = enc(msg,K) in\n    event auth_VerifierSendsLastMessageToProver(msg_handshakeReq,msg_handshakeResp,msg_uri,msg_rule,msg_vp, msg_accessToken); (* event_just_before_the_last_send_message_of_S  *)\n\n    (* === Message 6 [->] *)\n    out(h, msg_accessToken);\n\n    (* --------------------------------------------------------------------------------------- *)\n    (* Dishonest Agent *)\n\n    if talksOnlyToHonest then\n    (* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks *)\n    event auth_VerifierCompletesProtocol(msg_handshakeReq,msg_handshakeResp,msg_uri,msg_rule,msg_vp) |\n    (* checks if m is secret where the second argument is the dummy the query looks for*)\n    out(chR(rule), rule_fromVerifier) |\n    out(ch((n_c,rule)), credRequest_fromVerifier) |\n    out(ch(unauth_vp),unauth_vp_fromVerifier) |\n    out(ch((n'_c,recipientDID,cred)),vp_fromVerifier) |\n    out(chC(cred),cred_fromVerifier) |\n    out(ch(access_token),access_token_fromVerifier);\n    out(chS(K),K_private_fromVerifier);\n    0.\n(** END Verifier **)\n\n\n  (**)\n  (**)\n  (**)\n  (**)\n  (* Part 1 - Issuer - Holder (i.e. Prover in part 2) *)\n  (**)\n  (**)\n  (**)\n  (**)\n\n\n(** START Holder/Prover **)\nlet holder(sk:SecretKey, issuerDID:DID, verifierDID:DID, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =\n\n    (* Treatment *)\n    new x:exponent;\n    let gx = g(x) in\n    let msg_handshakeReq = gx in\n\n    (* === Message 1 [->] *)\n    out(h,msg_handshakeReq);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 2 [<-] *)\n    in(h,(gy:G,m:bitstring));\n\n    (* Treatment *)\n    let msg_handshakeResp = (gy,m) in\n    let K = GtoSymK(exp(gy,x)) in\n    let pk_i = getPubKey(issuerDID) in\n    if (dec(auth(m,pk_i),K)) = (gy,gx) then\n    let msg_did = (enc(sign((gx,gy),sk),K),enc(DID_b(genDID(pk(sk),sk)),K),enc(DID_b(issuerDID),K)) in \n\n    (* === Message 3 [->] *)\n    out(h,msg_did);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 4 [<-] *)\n\n    (* receive msg *)\n    in(h,x:bitstring);\n    (* authdecrypt msg *)\n    let msg_credential = x in\n    (* let (credential:VC, recipientDID:DID, n_strongSecrecy:bitstring) = authdecrypt(x,ssk,spk_i) in  *)\n    let (credential:VC, recipientDID:DID) = dec(x,K) in \n    if recipientDID = genDID(pk(sk),sk) then\n    if getIssuerFromVC(credential) = issuerDID then\n    (* TODO validate credential *)\n    (* event received_access_token; and I am the recipient *)\n    (* Prover about to complete protocol! *)\n\n    (* !prover(sk, credential, verifierDID, talksOnlyToHonest, msg_handshakeReq,msg_handshakeResp,msg_did,msg_credential) | *)\n   \n    (* phase 1 ; *)\n\n    (* --------------------------------------------------------------------------------------- *)\n    (* Dishonest Agent *)\n\n    if talksOnlyToHonest then\n    (* ( event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks ) *)\n    event auth_HolderCompletesProtocol(msg_handshakeReq,msg_handshakeResp,msg_did,msg_credential) | \n    (* checks if m is secret where the second argument is the dummy the query looks for*)\n    (* out(ch(n_p),n_p_fromHolder) | *)\n    (* out(ch(n_i),n_i_fromHolder) | *)\n    (* out(ch((n_i,genDID(pk(sk),sk),issuerDID)), providingDID_fromHolder) |  *)\n    (* DID alone is public knowledge *)\n    out(chC(credential),cred_fromHolder); (*currently public anyway...?*)\n    0.\n\n    \n(** END Holder/Prover **)\n\n(** START Issuer **)\nlet issuer(sk:SecretKey, attr:bitstring, expectedDID:DID, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =\n\n    (**)\n    (**)\n    (**)\n    (* === Message 1 [<-] *)\n    in(h,gx:G);\n\n    (* Treatment *)\n    let msg_handshakeReq = gx in\n    new y:exponent;\n    let gy = g(y) in\n    let K = GtoSymK(exp(gx,y)) in\n    let msg_handshakeResp = (gy,enc(sign((gy,gx),sk),K)) in\n\n    (* === Message 2 [->] *)\n    out(h,msg_handshakeResp);\n\n    (**)\n    (**)\n    (**)\n    (* === Message 3 [<-] *)\n    in(h,(m:bitstring,proverDID:DID,recipientDID:DID));\n\n    (* Treatment *)\n    let msg_did = (m,proverDID,recipientDID) in\n    let pk_h = getPubKey(proverDID) in\n    if (dec(auth(m,pk_h),K)) = (gx,gy) then\n\n    if proverDID = expectedDID then(*this is just for proverif, to model it s.t. secrecy check is only executed when proverDID is expceted. nobody cares if attacker knows some message that was explicitly and knowingly send to the attacker.*)\n    (* check if issuer is actual recipient*)\n    if recipientDID = genDID(pk(sk),sk) then\n\n    (* issue new credential *)\n    let cred = issueVC(proverDID, attr, sk) in\n    (* new n_strongSecrecy:bitstring; *)\n    (* let msg = (cred,proverDID,n_strongSecrecy) in *)\n    let msg = (cred,proverDID) in\n    let msg_cred = enc(msg,K) in\n    (* event_just_before_the_last_send_message_of_S *)\n    event auth_IssuerSendsLastMessageToHolder(msg_handshakeReq,msg_handshakeResp,msg_did,msg_cred);\n\n    (* === Message 4 [->] *)\n    out(h, msg_cred);\n\n    (* phase 1 ; *)\n\n    (* --------------------------------------------------------------------------------------- *)\n    (* Dishonest Agent *)\n\n    if talksOnlyToHonest then\n    (* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks *)\n    event auth_IssuerCompletesProtocol(msg_handshakeReq,msg_handshakeResp,msg_did) | \n    (* checks if m is secret where the second argument is the dummy the query looks for*)\n    (* out(ch(n_p),n_p_fromIssuer) | *)\n    out(chC(cred),cred_fromIssuer) | (* currently public anyway ...? *)\n    (* out(ch((cred,proverDID,n_strongSecrecy)),credIssuing_fromIssuer_notMeaningful); *)\n    out(ch((cred,proverDID)),credIssuing_fromIssuer_notMeaningful);\n    0.\n(** END Issuer **)\n\n(* --------------------------------------------------------------------------------------------------------- *)\n(* End Agents *)\n(* Start Assumptions *)\n(* --------------------------------------------------------------------------------------------------------- *)\n\n(* SECRECY *)\n\n\nquery attacker(n_p_fromHolder).\nquery attacker(n_i_fromHolder).\nquery attacker(providingDID_fromHolder). (* should be private, it is a message that includes prover did*)\n(*query attacker(cred_fromHolder). *) (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)\n\nquery attacker(n_p_fromIssuer).\nquery attacker(credIssuing_fromIssuer_notMeaningful). (* should be private, it is a message that includes credential*)\n(* using the n_strongSecrecy is actually a privacy thing, we modified the protocol by introducing it, which is not the way to go. *)\n(*query attacker(cred_fromIssuer).*)  (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)\n\nquery attacker(n_p_fromProver).\nquery attacker(unsigned_vp_fromProver). (* should be private, it is a message that includes credential, redundant i think*)\nquery attacker(vp_fromProver).    (* should be private, it is a message that includes credential*)\nquery attacker(cred_fromProver).  (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)\n(*I have no idea, why this cred_fromProver is not triggered but the other cred_x are...*)\nquery attacker(access_token_fromProver). (* should be private, even with the credential leaked (this is the actual token, not the message containing it) *)\nquery attacker(K_private_fromProver).\n\nquery attacker(n_p_fromVerifier). \nquery attacker(rule_fromVerifier). (* basically public, as it is discoverable by an attacker by simply asking the verifier*)\nquery attacker(credRequest_fromVerifier). (* should be private, it is a message includes rule*)\nquery attacker(unauth_vp_fromVerifier). (* should be private, it is a message that includes credential, redundant i think*)\nquery attacker(vp_fromVerifier). (* should be private, it is a message that includes credential*)\nquery attacker(cred_fromVerifier). (* can be leaked in our model, as the prover explicitly/knowlingly talks to otherAgent (attacker) trying to authenticate with them (dishonest verifier) *)\nquery attacker(access_token_fromVerifier). (* should be private, even with the credential leaked (this is the actual token, not the message containing it) *)\nquery attacker(K_private_fromVerifier).\n\n(* AUTHETNICATION *)\n\n(* event_at_the_very_end_of_role_R_in_parallel_with_secrecy_checks\n==> \nevent_just_before_the_last_send_message_of_S *)\n\nquery  m_handshakeReq:G, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_accessToken:bitstring; \n    inj-event(auth_ProverCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp, m_accessToken))\n    ==>\n    inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp, m_accessToken)) .\n\n\nquery  m_handshakeReq:G, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring; \n    inj-event(auth_VerifierCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))\n    ==>\n    inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp)) .\n\n\nquery  m_handshakeReq:G, m_handshakeResp:bitstring, m_did:bitstring, m_cred:bitstring; \n    inj-event(auth_HolderCompletesProtocol(m_handshakeReq, m_handshakeResp, m_did, m_cred))\n    ==>\n    inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq, m_handshakeResp, m_did, m_cred)) .\n\n\nquery  m_handshakeReq:G, m_handshakeResp:bitstring, m_did:bitstring; \n    inj-event(auth_IssuerCompletesProtocol(m_handshakeReq, m_handshakeResp,  m_did))\n    ==>\n    inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq, m_handshakeResp, m_did)) .\n\n(* inj-agreement will not work, expected, since re-use of credentials issued once for multiple provings *)\nquery  m_handshakeReq:G, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_handshakeReq_2:G, m_handshakeResp_2:bitstring, m_did:bitstring, m_cred:bitstring; \n    inj-event(\n        auth_VerifierCompletesProtocol(\n                m_handshakeReq, \n                m_handshakeResp, \n                m_uri, \n                m_rule, \n                m_vp))\n    ==>\n    inj-event(\n        auth_ProverSendsLastMessageToVerifier(\n                m_handshakeReq, \n                m_handshakeResp, \n                m_uri, \n                m_rule, \n                m_vp)) \n    &&\n    inj-event(\n        auth_IssuerSendsLastMessageToHolder(\n                m_handshakeReq_2, \n                m_handshakeResp_2, \n                m_did, \n                m_cred)) \n    &&\n    inj-event(\n        auth_HolderCompletesProtocol(\n                m_handshakeReq_2, \n                m_handshakeResp_2, \n                m_did, \n                m_cred))\n    .\n\n(* this should hold, \"for every proving, there must be an issuing\" *)\nquery  m_handshakeReq:G, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_handshakeReq_2:G, m_handshakeResp_2:bitstring, m_did:bitstring, m_cred:bitstring; \n    event(auth_VerifierCompletesProtocol(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))\n    ==>\n    event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2, m_handshakeResp_2, m_did, m_cred)) \n    &&\n    event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2, m_handshakeResp_2, m_did, m_cred, m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp))\n    .\n\n(* --------------------------------------------------------------------------------------------------------- *)\n(* End Assumptions *)\n(* Start Main *)\n(* --------------------------------------------------------------------------------------------------------- *)\n\nfree sk_otherAgent:SecretKey. (*other agent may or may not be honest, but we don't know*)\nprocess (*use root process for setup *)\n    (*declare secret keys*)\n    new sk_prover:SecretKey;\n    new sk_verifier:SecretKey;\n    new sk_issuer:SecretKey;\n    (*advertise public keys*)\n    out(h,pk(sk_issuer));\n    out(h,pk(sk_verifier));\n    out(h,pk(sk_prover));\n    (*advertise DIDs*)\n    out(h,genDID(pk(sk_prover),sk_prover));\n    out(h,genDID(pk(sk_verifier),sk_verifier));\n    out(h,genDID(pk(sk_issuer),sk_issuer));\n    \n    (*assume issuer verified prover for attribute*)\n    (* credential = ( (DID_prover, attriubte, DID_issuer), signature_issuer ) *)\n    (* let cred = issueVC(  genDID(pk(sk_prover),sk_prover),   attr,    sk_issuer   ) \n    let cred_otherAgent = issueVC(  genDID(pk(sk_otherAgent),sk_otherAgent),   attr,    sk_issuer   ) in \n    out(h,cred_otherAgent); *)\n\n    (*assume verifier trusts issuer for asserting attribute*)\n    (* rule = (DID_prover , attribute , DID_issuer) *)\n    let acr = makeRule(  genDID(pk(sk_prover),sk_prover),   attr,   genDID(pk(sk_issuer),sk_issuer)  ) in (* where prover p is honest agent*)\n    let acr_otherAgent = makeRule(  genDID(pk(sk_otherAgent),sk_otherAgent),   attr,   genDID(pk(sk_issuer),sk_issuer)  ) in (* where other agent may or may not be dishonest*)\n    let acr_compromisedIssuer = makeRule(  genDID(pk(sk_prover),sk_prover),   attr,   genDID(pk(sk_otherAgent),sk_otherAgent)  ) in\n    let acr_compromised = makeRule(  genDID(pk(sk_otherAgent),sk_otherAgent),   attr,   genDID(pk(sk_otherAgent),sk_otherAgent)  ) in\n\n    (*let agents dance*)\n    (\n    (\n        !issuer(sk_issuer, attr, genDID(pk(sk_prover),sk_prover), true)\n    |   \n        !issuer(sk_issuer, attr, genDID(pk(sk_otherAgent),sk_otherAgent), false)\n    |\n        !holder(sk_prover,  genDID(pk(sk_issuer),sk_issuer), genDID(pk(sk_verifier),sk_verifier), true)\n    |\n        !holder(sk_prover,  genDID(pk(sk_issuer),sk_issuer), genDID(pk(sk_otherAgent),sk_otherAgent), false) \n    |\n        !holder(sk_prover,  genDID(pk(sk_otherAgent),sk_otherAgent), genDID(pk(sk_verifier),sk_verifier), false) \n    |\n        !holder(sk_prover,  genDID(pk(sk_otherAgent),sk_otherAgent), genDID(pk(sk_otherAgent),sk_otherAgent), false) \n    |\n        !verifier(sk_verifier, acr, true) \n    | \n        !verifier(sk_verifier, acr_otherAgent, false)\n    | \n        !verifier(sk_verifier, acr_compromisedIssuer, false) \n    | \n        !verifier(sk_verifier, acr_compromised, false) \n    ) \n  \n    \n    )\n\n(* --------------------------------------------------------------------------------------------------------- *)\n(* End Main *)\n(* --------------------------------------------------------------------------------------------------------- *)",
        "logic": "### Protocol Overview\n\nThe protocol is designed to support verifiable credentials and decentralized identifiers (DIDs) within a framework that involves multiple agents: the **Issuer**, **Holder/Prover**, and **Verifier**. The protocol facilitates the issuance, verification, and use of credentials in a secure manner.\n\n#### Key Components\n\n1. **Keys and Cryptography:**\n   - **Symmetric Key:** Used for symmetric encryption and decryption of messages.\n   - **Secret Key and Public Key:** Used for asymmetric encryption and digital signatures.\n   - **DIDs:** Represent decentralized identifiers for agents.\n\n2. **Credential:** \n   - **Verifiable Credentials (VC):** Issued by the issuer to the holder, containing attributes that can be used for identification or authentication.\n\n3. **Access Control Rule (ACR):** \n   - Defines the conditions under which a subject can be verified based on their attributes.\n\n#### Roles and Message Flow\n\n1. **Holder/Prover Role:**\n   - Initiates the protocol by sending a handshake request to the Issuer.\n   - Receives a handshake response from the Issuer containing a challenge.\n   - Sends a message with the signed DID and the credential received from the Issuer to the Verifier.\n   - Receives an access token from the Verifier after validating the credential against the access control rule.\n\n2. **Issuer Role:**\n   - Receives a handshake request from the Holder.\n   - Responds with a handshake response containing a challenge and a signature.\n   - Validates the Holder's response and issues a credential if the conditions are met.\n\n3. **Verifier Role:**\n   - Receives a handshake request from the Prover.\n   - Sends a handshake response containing a challenge.\n   - Validates the Prover's verifiable presentation (VP) against the access control rule and issues an access token if valid.\n\n#### Protocol Messages\n\n- **Message 1 (Handshake Request):** The Holder sends the first message to the Issuer or Verifier.\n- **Message 2 (Handshake Response):** The Issuer or Verifier responds with a challenge and a signature.\n- **Message 3 (Credential and DID):** The Holder sends the signed credential and DID to the Verifier.\n- **Message 4 (Access Token):** The Verifier sends an access token back to the Holder after validation.\n\n#### Secrecy and Authentication Queries\n\nThe protocol includes queries that check for the secrecy of certain variables and the validity of the authentication process. These queries help ensure that sensitive information remains confidential and that the protocol operates correctly.\n\n### Generating the Corresponding ProVerif File\n\nTo create a new ProVerif file based on this description:\n\n1. **Define Types and Functions:** Start by defining the necessary types (e.g., `SecretKey`, `PublicKey`, `DID`, etc.) and functions for cryptographic operations (e.g., encryption, decryption, signing).\n\n2. **Specify Agents:** Implement the `prover`, `verifier`, and `issuer` processes, outlining how they interact through message exchanges.\n\n3. **Handle Messages:** Implement the message handling logic as described in the flow above, including encryption, signing, and validation steps.\n\n4. **Set up Assumptions:** Define queries for secrecy and authentication to ensure that the protocol adheres to security requirements.\n\n5. **Create a Main Process:** Establish a main process that initializes the keys, creates instances of each agent, and orchestrates the protocol flow.",
        "results": [
            true,
            [
                true,
                "RESULT not attacker(n_p_fromHolder[]) is true.\nRESULT not attacker(n_i_fromHolder[]) is true.\nRESULT not attacker(providingDID_fromHolder[]) is true.\nRESULT not attacker(n_p_fromIssuer[]) is true.\nRESULT not attacker(credIssuing_fromIssuer_notMeaningful[]) is true.\nRESULT not attacker(n_p_fromProver[]) is true.\nRESULT not attacker(unsigned_vp_fromProver[]) is true.\nRESULT not attacker(vp_fromProver[]) is true.\nRESULT not attacker(cred_fromProver[]) is true.\nRESULT not attacker(access_token_fromProver[]) is true.\nRESULT not attacker(K_private_fromProver[]) is true.\nRESULT not attacker(n_p_fromVerifier[]) is true.\nRESULT not attacker(rule_fromVerifier[]) is true.\nRESULT not attacker(credRequest_fromVerifier[]) is true.\nRESULT not attacker(unauth_vp_fromVerifier[]) is true.\nRESULT not attacker(vp_fromVerifier[]) is true.\nRESULT not attacker(cred_fromVerifier[]) is true.\nRESULT not attacker(access_token_fromVerifier[]) is true.\nRESULT not attacker(K_private_fromVerifier[]) is true.\nRESULT inj-event(auth_ProverCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) ==> inj-event(auth_VerifierSendsLastMessageToProver(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accessToken)) is true.\nRESULT inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) is true.\nRESULT inj-event(auth_HolderCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did,m_cred)) ==> inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq,m_handshakeResp,m_did,m_cred)) is true.\nRESULT inj-event(auth_IssuerCompletesProtocol(m_handshakeReq,m_handshakeResp,m_did)) ==> inj-event(auth_HolderSendsLastMessageToIssuer(m_handshakeReq,m_handshakeResp,m_did)) is true.\nRESULT inj-event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> inj-event(auth_ProverSendsLastMessageToVerifier(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) && inj-event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && inj-event(auth_HolderCompletesProtocol(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) is true.\nRESULT event(auth_VerifierCompletesProtocol(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) ==> event(auth_IssuerSendsLastMessageToHolder(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred)) && event(auth_ProverSendsLastMessageToVerifierInProtocolFull(m_handshakeReq_2,m_handshakeResp_2,m_did,m_cred,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp)) is true.\n",
                2.001319408416748
            ]
        ]
    }
]