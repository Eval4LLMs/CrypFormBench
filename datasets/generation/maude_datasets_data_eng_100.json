[
    {
        "file": "MAUDE-1/Denning-Sacco.maude",
        "logic": "---\n\n### Denning Sacco Protocol Description\n\n#### Overview\nThe Denning Sacco Protocol is a cryptographic protocol designed to facilitate secure communication between two users, Alice and Bob, through a trusted server. It employs public key encryption and session keys to ensure confidentiality and authentication during message exchanges.\n\n#### Participants\n1. **Alice (A)**: A user who initiates communication.\n2. **Bob (B)**: A user who receives messages from Alice.\n3. **Server (S)**: A trusted third party that facilitates the key exchange and communication between Alice and Bob.\n\n#### Key Components\n- **Keys**: \n  - **Master Key (mkey)**: A key associated with each user and the server, used for encryption and decryption of messages.\n  - **Session Key (seskey)**: A temporary key generated for a specific session between Alice and Bob.\n- **Nonces**: Random values generated during the protocol execution to ensure freshness and prevent replay attacks.\n- **Messages**: Encrypted and concatenated messages exchanged between the participants.\n\n#### Protocol Steps\n1. **Initial Setup**: \n   - Both Alice and Bob generate their respective Master Keys with the server's help.\n   - The server can derive the Master Key for communication with either Alice or Bob.\n   \n2. **Alice Initiates Communication**:\n   - Alice sends a message to the server containing her identity (A) and Bob's identity (B).\n   - This initiates the process of establishing a session key between Alice and Bob.\n\n3. **Server Responds**:\n   - The server generates a session key for Alice and Bob and sends an encrypted message back to Alice. This message includes:\n     - The session key.\n     - A timestamp (to prevent replay attacks).\n     - An additional encrypted message for Bob.\n\n4. **Bob Receives the Message**:\n   - Bob receives the encrypted message intended for him and uses his Master Key to decrypt it, obtaining the session key and the necessary information to communicate with Alice.\n\n5. **Alice and Bob Communicate**:\n   - After establishing a session key, Alice and Bob can securely exchange messages using this session key, ensuring confidentiality and integrity.\n\n#### Security Properties\n- **Confidentiality**: Messages are encrypted using keys, ensuring that only the intended recipient can read them.\n- **Authentication**: The use of Master Keys allows both users to verify the identity of each other through the server.\n- **Freshness**: Nonces are used to prevent replay attacks by ensuring that old messages cannot be reused in the session.\n\n#### Notation in Maude-NPA\n- `mkey(A, S)`: Denotes the Master Key for Alice with the server.\n- `seskey(A, B, nonce)`: Represents the Session Key for communication between Alice and Bob, with a nonce for freshness.\n- `e(key, message)`: Represents the encryption of a message using a specified key.\n- `d(key, message)`: Represents the decryption of a message using a specified key.\n- Concatenation of messages is denoted by `_ ; _`.\n\nThis structure encompasses the essential elements and processes of the Denning Sacco Protocol, guiding the construction of the corresponding Maude file for simulation and analysis using the Maude-NPA tool.\n\n---",
        "results": [
            true,
            [
                true,
                "\\||||||||||||||||||/\n\t\t   --- Welcome to Maude ---\n\t\t     /||||||||||||||||||\\\n\t    Maude 2.7++ built: Sep  9 2014 14:55:11\n\t    With additional hooks \n\t    Copyright 1997-2014 SRI International\n\t\t   Wed May 21 12:40:03 2025\n\n\t    Maude-NPA Version:  March 12th 2015\n\t    with direct composition and irreducibility constraints\n\t    (To be run with Maude alpha104 or above)\n\t    Copyright (c) 2015, University of Illinois\n\t    All rights reserved.\n\n Commands:\n red unification? .           for getting the unification algorithm\n red genGrammars .            for generating grammars\n red run(X,Y).                for Y backwards analysis steps for attack pattern\n    X\n red summary(X,Y).            for summary of analysis steps\n red initials(X,Y).           for showing only initial steps\n==========================================\nreduce in MAUDE-NPA : run(0) .\nrewrites: 6866858 in 7848ms cpu (7845ms real) (874981 rewrites/second)\nresult IdSystem: < 1 > \n:: r:Fresh,r':Fresh ::\n[ nil, \n   -(a ; b), \n   +(e(mkey(a, s), b ; seskey(a, b, n(s, r:Fresh)) ; t(s, r':Fresh) ; e(mkey(b,\n    s), a ; seskey(a, b, n(s, r:Fresh)) ; t(s, r':Fresh)))) | nil] \n|| \nseskey(a, b, n(s, r:Fresh)) inI\n|| \nnil\n|| \nnil\n|| \nnil\n==========================================\nreduce in MAUDE-NPA : initials(0,5) .\nrewrites: 22831603 in 26820ms cpu (26822ms real) (851290 rewrites/second)\nresult IdSystemSet: (empty).IdSystemSet\nBye.",
                35.68860983848572
            ]
        ]
    },
    {
        "file": "MAUDE-1/maa-crc.maude",
        "logic": "## Protocol Description\n\n### Overview\nThe protocol defined in the provided Maude file is a cryptographic protocol designed for secure message authentication. The protocol makes use of various cryptographic primitives, including block operations, bitwise operations, and modular arithmetic to compute a Message Authentication Code (MAC). The operations are structured to ensure integrity and authenticity of messages being transmitted.\n\n### Key Components\n1. **Data Types**:\n   - **Bits**: Basic units of information represented by `x0` (0) and `x1` (1).\n   - **Octets**: 8-bit blocks constructed from bits using `buildOctet`.\n   - **Blocks**: Larger data units (composed of multiple octets) constructed with `buildBlock`.\n   - **Messages**: Sequences of blocks that can be constructed using `unitMessage` and `consMessage`.\n   - **Keys**: Cryptographic keys which are constructed from blocks using `buildKey`.\n\n2. **Arithmetic Operations**:\n   - Operations such as addition (`addBit`, `addOctet`, `addBlock`), logical operations (`andBit`, `orBit`, `xorBit`), and comparison operations (`eqBit`, `eqOctet`, etc.) are defined to manipulate bits, octets, and blocks accordingly.\n\n3. **Message Handling**:\n   - Messages can be segmented using `splitSegment` and `cutSegment`, allowing for the transmission of large messages in manageable pieces.\n   - The protocol allows for appending and reversing messages with `appendMessage` and `reverseMessage`.\n\n4. **Cryptographic Functions**:\n   - The core cryptographic functions include `MAA` for computing the MAC, which processes a key and a message to produce a secure output.\n   - The protocol also incorporates functions to adjust and compute various properties of octets and blocks.\n\n5. **Equations and Reductions**:\n   - The protocol includes many equations (e.g., `eq`, `ceq`) that define the behavior of logical and arithmetic operations, ensuring that the relationships between different components are maintained. These equations allow for simplification of expressions and verification of properties.\n\n### Operational Flow\n- The protocol begins with the construction of keys from blocks.\n- Messages are formed and potentially segmented for transmission.\n- The MAC is computed using the key and the message, applying a series of transformations and operations to ensure that the integrity of the message is maintained.\n- The protocol allows for verification of the computed MAC against expected values, utilizing the defined equations to ascertain correctness.\n\n### Security Considerations\n- By leveraging bitwise operations and modular arithmetic, the protocol aims to provide resistance against common cryptographic attacks.\n- The use of various transformations and the combination of multiple operations contribute to the obscurity of the data, making it difficult for unauthorized entities to derive meaningful information.\n\n### Conclusion\nThis protocol is a sophisticated implementation designed to ensure the security of messages transmitted over potentially insecure channels. It encapsulates essential cryptographic techniques and structured operations to maintain data integrity and authenticity throughout the message lifecycle.\n\n### Corresponding Maude File Structure\nTo run this protocol in Maude-NPA, the structure must follow the provided definitions in the Maude file, ensuring all operations, sorts, and equations are correctly defined. The logical flow and security mechanisms described must align with the operational capabilities of the Maude-NPA tool to facilitate verification and validation of the protocol's properties. \n\nThe protocol can be tested and validated against specific scenarios by invoking relevant equations and operations in the Maude-NPA environment, allowing for a thorough examination of its functionality and security guarantees.",
        "results": [
            true,
            [
                true,
                "\\||||||||||||||||||/\n\t\t   --- Welcome to Maude ---\n\t\t     /||||||||||||||||||\\\n\t    Maude 2.7++ built: Sep  9 2014 14:55:11\n\t    With additional hooks \n\t    Copyright 1997-2014 SRI International\n\t\t   Wed May 21 18:59:43 2025\n\n\t    Maude-NPA Version:  March 12th 2015\n\t    with direct composition and irreducibility constraints\n\t    (To be run with Maude alpha104 or above)\n\t    Copyright (c) 2015, University of Illinois\n\t    All rights reserved.\n\n Commands:\n red unification? .           for getting the unification algorithm\n red genGrammars .            for generating grammars\n red run(X,Y).                for Y backwards analysis steps for attack pattern\n    X\n red summary(X,Y).            for summary of analysis steps\n red initials(X,Y).           for showing only initial steps\nBye.Warning: \"maa-crc-command\", line 4: bad token run.\nWarning: \"maa-crc-command\", line 4: no parse for term.\nWarning: \"maa-crc-command\", line 5: bad token initials.\nWarning: \"maa-crc-command\", line 5: no parse for term.",
                0.6283519268035889
            ]
        ]
    },
    {
        "file": "MAUDE-1/Needham_Schroeder_Lowe.maude",
        "logic": "---\n\n### Nedham-Schroeder-Lowe Modified Protocol Description\n\n**Protocol Overview:**\nThe Nedham-Schroeder-Lowe Modified Protocol is a cryptographic protocol designed for secure communication between two parties, Alice (A) and Bob (B), with provisions for nonce generation to prevent replay attacks. The protocol utilizes public-key cryptography for secure message exchanges.\n\n**Participants:**\n- **Alice (A)**: Initiator of the communication.\n- **Bob (B)**: Respondent who receives the initial message from Alice.\n- **Intruder (i)**: An adversary that may attempt to intercept or manipulate the messages exchanged between Alice and Bob.\n\n**Message Structure:**\n- The messages exchanged in the protocol are encrypted using the public keys of the intended recipients:\n  - `pk(B, A ; N_A)` denotes a message encrypted with Bob's public key, containing Alice's identity and a nonce `N_A`.\n  - `pk(A, N_A ; N_B ; B)` denotes a response message encrypted with Alice's public key, containing the nonce `N_A`, a newly generated nonce `N_B`, and Bob's identity.\n  - `pk(B, N_B)` denotes the final message sent by Alice to Bob, containing the nonce `N_B`, encrypted with Bob's public key.\n\n**Nonces:**\n- **N_A**: A nonce generated by Alice.\n- **N_B**: A nonce generated by Bob in response to Alice's initial message. Nonces are crucial for ensuring that each session of communication is unique and helps prevent replay attacks.\n\n**Encryption Scheme:**\n- The protocol employs public-key encryption (denoted by `pk`) and private-key decryption (denoted by `sk`). The following algebraic properties hold:\n  - `pk(K, sk(K, M)) = M`: Decrypting a message M encrypted with a key K using the corresponding private key returns the original message.\n  - `sk(K, pk(K, M)) = M`: Encrypting a message M with a key K and then decrypting it with the same key returns the original message.\n\n**Protocol Steps:**\n1. **Initiation**:\n   - Alice generates a nonce `N_A` and sends the message `pk(B, A ; N_A)` to Bob.\n2. **Response**:\n   - Bob receives Alice's message, decrypts it using his private key, and generates a nonce `N_B`. He then sends the message `pk(A, N_A ; N_B ; B)` back to Alice.\n3. **Completion**:\n   - Alice receives Bob's message, decrypts it using her private key, and sends back the message `pk(B, N_B)` to Bob, confirming the successful exchange of nonces.\n\n**Security Goals:**\n- The protocol aims to achieve mutual authentication between Alice and Bob while ensuring confidentiality through encryption.\n- The use of nonces in the protocol helps to prevent replay attacks and ensures freshness of the messages.\n\n**Intruder Model:**\n- The protocol is designed with the assumption that an intruder may attempt to intercept and manipulate the messages. The defined strands in the protocol specification correspond to both legitimate communication and potential attack scenarios.\n\n---",
        "results": [
            true,
            [
                true,
                "\\||||||||||||||||||/\n\t\t   --- Welcome to Maude ---\n\t\t     /||||||||||||||||||\\\n\t    Maude 2.7++ built: Sep  9 2014 14:55:11\n\t    With additional hooks \n\t    Copyright 1997-2014 SRI International\n\t\t   Wed May 21 22:48:51 2025\n\n\t    Maude-NPA Version:  March 12th 2015\n\t    with direct composition and irreducibility constraints\n\t    (To be run with Maude alpha104 or above)\n\t    Copyright (c) 2015, University of Illinois\n\t    All rights reserved.\n\n Commands:\n red unification? .           for getting the unification algorithm\n red genGrammars .            for generating grammars\n red run(X,Y).                for Y backwards analysis steps for attack pattern\n    X\n red summary(X,Y).            for summary of analysis steps\n red initials(X,Y).           for showing only initial steps\n==========================================\nreduce in MAUDE-NPA : run(0) .\nrewrites: 4806911 in 4896ms cpu (4894ms real) (981803 rewrites/second)\nresult IdSystem: < 1 > \n:: r:Fresh ::\n[ nil, \n   -(pk(b, a ; N:Nonce)), \n   +(pk(a, N:Nonce ; n(b, r:Fresh) ; b)), \n   -(pk(b, n(b, r:Fresh))) | nil] \n|| \nn(b, r:Fresh) inI\n|| \nnil\n|| \nnil\n|| \nnil\n==========================================\nreduce in MAUDE-NPA : initials(0,12) .\nrewrites: 7440742 in 9096ms cpu (9096ms real) (818023 rewrites/second)\nresult IdSystemSet: (empty).IdSystemSet\nBye.",
                14.922515392303467
            ]
        ]
    }
]