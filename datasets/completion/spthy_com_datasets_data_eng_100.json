[
    {
        "file": "SPTHY-1/9.spthy",
        "incomplete": "theory nine\nbegin\n\nfunctions: pk/1, sk/1, aenc/2, adec/2\n\nbuiltins: symmetric-encryption\n\nequations:\n    adec(aenc(x.1, sk(x.2)), pk(x.2)) = x.1,\n    adec(aenc(x.1, pk(x.2)), sk(x.2)) = x.1\n\nrule Asymmetric_key_setup:\n    [ Fr(~f) ] --> [ !Sk($A, sk(~f)), !Pk($A, pk(~f)) ]\n\nrule Publish_public_keys:\n    [ !Pk(A, pkA) ] --> [ Out(pkA) ]\n\nrule Symmetric_key_setup:\n    [ Fr(~symK) ] --> [ !Key($A, $B, ~symK) ]\n\nrule Init_Knowledge:\n        [ !Pk($A, pk(k_A)),\n          !Pk($B, pk(____(PRE_1)____)),\n          !Pk(____(PRE_0)____, pk(k_S)),\n          !Sk($A, sk(k_A)),\n          !Sk($B, sk(k_B)),\n          !Sk($S, sk(k_S))\n        ]\n        --[  ]->\n        [ St_init_A(____(PRE_4)____, $B, ____(PRE_3)____, sk(____(POST_2)____), pk(k_A)),\n          St_init_S(____(POST_1)____, $B, $S, sk(____(POST_0)____), pk(k_A), pk(k_S)),\n          St_init_B($A, $B, $S, sk(____(PRE_2)____), pk(k_B), pk(k_S))\n        ]\n\n// ROLE A\nrule msg1_A:\n        [ St_init_A(A, B, S, sk(____(PRE_5)____), pk(k_A))\n        ]\n        --[  ]->\n        [ Out(aenc{<____(PRE_6)____, pk(k_A)>}sk(k_A)),\n          St_msg1_A(____(POST_3)____, B, S, sk(k_A), pk(k_A))\n        ]\n\nrule msg4_A:\n        [ St_msg1_A(A, ____(PRE_7)____, S, sk(k_A), pk(k_A)),\n          In(aenc{M}pk(k_A))\n        ]\n        --[  ]->\n        [ St_msg4_A(A, B, ____(PRE_8)____, S, sk(____(POST_4)____), pk(k_A))\n        ]\n\n// ROLE S\nrule msg1_S:\n    let\n        alpha = aenc{<A, pk(k_A)>}sk(k_A)\n    in\n        [ St_init_S(____(PRE_9)____, B, S, sk(k_S), pk(k_A), pk(k_S)),\n          In(alpha)\n        ]\n        --[  ]->\n        [ St_msg1_S(A, ____(PRE_10)____, S, sk(____(POST_5)____), pk(k_A), pk(k_S), alpha)\n        ]\n\nrule msg2_S:\n    let\n        alpha = aenc{<A, pk(k_A)>}sk(k_A)\n    in\n        [ St_msg1_S(A, ____(PRE_10)____, S, sk(____(POST_5)____), pk(k_A), pk(k_S), alpha),\n          In(aenc{<A, Kb>}pk(k_S))\n        ]\n        --[  ]->\n        [ St_msg2_S(A, B, Kb, S, sk(____(POST_6)____), pk(k_A), pk(k_S), ____(PRE_12)____)\n        ]\n\nrule msg3_S:\n        [ St_msg2_S(A, B, Kb, S, sk(____(POST_6)____), pk(k_A), pk(k_S), ____(PRE_12)____)\n        ]\n        --[  ]->\n        [ Out(senc{pk(k_A)}____(PRE_14)____),\n          St_msg3_S(A, B, Kb, S, sk(k_S), pk(k_A), pk(k_S), alpha)\n        ]\n\n// ROLE B\nrule msg2_B:\n        [ St_init_B(A, B, S, sk(k_B), pk(k_B), pk(____(PRE_15)____)),\n          Fr(~Kb)\n        ]\n        --[  ]->\n        [ Out(aenc{<A, ~Kb>}pk(____(POST_7)____)),\n          St_msg2_B(A, B, ~Kb, S, sk(____(PRE_16)____), pk(k_B), pk(k_S))\n        ]\n\nrule msg3_B:\n        [ St_msg2_B(A, B, Kb, S, sk(____(PRE_17)____), pk(k_B), pk(k_S)),\n          In(senc{pk(k_A)}Kb)\n        ]\n        --[  ]->\n        [ St_msg3_B(A, B, Kb, S, sk(____(POST_8)____), pk(____(PRE_18)____), pk(k_B), pk(k_S))\n        ]\n\nrule msg4_B:\n        [ St_msg3_B(A, B, Kb, S, sk(____(POST_8)____), pk(____(PRE_18)____), pk(k_B), pk(k_S)),\n          Fr(~M)\n        ]\n        --[  Secret(~M)]->\n        [ Out(aenc{____(PRE_21)____}pk(____(POST_10)____)),\n          St_msg4_B(A, ____(POST_9)____, Kb, ~M, S, sk(____(PRE_20)____), pk(k_A), pk(k_B), pk(k_S))\n        ]\n\nlemma secrecy:\n\"____(LEM_0)____ x #i.\n____(LEM_1)____(x) @i ==> not (Ex #j. K(x)@j)\"\nend",
        "complete:": "theory nine\nbegin\n\nfunctions: pk/1, sk/1, aenc/2, adec/2\n\nbuiltins: symmetric-encryption\n\nequations:\n    adec(aenc(x.1, sk(x.2)), pk(x.2)) = x.1,\n    adec(aenc(x.1, pk(x.2)), sk(x.2)) = x.1\n\nrule Asymmetric_key_setup:\n    [ Fr(~f) ] --> [ !Sk($A, sk(~f)), !Pk($A, pk(~f)) ]\n\nrule Publish_public_keys:\n    [ !Pk(A, pkA) ] --> [ Out(pkA) ]\n\nrule Symmetric_key_setup:\n    [ Fr(~symK) ] --> [ !Key($A, $B, ~symK) ]\n\nrule Init_Knowledge:\n        [ !Pk($A, pk(k_A)),\n          !Pk($B, pk(k_B)),\n          !Pk($S, pk(k_S)),\n          !Sk($A, sk(k_A)),\n          !Sk($B, sk(k_B)),\n          !Sk($S, sk(k_S))\n        ]\n        --[  ]->\n        [ St_init_A($A, $B, $S, sk(k_A), pk(k_A)),\n          St_init_S($A, $B, $S, sk(k_S), pk(k_A), pk(k_S)),\n          St_init_B($A, $B, $S, sk(k_B), pk(k_B), pk(k_S))\n        ]\n\n// ROLE A\nrule msg1_A:\n        [ St_init_A(A, B, S, sk(k_A), pk(k_A))\n        ]\n        --[  ]->\n        [ Out(aenc{<A, pk(k_A)>}sk(k_A)),\n          St_msg1_A(A, B, S, sk(k_A), pk(k_A))\n        ]\n\nrule msg4_A:\n        [ St_msg1_A(A, B, S, sk(k_A), pk(k_A)),\n          In(aenc{M}pk(k_A))\n        ]\n        --[  ]->\n        [ St_msg4_A(A, B, M, S, sk(k_A), pk(k_A))\n        ]\n\n// ROLE S\nrule msg1_S:\n    let\n        alpha = aenc{<A, pk(k_A)>}sk(k_A)\n    in\n        [ St_init_S(A, B, S, sk(k_S), pk(k_A), pk(k_S)),\n          In(alpha)\n        ]\n        --[  ]->\n        [ St_msg1_S(A, B, S, sk(k_S), pk(k_A), pk(k_S), alpha)\n        ]\n\nrule msg2_S:\n    let\n        alpha = aenc{<A, pk(k_A)>}sk(k_A)\n    in\n        [ St_msg1_S(A, B, S, sk(k_S), pk(k_A), pk(k_S), alpha),\n          In(aenc{<A, Kb>}pk(k_S))\n        ]\n        --[  ]->\n        [ St_msg2_S(A, B, Kb, S, sk(k_S), pk(k_A), pk(k_S), alpha)\n        ]\n\nrule msg3_S:\n        [ St_msg2_S(A, B, Kb, S, sk(k_S), pk(k_A), pk(k_S), alpha)\n        ]\n        --[  ]->\n        [ Out(senc{pk(k_A)}Kb),\n          St_msg3_S(A, B, Kb, S, sk(k_S), pk(k_A), pk(k_S), alpha)\n        ]\n\n// ROLE B\nrule msg2_B:\n        [ St_init_B(A, B, S, sk(k_B), pk(k_B), pk(k_S)),\n          Fr(~Kb)\n        ]\n        --[  ]->\n        [ Out(aenc{<A, ~Kb>}pk(k_S)),\n          St_msg2_B(A, B, ~Kb, S, sk(k_B), pk(k_B), pk(k_S))\n        ]\n\nrule msg3_B:\n        [ St_msg2_B(A, B, Kb, S, sk(k_B), pk(k_B), pk(k_S)),\n          In(senc{pk(k_A)}Kb)\n        ]\n        --[  ]->\n        [ St_msg3_B(A, B, Kb, S, sk(k_B), pk(k_A), pk(k_B), pk(k_S))\n        ]\n\nrule msg4_B:\n        [ St_msg3_B(A, B, Kb, S, sk(k_B), pk(k_A), pk(k_B), pk(k_S)),\n          Fr(~M)\n        ]\n        --[  Secret(~M)]->\n        [ Out(aenc{~M}pk(k_A)),\n          St_msg4_B(A, B, Kb, ~M, S, sk(k_B), pk(k_A), pk(k_B), pk(k_S))\n        ]\n\nlemma secrecy:\n\"All x #i.\nSecret(x) @i ==> not (Ex #j. K(x)@j)\"\nend"
    },
    {
        "file": "SPTHY-1/ake_KEAplus.spthy",
        "incomplete": "theory ake_KEAplus\nbegin\n\nbuiltins: diffie-hellman\n\nsection{* KEA+ *}\n\n/*\n * Protocol:\tKEA+\n * Modeler: \tJannik Dreier, Ralf Sasse\n * Date: \tApril 2015\n * Source:\tLauter, Mityagin, 2006\n * Property: \tKey indistinguishable from randomness\n *\n * Status: \t??\n */\n\nfunctions: h/1, g/0\n\n/* Protocol rules */\n\n/* Generate long-term keypair */\nrule generate_ltk:\n   let pkA = g^~lkA \n   in\n   [ Fr(~lkA) ] \n   --[ RegKey($A) ]->\n   [ !Ltk( ____(PRE_0)____, ~lkA ), !Pk( $A, ____(POST_0)____ ), Out( pkA ) ]\n\n\n\n/* Initiator */\nrule Init_1:\n  let // exI = h1(<~eskI, ~lkI >)\n      hkI = g^~eskI\n  in\n   [   Fr( ~eskI ), !Ltk( $I, ~lkI ) , !Pk(____(PRE_1)____, pkR) ]\n   -->\n   [   Init_1( ____(PRE_2)____, $I, $R, ~lkI, pkR, hkI )\n     , !Ephk(____(POST_1)____, ~eskI)\n     , Out( hkI ) ]\n\nrule Init_2:\n  let pkR = g^~lkR\n      kI  = h(< Y^~lkI, pkR^~eskI, g^~lkI, pkR >) \n  in\n   [   Init_1( ~eskI, $I, $R, ~lkI, pkR, hkI),  In( ____(PRE_3)____ ) ]\n   --[ //Accept( ____(LABEL_1)____, ____(PRE_4)____, ____(LABEL_0)____, ____(PRE_5)____)\n//     , Sid( ~eskI, < 'Init', $I, $R, hkI, Y >)\n//     , Match( ~eskI, < 'Resp', $R, $I, hkI, Y >)\n       KeyInit(____(PRE_6)____)\n     ]->\n   [   !Sessk( ~eskI, kI) ]\n\n/* Responder */\nrule Resp_1:\n  let pkI = g^~lkI\n      hkR = g^~eskR\n      kR  = h(< pkI^~eskR, X^~lkR, pkI, g^~lkR >) \n  in\n   [   Fr( ~eskR ), !Ltk(____(PRE_7)____, ~lkR), !Pk($I, pkI), In( X ) ]\n   --[ //Accept( ____(LABEL_2)____, ____(PRE_10)____, ____(PRE_9)____, ____(LABEL_3)____ )\n//     , Sid( ~eskR, <'Resp', $R, $I, X, hkR >)\n//     , Match( ~eskR, <'Init', $I, $R, X, hkR > )\n       KeyResp(kR)\n     ]->\n   [   Out( hkR ),\n       !Ephk(____(PRE_11)____, ~eskR),\n       !Sessk( ~eskR, kR) ]\n\nrestriction one_key_per_name:\n  \"All A #i #j. RegKey(A) @i & RegKey(A) @j ==> #i = #j\"\n\nlemma executable:\n  exists-trace\n  \" Ex #____(LEM_1)____ #j ____(LEM_0)____. KeyInit(k)@ i & KeyResp(k)@ j\n  \"\n\n/* Key Reveals for the eCK model */\n//rule Sessk_reveal: \n//   [ !Sessk(~tid, k) ] --[ SesskRev(~tid) ]-> [ Out(k) ]\n\n//rule Ltk_reveal:\n//   [ !Ltk($A, lkA) ] --[ LtkRev($A) ]-> [ Out(lkA) ]\n\n//rule Ephk_reveal:\n//   [ !Ephk(~s, ~ek) ] --[ EphkRev(~s) ]-> [ Out(~ek) ]\n\n\nend",
        "complete:": "theory ake_KEAplus\nbegin\n\nbuiltins: diffie-hellman\n\nsection{* KEA+ *}\n\n/*\n * Protocol:\tKEA+\n * Modeler: \tJannik Dreier, Ralf Sasse\n * Date: \tApril 2015\n * Source:\tLauter, Mityagin, 2006\n * Property: \tKey indistinguishable from randomness\n *\n * Status: \t??\n */\n\nfunctions: h/1, g/0\n\n/* Protocol rules */\n\n/* Generate long-term keypair */\nrule generate_ltk:\n   let pkA = g^~lkA \n   in\n   [ Fr(~lkA) ] \n   --[ RegKey($A) ]->\n   [ !Ltk( $A, ~lkA ), !Pk( $A, pkA ), Out( pkA ) ]\n\n\n\n/* Initiator */\nrule Init_1:\n  let // exI = h1(<~eskI, ~lkI >)\n      hkI = g^~eskI\n  in\n   [   Fr( ~eskI ), !Ltk( $I, ~lkI ) , !Pk($R, pkR) ]\n   -->\n   [   Init_1( ~eskI, $I, $R, ~lkI, pkR, hkI )\n     , !Ephk(~eskI, ~eskI)\n     , Out( hkI ) ]\n\nrule Init_2:\n  let pkR = g^~lkR\n      kI  = h(< Y^~lkI, pkR^~eskI, g^~lkI, pkR >) \n  in\n   [   Init_1( ~eskI, $I, $R, ~lkI, pkR, hkI),  In( Y ) ]\n   --[ //Accept( ~eskI, $I, $R, kI)\n//     , Sid( ~eskI, < 'Init', $I, $R, hkI, Y >)\n//     , Match( ~eskI, < 'Resp', $R, $I, hkI, Y >)\n       KeyInit(kI)\n     ]->\n   [   !Sessk( ~eskI, kI) ]\n\n/* Responder */\nrule Resp_1:\n  let pkI = g^~lkI\n      hkR = g^~eskR\n      kR  = h(< pkI^~eskR, X^~lkR, pkI, g^~lkR >) \n  in\n   [   Fr( ~eskR ), !Ltk($R, ~lkR), !Pk($I, pkI), In( X ) ]\n   --[ //Accept( ~eskR, $R, $I, kR )\n//     , Sid( ~eskR, <'Resp', $R, $I, X, hkR >)\n//     , Match( ~eskR, <'Init', $I, $R, X, hkR > )\n       KeyResp(kR)\n     ]->\n   [   Out( hkR ),\n       !Ephk(~eskR, ~eskR),\n       !Sessk( ~eskR, kR) ]\n\nrestriction one_key_per_name:\n  \"All A #i #j. RegKey(A) @i & RegKey(A) @j ==> #i = #j\"\n\nlemma executable:\n  exists-trace\n  \" Ex #i #j k. KeyInit(k)@ i & KeyResp(k)@ j\n  \"\n\n/* Key Reveals for the eCK model */\n//rule Sessk_reveal: \n//   [ !Sessk(~tid, k) ] --[ SesskRev(~tid) ]-> [ Out(k) ]\n\n//rule Ltk_reveal:\n//   [ !Ltk($A, lkA) ] --[ LtkRev($A) ]-> [ Out(lkA) ]\n\n//rule Ephk_reveal:\n//   [ !Ephk(~s, ~ek) ] --[ EphkRev(~s) ]-> [ Out(~ek) ]\n\n\nend"
    },
    {
        "file": "SPTHY-1/ake_NAXOS.spthy",
        "incomplete": "theory ake_NAXOS\nbegin\n\nbuiltins: diffie-hellman\n\nsection{* NAXOS *}\n\n/*\n * Protocol:\tNAXOS\n * Modeler: \tJannik Dreier, Ralf Sasse (based on trace-version by Cas Cremers, Benedikt Schmidt)\n * Date: \tJanuary 2012/April 2012\n * Source:\t\"Stronger Security of Authenticated Key Exchange\"\n * \t\tLaMacchia, Lauter, Mityagin, 2007\n * Property: \tKey indistinguishable from randomness [[[previously: eCK security with PFS]]]\n *\n * Status: \t??\n */\n\nfunctions: h1/1, h2/1\n\n/* Protocol rules */\n\n/* Generate long-term keypair */\nrule generate_ltk:\n   let pkA = 'g'^~lkA \n   in\n   [ Fr(~lkA) ] \n   --[ RegKey($A) ]->\n   [ !Ltk( $A, ~lkA ), !Pk( $A, ____(PRE_0)____ ), Out( pkA ) ]\n\n/* Initiator */\nrule Init_1:\n  let exI = h1(<~eskI, ~lkI >)\n      hkI = 'g'^exI\n  in\n   [   Fr( ~eskI ), !Ltk( $I, ~lkI ) ]\n   -->\n   [   Init_1( ____(POST_0)____, $I, $R, ~lkI, ____(PRE_1)____ )\n     , !Ephk(~eskI, ~eskI)\n     , Out( hkI ) ]\n\nrule Init_2:\n  let pkR = 'g'^~lkR\n      exI = h1(< ~eskI, ~lkI >)\n      kI  = h2(< Y^~lkI, pkR^exI, Y^exI, $I, $R >) \n  in\n   [   Init_1( ~eskI, $I, $R, ____(PRE_2)____ , hkI), !Pk( $R, pkR ), In( Y ) ]\n   --[ Accept( ____(PRE_4)____, $I, $R, kI)\n     , Sid( ____(PRE_5)____, < ____(LABEL_0)____, $I, $R, hkI, ____(PRE_3)____ >)\n     , Match( ~eskI, < 'Resp', $R, $I, hkI, ____(LABEL_1)____ >)\n     ]->\n   [   !Sessk( ~eskI, kI) ]\n\n\n/*\n// Test session rule for initiator, removed to reduce state space, still too much.\nrule Init_2_testsession:\n  let pkR = 'g'^~lkR\n      exI = h1(< ~eskI, ~lkI >)\n      kI  = h2(< Y^~lkI, pkR^exI, Y^exI, $I, $R >) \n  in\n   [   Init_1( ~eskI, $I, $R, ~lkI , hkI), !Pk( $R, pkR ), In( Y ) ]\n   --[ Accept( ~eskI, $I, $R, kI)\n     , Sid( ~eskI, < 'Init', $I, $R, hkI, Y >)\n     , Match( ~eskI, < 'Resp', $R, $I, hkI, Y >)\n     ]->\n   [   !Sessk( ~eskI, kI) ]\n*/\n\n/* Responder */\nrule Resp_1:\n  let pkI = 'g'^~lkI\n      exR = h1(< ~eskR, ~lkR >)\n      hkr = 'g'^exR\n      kR  = h2(< pkI^exR, X^~lkR, X^exR, $I, $R >) \n  in\n   [   Fr( ~eskR ), !Ltk($R, ____(PRE_10)____), !Pk($I, pkI), In( X ) ]\n   --[ Accept( ____(LABEL_7)____, ____(PRE_13)____, ____(LABEL_6)____, kR )\n     , Sid( ~eskR, <____(PRE_11)____, $R, $I, ____(LABEL_5)____, ____(PRE_12)____ >)\n     , Match( ~eskR, <'Init', $I, $R, X, hkr> )\n     ]->\n   [   Out( hkr ),\n       !Ephk(____(PRE_14)____, ~eskR),\n       !Sessk( ~eskR, ____(POST_1)____) ]\n\nrestriction one_key_per_name:\n  \"All A #i #j. RegKey(A) @i & RegKey(A) @j ==> #i = #j\"\n\n\n/* Key Reveals for the eCK model */\n//rule Sessk_reveal: \n//   [ !Sessk(~tid, k) ] --[ SesskRev(~tid) ]-> [ Out(k) ]\n\n//rule Ltk_reveal:\n//   [ !Ltk($A, lkA) ] --[ LtkRev($A) ]-> [ Out(lkA) ]\n\n//rule Ephk_reveal:\n//   [ !Ephk(~s, ~ek) ] --[ EphkRev(~s) ]-> [ Out(~ek) ]\n\n\n/* Security properties */\n/*\nlemma eCK_same_key:\n  \" // If every agent registered at most one public key\n  (All A #i #j. RegKey(A)@i & RegKey(A)@j ==> (#i = #j))\n  ==> // then matching sessions accept the same key\n  (not (Ex #i1 #i2 #i3 #i4 s ss k kk A B minfo .\n              Accept(s, A, B, k ) @ i1\n\t    & Accept(ss, B, A, kk) @ i2\n\t    & Sid(s, minfo) @ i3\n\t    & Match(ss, minfo) @i4\n\t    & not( k = kk )\n  ) )\"\n*/\n/*\nlemma eCK_PFS_key_secrecy:\n  /* \n   * The property specification very closely follows the original eCK\n   * (ProvSec) paper:\n   *\n   * If there exists a Test session whose key k is known to the\n   * Adversary, then...\n   */\n  \"(All #i1 #i2 ____(LEM_13)____ A B k.\n    Accept(____(LEM_14)____, A, B, k) @ i1 & K( k ) @ i2\n    ==> ( \n    /* ... the Test session must be \"not clean\".\n     * Test is not clean if one of the following has happened:\n     */\n    /* 1a. session-key-reveal of test thread. */\n      (Ex #i3. SesskRev( Test ) @ i3 )\n\n    /* 1b. session-key-reveal of matching session */\n    | (Ex MatchingSession #i3 #i4 ms.\n    \t   /* ( MatchingSession's 'ms' info matches with Test ) */\n           ( Sid ( MatchingSession, ms ) @ i3 & Match( Test, ms ) @ i4)\n\t   & (\n\t     (Ex #i5. SesskRev( MatchingSession ) @ i5 )\n\t   )\n      )\n    /* 2. If matching session exists and ... */\n    | (Ex MatchingSession #i3 #i4 ms.\n    \t   /* ( MatchingSession's 'ms' info matches with Test ) */\n           ( Sid ( MatchingSession, ms ) @ i3 & Match( Test, ms ) @ i4)\n\t   & (\n\t   /* 2a. reveal either both sk_A and esk_A, or */\n\t     (Ex #i5 #i6. LtkRev  ( A ) @ i5  & EphkRev ( Test  ) @ i6 )\n\t   /* 2b. both sk_B and esk_B */\n\t   | (Ex #i5 #i6. LtkRev  ( B ) @ i5  & EphkRev ( MatchingSession ) @ i6 )\n\t   )\n      )\n    /* 3. No matching session exists and ... */\n    | ( ( not(Ex MatchingSession #i3 #i4 ms.\n    \t   /* ( MatchingSession's 'ms' info matches with Test ) */\n           Sid ( MatchingSession, ms ) @ i3 & Match( Test, ms ) @ i4 ) )\n\t   & (\n\t   /* 3a. reveal either sk_B, or */\n\t     (Ex #i5    . LtkRev (B) @ i5 & i5 < i1 )\t/* Perfect Forward Secrecy (PFS) modification */\n\t   /* 3b. both sk_A and esk_A */\n\t   | (Ex #i5 #i6. LtkRev (A) @ i5 & EphkRev ( Test ) @ i6 )\n\t   )\n      )\n    )\n  )\"\n*/\n\nend",
        "complete:": "theory ake_NAXOS\nbegin\n\nbuiltins: diffie-hellman\n\nsection{* NAXOS *}\n\n/*\n * Protocol:\tNAXOS\n * Modeler: \tJannik Dreier, Ralf Sasse (based on trace-version by Cas Cremers, Benedikt Schmidt)\n * Date: \tJanuary 2012/April 2012\n * Source:\t\"Stronger Security of Authenticated Key Exchange\"\n * \t\tLaMacchia, Lauter, Mityagin, 2007\n * Property: \tKey indistinguishable from randomness [[[previously: eCK security with PFS]]]\n *\n * Status: \t??\n */\n\nfunctions: h1/1, h2/1\n\n/* Protocol rules */\n\n/* Generate long-term keypair */\nrule generate_ltk:\n   let pkA = 'g'^~lkA \n   in\n   [ Fr(~lkA) ] \n   --[ RegKey($A) ]->\n   [ !Ltk( $A, ~lkA ), !Pk( $A, pkA ), Out( pkA ) ]\n\n/* Initiator */\nrule Init_1:\n  let exI = h1(<~eskI, ~lkI >)\n      hkI = 'g'^exI\n  in\n   [   Fr( ~eskI ), !Ltk( $I, ~lkI ) ]\n   -->\n   [   Init_1( ~eskI, $I, $R, ~lkI, hkI )\n     , !Ephk(~eskI, ~eskI)\n     , Out( hkI ) ]\n\nrule Init_2:\n  let pkR = 'g'^~lkR\n      exI = h1(< ~eskI, ~lkI >)\n      kI  = h2(< Y^~lkI, pkR^exI, Y^exI, $I, $R >) \n  in\n   [   Init_1( ~eskI, $I, $R, ~lkI , hkI), !Pk( $R, pkR ), In( Y ) ]\n   --[ Accept( ~eskI, $I, $R, kI)\n     , Sid( ~eskI, < 'Init', $I, $R, hkI, Y >)\n     , Match( ~eskI, < 'Resp', $R, $I, hkI, Y >)\n     ]->\n   [   !Sessk( ~eskI, kI) ]\n\n\n/*\n// Test session rule for initiator, removed to reduce state space, still too much.\nrule Init_2_testsession:\n  let pkR = 'g'^~lkR\n      exI = h1(< ~eskI, ~lkI >)\n      kI  = h2(< Y^~lkI, pkR^exI, Y^exI, $I, $R >) \n  in\n   [   Init_1( ~eskI, $I, $R, ~lkI , hkI), !Pk( $R, pkR ), In( Y ) ]\n   --[ Accept( ~eskI, $I, $R, kI)\n     , Sid( ~eskI, < 'Init', $I, $R, hkI, Y >)\n     , Match( ~eskI, < 'Resp', $R, $I, hkI, Y >)\n     ]->\n   [   !Sessk( ~eskI, kI) ]\n*/\n\n/* Responder */\nrule Resp_1:\n  let pkI = 'g'^~lkI\n      exR = h1(< ~eskR, ~lkR >)\n      hkr = 'g'^exR\n      kR  = h2(< pkI^exR, X^~lkR, X^exR, $I, $R >) \n  in\n   [   Fr( ~eskR ), !Ltk($R, ~lkR), !Pk($I, pkI), In( X ) ]\n   --[ Accept( ~eskR, $R, $I, kR )\n     , Sid( ~eskR, <'Resp', $R, $I, X, hkr >)\n     , Match( ~eskR, <'Init', $I, $R, X, hkr> )\n     ]->\n   [   Out( hkr ),\n       !Ephk(~eskR, ~eskR),\n       !Sessk( ~eskR, kR) ]\n\nrestriction one_key_per_name:\n  \"All A #i #j. RegKey(A) @i & RegKey(A) @j ==> #i = #j\"\n\n\n/* Key Reveals for the eCK model */\n//rule Sessk_reveal: \n//   [ !Sessk(~tid, k) ] --[ SesskRev(~tid) ]-> [ Out(k) ]\n\n//rule Ltk_reveal:\n//   [ !Ltk($A, lkA) ] --[ LtkRev($A) ]-> [ Out(lkA) ]\n\n//rule Ephk_reveal:\n//   [ !Ephk(~s, ~ek) ] --[ EphkRev(~s) ]-> [ Out(~ek) ]\n\n\n/* Security properties */\n/*\nlemma eCK_same_key:\n  \" // If every agent registered at most one public key\n  (All A #i #j. RegKey(A)@i & RegKey(A)@j ==> (#i = #j))\n  ==> // then matching sessions accept the same key\n  (not (Ex #i1 #i2 #i3 #i4 s ss k kk A B minfo .\n              Accept(s, A, B, k ) @ i1\n\t    & Accept(ss, B, A, kk) @ i2\n\t    & Sid(s, minfo) @ i3\n\t    & Match(ss, minfo) @i4\n\t    & not( k = kk )\n  ) )\"\n*/\n/*\nlemma eCK_PFS_key_secrecy:\n  /* \n   * The property specification very closely follows the original eCK\n   * (ProvSec) paper:\n   *\n   * If there exists a Test session whose key k is known to the\n   * Adversary, then...\n   */\n  \"(All #i1 #i2 Test A B k.\n    Accept(Test, A, B, k) @ i1 & K( k ) @ i2\n    ==> ( \n    /* ... the Test session must be \"not clean\".\n     * Test is not clean if one of the following has happened:\n     */\n    /* 1a. session-key-reveal of test thread. */\n      (Ex #i3. SesskRev( Test ) @ i3 )\n\n    /* 1b. session-key-reveal of matching session */\n    | (Ex MatchingSession #i3 #i4 ms.\n    \t   /* ( MatchingSession's 'ms' info matches with Test ) */\n           ( Sid ( MatchingSession, ms ) @ i3 & Match( Test, ms ) @ i4)\n\t   & (\n\t     (Ex #i5. SesskRev( MatchingSession ) @ i5 )\n\t   )\n      )\n    /* 2. If matching session exists and ... */\n    | (Ex MatchingSession #i3 #i4 ms.\n    \t   /* ( MatchingSession's 'ms' info matches with Test ) */\n           ( Sid ( MatchingSession, ms ) @ i3 & Match( Test, ms ) @ i4)\n\t   & (\n\t   /* 2a. reveal either both sk_A and esk_A, or */\n\t     (Ex #i5 #i6. LtkRev  ( A ) @ i5  & EphkRev ( Test  ) @ i6 )\n\t   /* 2b. both sk_B and esk_B */\n\t   | (Ex #i5 #i6. LtkRev  ( B ) @ i5  & EphkRev ( MatchingSession ) @ i6 )\n\t   )\n      )\n    /* 3. No matching session exists and ... */\n    | ( ( not(Ex MatchingSession #i3 #i4 ms.\n    \t   /* ( MatchingSession's 'ms' info matches with Test ) */\n           Sid ( MatchingSession, ms ) @ i3 & Match( Test, ms ) @ i4 ) )\n\t   & (\n\t   /* 3a. reveal either sk_B, or */\n\t     (Ex #i5    . LtkRev (B) @ i5 & i5 < i1 )\t/* Perfect Forward Secrecy (PFS) modification */\n\t   /* 3b. both sk_A and esk_A */\n\t   | (Ex #i5 #i6. LtkRev (A) @ i5 & EphkRev ( Test ) @ i6 )\n\t   )\n      )\n    )\n  )\"\n*/\n\nend"
    }
]