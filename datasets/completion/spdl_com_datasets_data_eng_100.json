[
    {
        "file": "SPDL-1/2r890-ex3-a.spdl",
        "incomplete": "/*\n * Course 2r890\n *\n * Assignment 0405-3\n *\n * Protocol a\n *\n * nisynch, niagree\n */\nconst pk: Function;\nsecret sk: Function;\ninversekeys (pk,sk);\n\nprotocol course2r890year0405ex3(X,Y,____(ROLE_1)____)\n{\n\trole ____(ROLE_1)____\n\t{\n\t\tfresh ____(NONCE_1)____: Nonce;\n\t\tfresh ny: Nonce;\n\n\t\tsend_1(____(ROLE_1)____,X, ____(NONCE_1)____ );\n\t\trecv_2(X,____(ROLE_1)____, { ____(ROLE_1)____,____(NONCE_1)____ }sk(X) );\n\t\tsend_3(____(ROLE_1)____,Y, ny );\n\t\trecv_4(Y,____(ROLE_1)____, { ny,____(ROLE_1)____ }sk(Y) );\n\n\t\tclaim_i1(____(ROLE_1)____,Niagree);\n\t\tclaim_i2(____(ROLE_1)____,Nisynch);\n\t}\t\n\t\n\trole X\n\t{\n\t\tvar ____(NONCE_1)____: Nonce;\n\n\t\trecv_1(____(ROLE_1)____,X, ____(NONCE_1)____ );\n\t\tsend_2(X,____(ROLE_1)____, { ____(ROLE_1)____,____(NONCE_1)____ }sk(X) );\n\t}\n\n\trole Y\n\t{\n\t\tvar ny: Nonce;\n\n\t\trecv_3(____(ROLE_1)____,Y, ny );\n\t\tsend_4(Y,____(ROLE_1)____, { ny,____(ROLE_1)____ }sk(Y) );\n\t}\n}",
        "complete:": "/*\n * Course 2r890\n *\n * Assignment 0405-3\n *\n * Protocol a\n *\n * nisynch, niagree\n */\nconst pk: Function;\nsecret sk: Function;\ninversekeys (pk,sk);\n\nprotocol course2r890year0405ex3(X,Y,I)\n{\n\trole I\n\t{\n\t\tfresh nx: Nonce;\n\t\tfresh ny: Nonce;\n\n\t\tsend_1(I,X, nx );\n\t\trecv_2(X,I, { I,nx }sk(X) );\n\t\tsend_3(I,Y, ny );\n\t\trecv_4(Y,I, { ny,I }sk(Y) );\n\n\t\tclaim_i1(I,Niagree);\n\t\tclaim_i2(I,Nisynch);\n\t}\t\n\t\n\trole X\n\t{\n\t\tvar nx: Nonce;\n\n\t\trecv_1(I,X, nx );\n\t\tsend_2(X,I, { I,nx }sk(X) );\n\t}\n\n\trole Y\n\t{\n\t\tvar ny: Nonce;\n\n\t\trecv_3(I,Y, ny );\n\t\tsend_4(Y,I, { ny,I }sk(Y) );\n\t}\n}"
    },
    {
        "file": "SPDL-1/AccessRequestEvaluation_CRCBAC.spdl",
        "incomplete": "hashfunction h;/* Secure hash function */\n\nconst XOR:Function;/* XOR operation */\n\nconst Concat: Function;/*Concatenation Function */\n\nconst enforce:Function;\n\nconst Fresh: Function;\n\nconst Getrole:Function;\n\nconst GetCapability:Function;\n\nconst GetPermission:Function;\n\nconst Getpriority:Function;\n\nsecret SKa,Resp;\n\nconst cxt,c;\n\nmacro Rol= Getrole(IDa,cxt);\n\nmacro Cap=GetCapability(Rol);\n\nmacro Per=GetPermission(Cap);\n\nmacro resp=enforce(Rol,c);\n\nprotocol AccessRequest (____(ROLE_1)____,GW){\n\nrole ____(ROLE_1)____{\n\nfresh T1:Nonce;\n\nvar ____(NONCE_1)____:Nonce; \n\nconst IDa;\n\nmacro Rq=Concat(IDa,cxt,c);\n\nmacro M=XOR(Rq,h(SKa)); \n\nsend_1 (____(ROLE_1)____,GW,M,T1);\n\nrecv_2(GW,____(ROLE_1)____,XOR(Concat(IDa,c,Resp),h(sk)),____(NONCE_1)____);\n\nclaim(____(ROLE_1)____,Secret,SKa);\n\nclaim(____(ROLE_1)____,Alive);\n\nclaim(____(ROLE_1)____,Weakagree);\n\nclaim(____(ROLE_1)____,Niagree);\n\nclaim(____(ROLE_1)____,Nisynch);}\n\nrole GW{\n\nfresh ____(NONCE_1)____:Nonce; \n\nvar T1:Nonce; \n\nconst IDa;\n\nrecv_1(____(ROLE_1)____,GW,M,T1);\n\nsend_2 (GW,____(ROLE_1)____,XOR(Concat(IDa,c,Resp),h(sk)),____(NONCE_1)____);\n\nclaim(GW,Alive);\n\nclaim(GW,Weakagree);\n\nclaim(GW,Niagree);\n\nclaim(GW,Nisynch);\n\nclaim(GW,Secret,SKa);}\n\n  }",
        "complete:": "hashfunction h;/* Secure hash function */\n\nconst XOR:Function;/* XOR operation */\n\nconst Concat: Function;/*Concatenation Function */\n\nconst enforce:Function;\n\nconst Fresh: Function;\n\nconst Getrole:Function;\n\nconst GetCapability:Function;\n\nconst GetPermission:Function;\n\nconst Getpriority:Function;\n\nsecret SKa,Resp;\n\nconst cxt,c;\n\nmacro Rol= Getrole(IDa,cxt);\n\nmacro Cap=GetCapability(Rol);\n\nmacro Per=GetPermission(Cap);\n\nmacro resp=enforce(Rol,c);\n\nprotocol AccessRequest (Da,GW){\n\nrole Da{\n\nfresh T1:Nonce;\n\nvar T2:Nonce; \n\nconst IDa;\n\nmacro Rq=Concat(IDa,cxt,c);\n\nmacro M=XOR(Rq,h(SKa)); \n\nsend_1 (Da,GW,M,T1);\n\nrecv_2(GW,Da,XOR(Concat(IDa,c,Resp),h(sk)),T2);\n\nclaim(Da,Secret,SKa);\n\nclaim(Da,Alive);\n\nclaim(Da,Weakagree);\n\nclaim(Da,Niagree);\n\nclaim(Da,Nisynch);}\n\nrole GW{\n\nfresh T2:Nonce; \n\nvar T1:Nonce; \n\nconst IDa;\n\nrecv_1(Da,GW,M,T1);\n\nsend_2 (GW,Da,XOR(Concat(IDa,c,Resp),h(sk)),T2);\n\nclaim(GW,Alive);\n\nclaim(GW,Weakagree);\n\nclaim(GW,Niagree);\n\nclaim(GW,Nisynch);\n\nclaim(GW,Secret,SKa);}\n\n  }"
    },
    {
        "file": "SPDL-1/andrew-ban-1.spdl",
        "incomplete": "# BAN modified Andrew Secure RPC\n#\n# Modelled after the description in the SPORE library\n# http://www.lsv.ens-cachan.fr/spore/andrewBAN.html\n#\n# Note:\n# The shared key between I and R is modelled as k(I,R) currently\n# there is no way to express that this key is equal to k(R,I)\n# So it is possile that certain attacks that use this property are not found\n# \n# Note:\n# According to SPORE there are no known attacks on this protocol\n#\nusertype SessionKey;\nconst Fresh: Function;\nconst Compromised: Function;\n\nprotocol andrew-Ban(I,____(ROLE_1)____)\n{\n    role I\n    {\n        fresh ____(NONCE_1)____: Nonce;\n        var ____(ENCRYPTED_1)____,nr2: Nonce;\n        var ____(KEY_1)____: SessionKey;\n\n        send_1(I,____(ROLE_1)____, I,{____(NONCE_1)____}k(I,____(ROLE_1)____) );\n        recv_2(____(ROLE_1)____,I, {____(NONCE_1)____,____(ENCRYPTED_1)____}k(I,____(ROLE_1)____) );\n        send_3(I,____(ROLE_1)____, {____(ENCRYPTED_1)____}k(I,____(ROLE_1)____) );\n        recv_4(____(ROLE_1)____,I, {____(KEY_1)____,nr2,____(NONCE_1)____}k(I,____(ROLE_1)____) );\n        claim_I1(I,Nisynch);\n        claim_I2(I,Niagree);\n        claim_I3(I,Secret, ____(KEY_1)____);\n        claim_I5(I,Empty, (Fresh,____(KEY_1)____));\n    }    \n    \n    role ____(ROLE_1)____\n    {\n        var ____(NONCE_1)____: Nonce;\n        fresh ____(ENCRYPTED_1)____,nr2: Nonce;\n        fresh ____(KEY_1)____: SessionKey;\n\n        recv_1(I,____(ROLE_1)____, I,{____(NONCE_1)____}k(I,____(ROLE_1)____) );\n        send_2(____(ROLE_1)____,I, {____(NONCE_1)____,____(ENCRYPTED_1)____}k(I,____(ROLE_1)____) );\n        recv_3(I,____(ROLE_1)____, {____(ENCRYPTED_1)____}k(I,____(ROLE_1)____) );\n        send_4(____(ROLE_1)____,I, {____(KEY_1)____,nr2,____(NONCE_1)____}k(I,____(ROLE_1)____) );\n        claim_R1(____(ROLE_1)____,Nisynch);\n        claim_R2(____(ROLE_1)____,Niagree);\n        claim_R3(____(ROLE_1)____,Secret, ____(KEY_1)____);\n        claim_R5(____(ROLE_1)____,Empty, (Fresh,____(KEY_1)____));\n    }\n}",
        "complete:": "# BAN modified Andrew Secure RPC\n#\n# Modelled after the description in the SPORE library\n# http://www.lsv.ens-cachan.fr/spore/andrewBAN.html\n#\n# Note:\n# The shared key between I and R is modelled as k(I,R) currently\n# there is no way to express that this key is equal to k(R,I)\n# So it is possile that certain attacks that use this property are not found\n# \n# Note:\n# According to SPORE there are no known attacks on this protocol\n#\nusertype SessionKey;\nconst Fresh: Function;\nconst Compromised: Function;\n\nprotocol andrew-Ban(I,R)\n{\n    role I\n    {\n        fresh ni: Nonce;\n        var nr,nr2: Nonce;\n        var kir: SessionKey;\n\n        send_1(I,R, I,{ni}k(I,R) );\n        recv_2(R,I, {ni,nr}k(I,R) );\n        send_3(I,R, {nr}k(I,R) );\n        recv_4(R,I, {kir,nr2,ni}k(I,R) );\n        claim_I1(I,Nisynch);\n        claim_I2(I,Niagree);\n        claim_I3(I,Secret, kir);\n        claim_I5(I,Empty, (Fresh,kir));\n    }    \n    \n    role R\n    {\n        var ni: Nonce;\n        fresh nr,nr2: Nonce;\n        fresh kir: SessionKey;\n\n        recv_1(I,R, I,{ni}k(I,R) );\n        send_2(R,I, {ni,nr}k(I,R) );\n        recv_3(I,R, {nr}k(I,R) );\n        send_4(R,I, {kir,nr2,ni}k(I,R) );\n        claim_R1(R,Nisynch);\n        claim_R2(R,Niagree);\n        claim_R3(R,Secret, kir);\n        claim_R5(R,Empty, (Fresh,kir));\n    }\n}"
    }
]