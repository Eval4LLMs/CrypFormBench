[
    {
        "file": "CV-1/Aizatulin-RPC.parse.cv",
        "incomplete": "param ____(PARAM_0)____.\n\nchannel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,\n  start, finish.\n\n(* unforgeable MACs *)\n\ntype mkeyseed [fixed, large].\ntype mkey [bounded].\ntype ____(TYPE_0)____.\n(* type macres. *)\n\nproba ____(PROBA_0)____.\n\nexpand UF_CMA_mac(mkeyseed, mkey, ____(OP_1)____, bitstring, mkgen, mac, check, Pmac).\n\nfun concat1(bitstring, bitstring): bitstring [compos].\nfun parse1(bitstring): bitstring. (* The indication [decompos] makes the proof fail... *)\nfun parse2(bitstring): bitstring. (* The indication [decompos] makes the proof fail... *)\n\nforall x:bitstring, y:bitstring;\n  parse1(concat1(x, y)) = x.\n\nforall x:bitstring, y:bitstring;\n  parse2(concat1(x, y)) = y.\n\nevent client_begin(bitstring).\nevent server_accept(bitstring).\n\nquery x: bitstring, y:bitstring;\n  event server_accept(____(EVENT_0)____) ==> client_begin(x).\n\nlet A =\n  in(c1, ____(OP_0)____: bitstring);\n  event client_begin(payload);\n  out(c2, concat1(payload, mac(payload, kAB))).\n\nlet B = \n  in(c4, m: bitstring);\n  let payload = parse1(m) in\n  let h = parse2(m) in\n  if check(payload, kAB, h) then\n  event server_accept(payload);\n  yield.\n\n(* can we insert a bang at the front? *)\nprocess\n  in(start, ());\n  new keyseed: mkeyseed;\n  let kAB = mkgen(keyseed) in\n  out(____(OP_4)____, ());\n  ((! N A) | (! N B))\n\n   \n(* EXPECTED\nAll queries proved.\n0.032s (user 0.028s + system 0.004s), max rss 36912K\nEND *)",
        "complete:": "param N.\n\nchannel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,\n  start, finish.\n\n(* unforgeable MACs *)\n\ntype mkeyseed [fixed, large].\ntype mkey [bounded].\ntype macinput.\n(* type macres. *)\n\nproba Pmac.\n\nexpand UF_CMA_mac(mkeyseed, mkey, bitstring, bitstring, mkgen, mac, check, Pmac).\n\nfun concat1(bitstring, bitstring): bitstring [compos].\nfun parse1(bitstring): bitstring. (* The indication [decompos] makes the proof fail... *)\nfun parse2(bitstring): bitstring. (* The indication [decompos] makes the proof fail... *)\n\nforall x:bitstring, y:bitstring;\n  parse1(concat1(x, y)) = x.\n\nforall x:bitstring, y:bitstring;\n  parse2(concat1(x, y)) = y.\n\nevent client_begin(bitstring).\nevent server_accept(bitstring).\n\nquery x: bitstring, y:bitstring;\n  event server_accept(x) ==> client_begin(x).\n\nlet A =\n  in(c1, payload: bitstring);\n  event client_begin(payload);\n  out(c2, concat1(payload, mac(payload, kAB))).\n\nlet B = \n  in(c4, m: bitstring);\n  let payload = parse1(m) in\n  let h = parse2(m) in\n  if check(payload, kAB, h) then\n  event server_accept(payload);\n  yield.\n\n(* can we insert a bang at the front? *)\nprocess\n  in(start, ());\n  new keyseed: mkeyseed;\n  let kAB = mkgen(keyseed) in\n  out(finish, ());\n  ((! N A) | (! N B))\n\n   \n(* EXPECTED\nAll queries proved.\n0.032s (user 0.028s + system 0.004s), max rss 36912K\nEND *)"
    },
    {
        "file": "CV-1/auto_sa_rename_after_simplify.cv",
        "incomplete": "param ____(PARAM_0)____.\nchannel ____(CHANNEL_0)____.\n\nprocess\n\t(\n\tin(c, (____(OP_1)____:bitstring, y:bitstring, ____(OP_0)____:bitstring));\n\tif x = y || x = z then\n\tfind i <= N suchthat defined(a[i]) && let y' = a[i] in x = y' then\n\t     out(c, true)\n\telse\t\n\t     out(c, false)\n\t)\t     \n|\n\t(\n\t!N\n\tin(c, a:bitstring)\n\t)\n\n(* EXPECTED\nAll queries proved.\n0.020s (user 0.020s + system 0.000s), max rss 15440K\nEND *)",
        "complete:": "param N.\nchannel c.\n\nprocess\n\t(\n\tin(c, (x:bitstring, y:bitstring, z:bitstring));\n\tif x = y || x = z then\n\tfind i <= N suchthat defined(a[i]) && let y' = a[i] in x = y' then\n\t     out(c, true)\n\telse\t\n\t     out(c, false)\n\t)\t     \n|\n\t(\n\t!N\n\tin(c, a:bitstring)\n\t)\n\n(* EXPECTED\nAll queries proved.\n0.020s (user 0.020s + system 0.000s), max rss 15440K\nEND *)"
    },
    {
        "file": "CV-1/Avik-cc-sym-enc-prf-mac.cv",
        "incomplete": "(** Chosen ciphertext secure symmetric encryption **)\n\n(** The construction of an encryption scheme \n    using a pseudo-random function family\n    and an unpredictable function family\n    is shown to be IND-CCA2.\n    See Section 7, \"Sequences of Games\", Victor Shoup. **)\n\nparam n, m, ____(PARAM_0)____, q, qE, qD.\n\ntype S [large,fixed].\ntype ____(OP_3)____ [large,fixed].\n\ntype N [large,fixed].\ntype L [fixed].\ntype W [fixed].\n\nproba pPRF.\nproba ____(PROBA_0)____.\nproba pXOR.\n\nfun f(____(OP_6)____,N): ____(FUN_0)____.\n\n(* f(S) is a pseudo-random function family *) \n\nequiv\n    !n new s:S;\n      (x:N) m -> f(____(OP_8)____,x)\n<=(pPRF(time,n,____(OP_7)____))=>\n    !n \n      (x:N) m -> find u <= m \n\t            suchthat defined(x[u],____(OP_10)____[u])\n                          && x = x[u]\n\t            then r[u]\n                    else new r:L; r.\n\nfun h(____(OP_11)____,N,L): W.\n\n(* h(K) is a message authentication code (an unpredictable function family) *)\n\nfun h'(K,N,L): W.\n\nequiv \n    !n new k:K; (\n         (y:N,z:L) m -> h(k,y,z),\n\t (y':N,z':L,t:W) p -> t = h(k,y',z')  \n    ) \n<=(pUF(time,n,m,p))=>\n    !n new k:K; (\n         (y:N,z:L) m -> h'(k,y,z),\n\t (y':N,z':L,t:W) p -> find u <= m suchthat \n\t     defined(y[u],z[u]) && y' = y[u] && z' = z[u] \n                          then t = h'(k,y',z') else false \n    ).\n\nfun xor(L,L): L.\n\n(* the theory of xor implies several propositions *)\n\nforall x:L, y:L; xor(x, xor(x,y)) = y.\n\nequiv \n    (y:L) n -> new x:L; xor(x,y)\n<=(pXOR(time,n))=>\n    (y:L) n -> new x:L; x.\n\nfun choose(bool,L,L): L.\n\n(* choose(b,M,N) = if b then M else N *)\n\nforall x:bool, y:L, z:L;\n  (x && choose(____(OP_2)____,y,z) = y) || (not(x) && choose(x,y,z) = z).\n\nconst reject:L.\n\n(* query *)\nquery secret ____(QUERY_0)____.\n\nchannel dummy, ____(CHANNEL_0)____, cEret, cD, cDret, start.\n\nlet processE = !qE\n    in(cE, (m0:L, m1:L));\n    new x':N;\n    let tempE = f(s,x') in\n    let m' = choose(b,m1,m0) in\n    let c':L = xor(tempE, m') in\n    let t':W = h(k,x',c') in\n    out(cEret, (x',c',t')).\n\nlet processD = !qD\n    in(cD, (x:____(OP_0)____, ____(OP_1)____:L, t:W));\n    if t = h(k,x,c) \n      then \n        (find u <= qE suchthat \n                defined(x'[____(OP_4)____],c'[____(OP_5)____],t'[u])\n             && x = x'[u]\n             && c = c'[u]\n\t     && t = t'[u] (* BB: added *)\n           then out(cDret, reject)  \n           else \n             let tempD = f(s,x) in \n             let m = xor(tempD, c) in \n             out(cDret, ____(OP_9)____) ) \n      else out(cDret, reject).\n\nlet processI = !q\n  in(dummy, ());\n  new k:K;\n  new s:S;\n  new b:bool;\n  out(dummy, ()); \n  (processE | processD).\n\nprocess\n  in(start, ());\n  out(dummy, ());\n  processI\n\n\n\n\n\n(* EXPECTED\nAll queries proved.\n0.030s (user 0.030s + system 0.000s), max rss 18976K\nEND *)",
        "complete:": "(** Chosen ciphertext secure symmetric encryption **)\n\n(** The construction of an encryption scheme \n    using a pseudo-random function family\n    and an unpredictable function family\n    is shown to be IND-CCA2.\n    See Section 7, \"Sequences of Games\", Victor Shoup. **)\n\nparam n, m, p, q, qE, qD.\n\ntype S [large,fixed].\ntype K [large,fixed].\n\ntype N [large,fixed].\ntype L [fixed].\ntype W [fixed].\n\nproba pPRF.\nproba pUF.\nproba pXOR.\n\nfun f(S,N): L.\n\n(* f(S) is a pseudo-random function family *) \n\nequiv\n    !n new s:S;\n      (x:N) m -> f(s,x)\n<=(pPRF(time,n,m))=>\n    !n \n      (x:N) m -> find u <= m \n\t            suchthat defined(x[u],r[u])\n                          && x = x[u]\n\t            then r[u]\n                    else new r:L; r.\n\nfun h(K,N,L): W.\n\n(* h(K) is a message authentication code (an unpredictable function family) *)\n\nfun h'(K,N,L): W.\n\nequiv \n    !n new k:K; (\n         (y:N,z:L) m -> h(k,y,z),\n\t (y':N,z':L,t:W) p -> t = h(k,y',z')  \n    ) \n<=(pUF(time,n,m,p))=>\n    !n new k:K; (\n         (y:N,z:L) m -> h'(k,y,z),\n\t (y':N,z':L,t:W) p -> find u <= m suchthat \n\t     defined(y[u],z[u]) && y' = y[u] && z' = z[u] \n                          then t = h'(k,y',z') else false \n    ).\n\nfun xor(L,L): L.\n\n(* the theory of xor implies several propositions *)\n\nforall x:L, y:L; xor(x, xor(x,y)) = y.\n\nequiv \n    (y:L) n -> new x:L; xor(x,y)\n<=(pXOR(time,n))=>\n    (y:L) n -> new x:L; x.\n\nfun choose(bool,L,L): L.\n\n(* choose(b,M,N) = if b then M else N *)\n\nforall x:bool, y:L, z:L;\n  (x && choose(x,y,z) = y) || (not(x) && choose(x,y,z) = z).\n\nconst reject:L.\n\n(* query *)\nquery secret b.\n\nchannel dummy, cE, cEret, cD, cDret, start.\n\nlet processE = !qE\n    in(cE, (m0:L, m1:L));\n    new x':N;\n    let tempE = f(s,x') in\n    let m' = choose(b,m1,m0) in\n    let c':L = xor(tempE, m') in\n    let t':W = h(k,x',c') in\n    out(cEret, (x',c',t')).\n\nlet processD = !qD\n    in(cD, (x:N, c:L, t:W));\n    if t = h(k,x,c) \n      then \n        (find u <= qE suchthat \n                defined(x'[u],c'[u],t'[u])\n             && x = x'[u]\n             && c = c'[u]\n\t     && t = t'[u] (* BB: added *)\n           then out(cDret, reject)  \n           else \n             let tempD = f(s,x) in \n             let m = xor(tempD, c) in \n             out(cDret, m) ) \n      else out(cDret, reject).\n\nlet processI = !q\n  in(dummy, ());\n  new k:K;\n  new s:S;\n  new b:bool;\n  out(dummy, ()); \n  (processE | processD).\n\nprocess\n  in(start, ());\n  out(dummy, ());\n  processI\n\n\n\n\n\n(* EXPECTED\nAll queries proved.\n0.030s (user 0.030s + system 0.000s), max rss 18976K\nEND *)"
    }
]